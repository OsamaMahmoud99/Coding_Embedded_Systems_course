
Digital_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002660  000026f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800088  00800088  0000271c  2**0
                  ALLOC
  3 .stab         00002c7c  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019ea  00000000  00000000  00005398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__vector_6>
      1c:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__vector_7>
      20:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__vector_8>
      24:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_9>
      28:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_10>
      2c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 12 	call	0x256c	; 0x256c <main>
      8a:	0c 94 2e 13 	jmp	0x265c	; 0x265c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_InitPin>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2c 97       	sbiw	r28, 0x0c	; 12
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8b 83       	std	Y+3, r24	; 0x03
      a8:	6c 83       	std	Y+4, r22	; 0x04
      aa:	8b 81       	ldd	r24, Y+3	; 0x03
      ac:	86 95       	lsr	r24
      ae:	86 95       	lsr	r24
      b0:	86 95       	lsr	r24
      b2:	8a 83       	std	Y+2, r24	; 0x02
      b4:	8b 81       	ldd	r24, Y+3	; 0x03
      b6:	87 70       	andi	r24, 0x07	; 7
      b8:	89 83       	std	Y+1, r24	; 0x01
      ba:	8c 81       	ldd	r24, Y+4	; 0x04
      bc:	28 2f       	mov	r18, r24
      be:	30 e0       	ldi	r19, 0x00	; 0
      c0:	3c 87       	std	Y+12, r19	; 0x0c
      c2:	2b 87       	std	Y+11, r18	; 0x0b
      c4:	8b 85       	ldd	r24, Y+11	; 0x0b
      c6:	9c 85       	ldd	r25, Y+12	; 0x0c
      c8:	81 30       	cpi	r24, 0x01	; 1
      ca:	91 05       	cpc	r25, r1
      cc:	09 f4       	brne	.+2      	; 0xd0 <DIO_InitPin+0x3e>
      ce:	c9 c0       	rjmp	.+402    	; 0x262 <DIO_InitPin+0x1d0>
      d0:	2b 85       	ldd	r18, Y+11	; 0x0b
      d2:	3c 85       	ldd	r19, Y+12	; 0x0c
      d4:	22 30       	cpi	r18, 0x02	; 2
      d6:	31 05       	cpc	r19, r1
      d8:	09 f4       	brne	.+2      	; 0xdc <DIO_InitPin+0x4a>
      da:	85 c1       	rjmp	.+778    	; 0x3e6 <DIO_InitPin+0x354>
      dc:	8b 85       	ldd	r24, Y+11	; 0x0b
      de:	9c 85       	ldd	r25, Y+12	; 0x0c
      e0:	00 97       	sbiw	r24, 0x00	; 0
      e2:	09 f0       	breq	.+2      	; 0xe6 <DIO_InitPin+0x54>
      e4:	3d c2       	rjmp	.+1146   	; 0x560 <DIO_InitPin+0x4ce>
      e6:	8a 81       	ldd	r24, Y+2	; 0x02
      e8:	28 2f       	mov	r18, r24
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	3a 87       	std	Y+10, r19	; 0x0a
      ee:	29 87       	std	Y+9, r18	; 0x09
      f0:	89 85       	ldd	r24, Y+9	; 0x09
      f2:	9a 85       	ldd	r25, Y+10	; 0x0a
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	91 05       	cpc	r25, r1
      f8:	09 f4       	brne	.+2      	; 0xfc <DIO_InitPin+0x6a>
      fa:	3e c0       	rjmp	.+124    	; 0x178 <DIO_InitPin+0xe6>
      fc:	29 85       	ldd	r18, Y+9	; 0x09
      fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     100:	22 30       	cpi	r18, 0x02	; 2
     102:	31 05       	cpc	r19, r1
     104:	2c f4       	brge	.+10     	; 0x110 <DIO_InitPin+0x7e>
     106:	89 85       	ldd	r24, Y+9	; 0x09
     108:	9a 85       	ldd	r25, Y+10	; 0x0a
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	71 f0       	breq	.+28     	; 0x12a <DIO_InitPin+0x98>
     10e:	28 c2       	rjmp	.+1104   	; 0x560 <DIO_InitPin+0x4ce>
     110:	29 85       	ldd	r18, Y+9	; 0x09
     112:	3a 85       	ldd	r19, Y+10	; 0x0a
     114:	22 30       	cpi	r18, 0x02	; 2
     116:	31 05       	cpc	r19, r1
     118:	09 f4       	brne	.+2      	; 0x11c <DIO_InitPin+0x8a>
     11a:	55 c0       	rjmp	.+170    	; 0x1c6 <DIO_InitPin+0x134>
     11c:	89 85       	ldd	r24, Y+9	; 0x09
     11e:	9a 85       	ldd	r25, Y+10	; 0x0a
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	91 05       	cpc	r25, r1
     124:	09 f4       	brne	.+2      	; 0x128 <DIO_InitPin+0x96>
     126:	76 c0       	rjmp	.+236    	; 0x214 <DIO_InitPin+0x182>
     128:	1b c2       	rjmp	.+1078   	; 0x560 <DIO_InitPin+0x4ce>
     12a:	aa e3       	ldi	r26, 0x3A	; 58
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	ea e3       	ldi	r30, 0x3A	; 58
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	48 2f       	mov	r20, r24
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	28 2f       	mov	r18, r24
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_InitPin+0xb4>
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	2a 95       	dec	r18
     148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_InitPin+0xb0>
     14a:	84 2b       	or	r24, r20
     14c:	8c 93       	st	X, r24
     14e:	ab e3       	ldi	r26, 0x3B	; 59
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	eb e3       	ldi	r30, 0x3B	; 59
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	48 2f       	mov	r20, r24
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	28 2f       	mov	r18, r24
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	02 2e       	mov	r0, r18
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_InitPin+0xda>
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	0a 94       	dec	r0
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_InitPin+0xd6>
     170:	80 95       	com	r24
     172:	84 23       	and	r24, r20
     174:	8c 93       	st	X, r24
     176:	f4 c1       	rjmp	.+1000   	; 0x560 <DIO_InitPin+0x4ce>
     178:	a7 e3       	ldi	r26, 0x37	; 55
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e7 e3       	ldi	r30, 0x37	; 55
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	48 2f       	mov	r20, r24
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	28 2f       	mov	r18, r24
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_InitPin+0x102>
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	2a 95       	dec	r18
     196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_InitPin+0xfe>
     198:	84 2b       	or	r24, r20
     19a:	8c 93       	st	X, r24
     19c:	a8 e3       	ldi	r26, 0x38	; 56
     19e:	b0 e0       	ldi	r27, 0x00	; 0
     1a0:	e8 e3       	ldi	r30, 0x38	; 56
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	48 2f       	mov	r20, r24
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	28 2f       	mov	r18, r24
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	02 2e       	mov	r0, r18
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_InitPin+0x128>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	0a 94       	dec	r0
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_InitPin+0x124>
     1be:	80 95       	com	r24
     1c0:	84 23       	and	r24, r20
     1c2:	8c 93       	st	X, r24
     1c4:	cd c1       	rjmp	.+922    	; 0x560 <DIO_InitPin+0x4ce>
     1c6:	a4 e3       	ldi	r26, 0x34	; 52
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e4 e3       	ldi	r30, 0x34	; 52
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	48 2f       	mov	r20, r24
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	28 2f       	mov	r18, r24
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_InitPin+0x150>
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	2a 95       	dec	r18
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_InitPin+0x14c>
     1e6:	84 2b       	or	r24, r20
     1e8:	8c 93       	st	X, r24
     1ea:	a5 e3       	ldi	r26, 0x35	; 53
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e5 e3       	ldi	r30, 0x35	; 53
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	48 2f       	mov	r20, r24
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	28 2f       	mov	r18, r24
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 2e       	mov	r0, r18
     202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_InitPin+0x176>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	0a 94       	dec	r0
     20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_InitPin+0x172>
     20c:	80 95       	com	r24
     20e:	84 23       	and	r24, r20
     210:	8c 93       	st	X, r24
     212:	a6 c1       	rjmp	.+844    	; 0x560 <DIO_InitPin+0x4ce>
     214:	a1 e3       	ldi	r26, 0x31	; 49
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	e1 e3       	ldi	r30, 0x31	; 49
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	48 2f       	mov	r20, r24
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	28 2f       	mov	r18, r24
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_InitPin+0x19e>
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	2a 95       	dec	r18
     232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_InitPin+0x19a>
     234:	84 2b       	or	r24, r20
     236:	8c 93       	st	X, r24
     238:	a2 e3       	ldi	r26, 0x32	; 50
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	e2 e3       	ldi	r30, 0x32	; 50
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	48 2f       	mov	r20, r24
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	28 2f       	mov	r18, r24
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	02 2e       	mov	r0, r18
     250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_InitPin+0x1c4>
     252:	88 0f       	add	r24, r24
     254:	99 1f       	adc	r25, r25
     256:	0a 94       	dec	r0
     258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_InitPin+0x1c0>
     25a:	80 95       	com	r24
     25c:	84 23       	and	r24, r20
     25e:	8c 93       	st	X, r24
     260:	7f c1       	rjmp	.+766    	; 0x560 <DIO_InitPin+0x4ce>
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	28 2f       	mov	r18, r24
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	38 87       	std	Y+8, r19	; 0x08
     26a:	2f 83       	std	Y+7, r18	; 0x07
     26c:	8f 81       	ldd	r24, Y+7	; 0x07
     26e:	98 85       	ldd	r25, Y+8	; 0x08
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	91 05       	cpc	r25, r1
     274:	09 f4       	brne	.+2      	; 0x278 <DIO_InitPin+0x1e6>
     276:	3f c0       	rjmp	.+126    	; 0x2f6 <DIO_InitPin+0x264>
     278:	2f 81       	ldd	r18, Y+7	; 0x07
     27a:	38 85       	ldd	r19, Y+8	; 0x08
     27c:	22 30       	cpi	r18, 0x02	; 2
     27e:	31 05       	cpc	r19, r1
     280:	2c f4       	brge	.+10     	; 0x28c <DIO_InitPin+0x1fa>
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	98 85       	ldd	r25, Y+8	; 0x08
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	71 f0       	breq	.+28     	; 0x2a6 <DIO_InitPin+0x214>
     28a:	6a c1       	rjmp	.+724    	; 0x560 <DIO_InitPin+0x4ce>
     28c:	2f 81       	ldd	r18, Y+7	; 0x07
     28e:	38 85       	ldd	r19, Y+8	; 0x08
     290:	22 30       	cpi	r18, 0x02	; 2
     292:	31 05       	cpc	r19, r1
     294:	09 f4       	brne	.+2      	; 0x298 <DIO_InitPin+0x206>
     296:	57 c0       	rjmp	.+174    	; 0x346 <DIO_InitPin+0x2b4>
     298:	8f 81       	ldd	r24, Y+7	; 0x07
     29a:	98 85       	ldd	r25, Y+8	; 0x08
     29c:	83 30       	cpi	r24, 0x03	; 3
     29e:	91 05       	cpc	r25, r1
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <DIO_InitPin+0x212>
     2a2:	79 c0       	rjmp	.+242    	; 0x396 <DIO_InitPin+0x304>
     2a4:	5d c1       	rjmp	.+698    	; 0x560 <DIO_InitPin+0x4ce>
     2a6:	aa e3       	ldi	r26, 0x3A	; 58
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	ea e3       	ldi	r30, 0x3A	; 58
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	48 2f       	mov	r20, r24
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	28 2f       	mov	r18, r24
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_InitPin+0x230>
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	2a 95       	dec	r18
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_InitPin+0x22c>
     2c6:	80 95       	com	r24
     2c8:	84 23       	and	r24, r20
     2ca:	8c 93       	st	X, r24
     2cc:	ab e3       	ldi	r26, 0x3B	; 59
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	eb e3       	ldi	r30, 0x3B	; 59
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	48 2f       	mov	r20, r24
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	28 2f       	mov	r18, r24
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	02 2e       	mov	r0, r18
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_InitPin+0x258>
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	0a 94       	dec	r0
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_InitPin+0x254>
     2ee:	80 95       	com	r24
     2f0:	84 23       	and	r24, r20
     2f2:	8c 93       	st	X, r24
     2f4:	35 c1       	rjmp	.+618    	; 0x560 <DIO_InitPin+0x4ce>
     2f6:	a7 e3       	ldi	r26, 0x37	; 55
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	e7 e3       	ldi	r30, 0x37	; 55
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	48 2f       	mov	r20, r24
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	28 2f       	mov	r18, r24
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_InitPin+0x280>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	2a 95       	dec	r18
     314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_InitPin+0x27c>
     316:	80 95       	com	r24
     318:	84 23       	and	r24, r20
     31a:	8c 93       	st	X, r24
     31c:	a8 e3       	ldi	r26, 0x38	; 56
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	e8 e3       	ldi	r30, 0x38	; 56
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	48 2f       	mov	r20, r24
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	28 2f       	mov	r18, r24
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	02 2e       	mov	r0, r18
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_InitPin+0x2a8>
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	0a 94       	dec	r0
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_InitPin+0x2a4>
     33e:	80 95       	com	r24
     340:	84 23       	and	r24, r20
     342:	8c 93       	st	X, r24
     344:	0d c1       	rjmp	.+538    	; 0x560 <DIO_InitPin+0x4ce>
     346:	a4 e3       	ldi	r26, 0x34	; 52
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	e4 e3       	ldi	r30, 0x34	; 52
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	48 2f       	mov	r20, r24
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_InitPin+0x2d0>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	2a 95       	dec	r18
     364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_InitPin+0x2cc>
     366:	80 95       	com	r24
     368:	84 23       	and	r24, r20
     36a:	8c 93       	st	X, r24
     36c:	a5 e3       	ldi	r26, 0x35	; 53
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	e5 e3       	ldi	r30, 0x35	; 53
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	48 2f       	mov	r20, r24
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 2e       	mov	r0, r18
     384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_InitPin+0x2f8>
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	0a 94       	dec	r0
     38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_InitPin+0x2f4>
     38e:	80 95       	com	r24
     390:	84 23       	and	r24, r20
     392:	8c 93       	st	X, r24
     394:	e5 c0       	rjmp	.+458    	; 0x560 <DIO_InitPin+0x4ce>
     396:	a1 e3       	ldi	r26, 0x31	; 49
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 e3       	ldi	r30, 0x31	; 49
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	48 2f       	mov	r20, r24
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	28 2f       	mov	r18, r24
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_InitPin+0x320>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	2a 95       	dec	r18
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_InitPin+0x31c>
     3b6:	80 95       	com	r24
     3b8:	84 23       	and	r24, r20
     3ba:	8c 93       	st	X, r24
     3bc:	a2 e3       	ldi	r26, 0x32	; 50
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	e2 e3       	ldi	r30, 0x32	; 50
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	48 2f       	mov	r20, r24
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	02 2e       	mov	r0, r18
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_InitPin+0x348>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	0a 94       	dec	r0
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_InitPin+0x344>
     3de:	80 95       	com	r24
     3e0:	84 23       	and	r24, r20
     3e2:	8c 93       	st	X, r24
     3e4:	bd c0       	rjmp	.+378    	; 0x560 <DIO_InitPin+0x4ce>
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	3e 83       	std	Y+6, r19	; 0x06
     3ee:	2d 83       	std	Y+5, r18	; 0x05
     3f0:	8d 81       	ldd	r24, Y+5	; 0x05
     3f2:	9e 81       	ldd	r25, Y+6	; 0x06
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	91 05       	cpc	r25, r1
     3f8:	09 f4       	brne	.+2      	; 0x3fc <DIO_InitPin+0x36a>
     3fa:	3e c0       	rjmp	.+124    	; 0x478 <DIO_InitPin+0x3e6>
     3fc:	2d 81       	ldd	r18, Y+5	; 0x05
     3fe:	3e 81       	ldd	r19, Y+6	; 0x06
     400:	22 30       	cpi	r18, 0x02	; 2
     402:	31 05       	cpc	r19, r1
     404:	2c f4       	brge	.+10     	; 0x410 <DIO_InitPin+0x37e>
     406:	8d 81       	ldd	r24, Y+5	; 0x05
     408:	9e 81       	ldd	r25, Y+6	; 0x06
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	71 f0       	breq	.+28     	; 0x42a <DIO_InitPin+0x398>
     40e:	a8 c0       	rjmp	.+336    	; 0x560 <DIO_InitPin+0x4ce>
     410:	2d 81       	ldd	r18, Y+5	; 0x05
     412:	3e 81       	ldd	r19, Y+6	; 0x06
     414:	22 30       	cpi	r18, 0x02	; 2
     416:	31 05       	cpc	r19, r1
     418:	09 f4       	brne	.+2      	; 0x41c <DIO_InitPin+0x38a>
     41a:	55 c0       	rjmp	.+170    	; 0x4c6 <DIO_InitPin+0x434>
     41c:	8d 81       	ldd	r24, Y+5	; 0x05
     41e:	9e 81       	ldd	r25, Y+6	; 0x06
     420:	83 30       	cpi	r24, 0x03	; 3
     422:	91 05       	cpc	r25, r1
     424:	09 f4       	brne	.+2      	; 0x428 <DIO_InitPin+0x396>
     426:	76 c0       	rjmp	.+236    	; 0x514 <DIO_InitPin+0x482>
     428:	9b c0       	rjmp	.+310    	; 0x560 <DIO_InitPin+0x4ce>
     42a:	aa e3       	ldi	r26, 0x3A	; 58
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	ea e3       	ldi	r30, 0x3A	; 58
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	48 2f       	mov	r20, r24
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	28 2f       	mov	r18, r24
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_InitPin+0x3b4>
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	2a 95       	dec	r18
     448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_InitPin+0x3b0>
     44a:	80 95       	com	r24
     44c:	84 23       	and	r24, r20
     44e:	8c 93       	st	X, r24
     450:	ab e3       	ldi	r26, 0x3B	; 59
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	eb e3       	ldi	r30, 0x3B	; 59
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	48 2f       	mov	r20, r24
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	28 2f       	mov	r18, r24
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	02 2e       	mov	r0, r18
     468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_InitPin+0x3dc>
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	0a 94       	dec	r0
     470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_InitPin+0x3d8>
     472:	84 2b       	or	r24, r20
     474:	8c 93       	st	X, r24
     476:	74 c0       	rjmp	.+232    	; 0x560 <DIO_InitPin+0x4ce>
     478:	a7 e3       	ldi	r26, 0x37	; 55
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	e7 e3       	ldi	r30, 0x37	; 55
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	48 2f       	mov	r20, r24
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	28 2f       	mov	r18, r24
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_InitPin+0x402>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	2a 95       	dec	r18
     496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_InitPin+0x3fe>
     498:	80 95       	com	r24
     49a:	84 23       	and	r24, r20
     49c:	8c 93       	st	X, r24
     49e:	a8 e3       	ldi	r26, 0x38	; 56
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	e8 e3       	ldi	r30, 0x38	; 56
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	48 2f       	mov	r20, r24
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	28 2f       	mov	r18, r24
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	02 2e       	mov	r0, r18
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_InitPin+0x42a>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	0a 94       	dec	r0
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_InitPin+0x426>
     4c0:	84 2b       	or	r24, r20
     4c2:	8c 93       	st	X, r24
     4c4:	4d c0       	rjmp	.+154    	; 0x560 <DIO_InitPin+0x4ce>
     4c6:	a4 e3       	ldi	r26, 0x34	; 52
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	e4 e3       	ldi	r30, 0x34	; 52
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	48 2f       	mov	r20, r24
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	28 2f       	mov	r18, r24
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_InitPin+0x450>
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	2a 95       	dec	r18
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_InitPin+0x44c>
     4e6:	80 95       	com	r24
     4e8:	84 23       	and	r24, r20
     4ea:	8c 93       	st	X, r24
     4ec:	a5 e3       	ldi	r26, 0x35	; 53
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	e5 e3       	ldi	r30, 0x35	; 53
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	48 2f       	mov	r20, r24
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	02 2e       	mov	r0, r18
     504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_InitPin+0x478>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	0a 94       	dec	r0
     50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_InitPin+0x474>
     50e:	84 2b       	or	r24, r20
     510:	8c 93       	st	X, r24
     512:	26 c0       	rjmp	.+76     	; 0x560 <DIO_InitPin+0x4ce>
     514:	a1 e3       	ldi	r26, 0x31	; 49
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e1 e3       	ldi	r30, 0x31	; 49
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	48 2f       	mov	r20, r24
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	28 2f       	mov	r18, r24
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_InitPin+0x49e>
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	2a 95       	dec	r18
     532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_InitPin+0x49a>
     534:	80 95       	com	r24
     536:	84 23       	and	r24, r20
     538:	8c 93       	st	X, r24
     53a:	a2 e3       	ldi	r26, 0x32	; 50
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	e2 e3       	ldi	r30, 0x32	; 50
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	48 2f       	mov	r20, r24
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	28 2f       	mov	r18, r24
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	02 2e       	mov	r0, r18
     552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_InitPin+0x4c6>
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	0a 94       	dec	r0
     55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_InitPin+0x4c2>
     55c:	84 2b       	or	r24, r20
     55e:	8c 93       	st	X, r24
     560:	2c 96       	adiw	r28, 0x0c	; 12
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	cf 91       	pop	r28
     56e:	df 91       	pop	r29
     570:	08 95       	ret

00000572 <DIO_Init>:
	}
}


void DIO_Init(void)
{
     572:	df 93       	push	r29
     574:	cf 93       	push	r28
     576:	0f 92       	push	r0
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type counter;
	for (counter=PINA0; counter<TOTAL_PINS; ++counter)
     57c:	19 82       	std	Y+1, r1	; 0x01
     57e:	0e c0       	rjmp	.+28     	; 0x59c <DIO_Init+0x2a>
	{
		DIO_InitPin(counter , PinsStatusArray[counter]);
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	fc 01       	movw	r30, r24
     588:	e9 59       	subi	r30, 0x99	; 153
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	90 81       	ld	r25, Z
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	69 2f       	mov	r22, r25
     592:	0e 94 49 00 	call	0x92	; 0x92 <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_type counter;
	for (counter=PINA0; counter<TOTAL_PINS; ++counter)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	80 32       	cpi	r24, 0x20	; 32
     5a0:	78 f3       	brcs	.-34     	; 0x580 <DIO_Init+0xe>
	{
		DIO_InitPin(counter , PinsStatusArray[counter]);
	}
}
     5a2:	0f 90       	pop	r0
     5a4:	cf 91       	pop	r28
     5a6:	df 91       	pop	r29
     5a8:	08 95       	ret

000005aa <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
     5aa:	df 93       	push	r29
     5ac:	cf 93       	push	r28
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	28 97       	sbiw	r28, 0x08	; 8
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	8b 83       	std	Y+3, r24	; 0x03
     5c0:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port = pin/8;
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	86 95       	lsr	r24
     5c6:	86 95       	lsr	r24
     5c8:	86 95       	lsr	r24
     5ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num  = pin % 8;
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	87 70       	andi	r24, 0x07	; 7
     5d0:	89 83       	std	Y+1, r24	; 0x01
	
	if (volt == LOW)
     5d2:	8c 81       	ldd	r24, Y+4	; 0x04
     5d4:	88 23       	and	r24, r24
     5d6:	09 f0       	breq	.+2      	; 0x5da <DIO_WritePin+0x30>
     5d8:	74 c0       	rjmp	.+232    	; 0x6c2 <DIO_WritePin+0x118>
	{
		switch(port)
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	28 2f       	mov	r18, r24
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	38 87       	std	Y+8, r19	; 0x08
     5e2:	2f 83       	std	Y+7, r18	; 0x07
     5e4:	8f 81       	ldd	r24, Y+7	; 0x07
     5e6:	98 85       	ldd	r25, Y+8	; 0x08
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	91 05       	cpc	r25, r1
     5ec:	59 f1       	breq	.+86     	; 0x644 <DIO_WritePin+0x9a>
     5ee:	2f 81       	ldd	r18, Y+7	; 0x07
     5f0:	38 85       	ldd	r19, Y+8	; 0x08
     5f2:	22 30       	cpi	r18, 0x02	; 2
     5f4:	31 05       	cpc	r19, r1
     5f6:	2c f4       	brge	.+10     	; 0x602 <DIO_WritePin+0x58>
     5f8:	8f 81       	ldd	r24, Y+7	; 0x07
     5fa:	98 85       	ldd	r25, Y+8	; 0x08
     5fc:	00 97       	sbiw	r24, 0x00	; 0
     5fe:	69 f0       	breq	.+26     	; 0x61a <DIO_WritePin+0x70>
     600:	d2 c0       	rjmp	.+420    	; 0x7a6 <DIO_WritePin+0x1fc>
     602:	2f 81       	ldd	r18, Y+7	; 0x07
     604:	38 85       	ldd	r19, Y+8	; 0x08
     606:	22 30       	cpi	r18, 0x02	; 2
     608:	31 05       	cpc	r19, r1
     60a:	89 f1       	breq	.+98     	; 0x66e <DIO_WritePin+0xc4>
     60c:	8f 81       	ldd	r24, Y+7	; 0x07
     60e:	98 85       	ldd	r25, Y+8	; 0x08
     610:	83 30       	cpi	r24, 0x03	; 3
     612:	91 05       	cpc	r25, r1
     614:	09 f4       	brne	.+2      	; 0x618 <DIO_WritePin+0x6e>
     616:	40 c0       	rjmp	.+128    	; 0x698 <DIO_WritePin+0xee>
     618:	c6 c0       	rjmp	.+396    	; 0x7a6 <DIO_WritePin+0x1fc>
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
     61a:	ab e3       	ldi	r26, 0x3B	; 59
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	eb e3       	ldi	r30, 0x3B	; 59
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	48 2f       	mov	r20, r24
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	28 2f       	mov	r18, r24
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 2e       	mov	r0, r18
     632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_WritePin+0x8e>
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	0a 94       	dec	r0
     63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_WritePin+0x8a>
     63c:	80 95       	com	r24
     63e:	84 23       	and	r24, r20
     640:	8c 93       	st	X, r24
     642:	b1 c0       	rjmp	.+354    	; 0x7a6 <DIO_WritePin+0x1fc>
			break;
			case PB:
			CLR_BIT(PORTB,pin_num);
     644:	a8 e3       	ldi	r26, 0x38	; 56
     646:	b0 e0       	ldi	r27, 0x00	; 0
     648:	e8 e3       	ldi	r30, 0x38	; 56
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	48 2f       	mov	r20, r24
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	28 2f       	mov	r18, r24
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	02 2e       	mov	r0, r18
     65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_WritePin+0xb8>
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	0a 94       	dec	r0
     664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_WritePin+0xb4>
     666:	80 95       	com	r24
     668:	84 23       	and	r24, r20
     66a:	8c 93       	st	X, r24
     66c:	9c c0       	rjmp	.+312    	; 0x7a6 <DIO_WritePin+0x1fc>
			break;
			case PC:
			CLR_BIT(PORTC,pin_num);
     66e:	a5 e3       	ldi	r26, 0x35	; 53
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	e5 e3       	ldi	r30, 0x35	; 53
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	48 2f       	mov	r20, r24
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	02 2e       	mov	r0, r18
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_WritePin+0xe2>
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_WritePin+0xde>
     690:	80 95       	com	r24
     692:	84 23       	and	r24, r20
     694:	8c 93       	st	X, r24
     696:	87 c0       	rjmp	.+270    	; 0x7a6 <DIO_WritePin+0x1fc>
			break;
			case PD:
			CLR_BIT(PORTD,pin_num);
     698:	a2 e3       	ldi	r26, 0x32	; 50
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	e2 e3       	ldi	r30, 0x32	; 50
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	48 2f       	mov	r20, r24
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	28 2f       	mov	r18, r24
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	02 2e       	mov	r0, r18
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_WritePin+0x10c>
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	0a 94       	dec	r0
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_WritePin+0x108>
     6ba:	80 95       	com	r24
     6bc:	84 23       	and	r24, r20
     6be:	8c 93       	st	X, r24
     6c0:	72 c0       	rjmp	.+228    	; 0x7a6 <DIO_WritePin+0x1fc>
			break;
		}
	}
	else if (volt == HIGH)
     6c2:	8c 81       	ldd	r24, Y+4	; 0x04
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	09 f0       	breq	.+2      	; 0x6ca <DIO_WritePin+0x120>
     6c8:	6e c0       	rjmp	.+220    	; 0x7a6 <DIO_WritePin+0x1fc>
	{
		switch(port)
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	3e 83       	std	Y+6, r19	; 0x06
     6d2:	2d 83       	std	Y+5, r18	; 0x05
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	9e 81       	ldd	r25, Y+6	; 0x06
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	91 05       	cpc	r25, r1
     6dc:	49 f1       	breq	.+82     	; 0x730 <DIO_WritePin+0x186>
     6de:	2d 81       	ldd	r18, Y+5	; 0x05
     6e0:	3e 81       	ldd	r19, Y+6	; 0x06
     6e2:	22 30       	cpi	r18, 0x02	; 2
     6e4:	31 05       	cpc	r19, r1
     6e6:	2c f4       	brge	.+10     	; 0x6f2 <DIO_WritePin+0x148>
     6e8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ea:	9e 81       	ldd	r25, Y+6	; 0x06
     6ec:	00 97       	sbiw	r24, 0x00	; 0
     6ee:	61 f0       	breq	.+24     	; 0x708 <DIO_WritePin+0x15e>
     6f0:	5a c0       	rjmp	.+180    	; 0x7a6 <DIO_WritePin+0x1fc>
     6f2:	2d 81       	ldd	r18, Y+5	; 0x05
     6f4:	3e 81       	ldd	r19, Y+6	; 0x06
     6f6:	22 30       	cpi	r18, 0x02	; 2
     6f8:	31 05       	cpc	r19, r1
     6fa:	71 f1       	breq	.+92     	; 0x758 <DIO_WritePin+0x1ae>
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	9e 81       	ldd	r25, Y+6	; 0x06
     700:	83 30       	cpi	r24, 0x03	; 3
     702:	91 05       	cpc	r25, r1
     704:	e9 f1       	breq	.+122    	; 0x780 <DIO_WritePin+0x1d6>
     706:	4f c0       	rjmp	.+158    	; 0x7a6 <DIO_WritePin+0x1fc>
		{
			case PA:
			SET_BIT(PORTA,pin_num);
     708:	ab e3       	ldi	r26, 0x3B	; 59
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	eb e3       	ldi	r30, 0x3B	; 59
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	80 81       	ld	r24, Z
     712:	48 2f       	mov	r20, r24
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	28 2f       	mov	r18, r24
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	02 2e       	mov	r0, r18
     720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_WritePin+0x17c>
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	0a 94       	dec	r0
     728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_WritePin+0x178>
     72a:	84 2b       	or	r24, r20
     72c:	8c 93       	st	X, r24
     72e:	3b c0       	rjmp	.+118    	; 0x7a6 <DIO_WritePin+0x1fc>
			break;
			case PB:
			SET_BIT(PORTB,pin_num);
     730:	a8 e3       	ldi	r26, 0x38	; 56
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	e8 e3       	ldi	r30, 0x38	; 56
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	48 2f       	mov	r20, r24
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	28 2f       	mov	r18, r24
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	02 2e       	mov	r0, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_WritePin+0x1a4>
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	0a 94       	dec	r0
     750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_WritePin+0x1a0>
     752:	84 2b       	or	r24, r20
     754:	8c 93       	st	X, r24
     756:	27 c0       	rjmp	.+78     	; 0x7a6 <DIO_WritePin+0x1fc>
			break;
			case PC:
			SET_BIT(PORTC,pin_num);
     758:	a5 e3       	ldi	r26, 0x35	; 53
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	e5 e3       	ldi	r30, 0x35	; 53
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	48 2f       	mov	r20, r24
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	28 2f       	mov	r18, r24
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	02 2e       	mov	r0, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_WritePin+0x1cc>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	0a 94       	dec	r0
     778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_WritePin+0x1c8>
     77a:	84 2b       	or	r24, r20
     77c:	8c 93       	st	X, r24
     77e:	13 c0       	rjmp	.+38     	; 0x7a6 <DIO_WritePin+0x1fc>
			break;
			case PD:
			SET_BIT(PORTD,pin_num);
     780:	a2 e3       	ldi	r26, 0x32	; 50
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	e2 e3       	ldi	r30, 0x32	; 50
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	48 2f       	mov	r20, r24
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	28 2f       	mov	r18, r24
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 2e       	mov	r0, r18
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_WritePin+0x1f4>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	0a 94       	dec	r0
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_WritePin+0x1f0>
     7a2:	84 2b       	or	r24, r20
     7a4:	8c 93       	st	X, r24
			break;
		}
	}
}
     7a6:	28 96       	adiw	r28, 0x08	; 8
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	cf 91       	pop	r28
     7b4:	df 91       	pop	r29
     7b6:	08 95       	ret

000007b8 <DIO_ReadPin>:

DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
     7b8:	df 93       	push	r29
     7ba:	cf 93       	push	r28
     7bc:	00 d0       	rcall	.+0      	; 0x7be <DIO_ReadPin+0x6>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <DIO_ReadPin+0x8>
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <DIO_ReadPin+0xa>
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	8c 83       	std	Y+4, r24	; 0x04
	DIO_PinVoltage_type volt = LOW;
     7c8:	1b 82       	std	Y+3, r1	; 0x03
	DIO_Port_type port = pin/8;
     7ca:	8c 81       	ldd	r24, Y+4	; 0x04
     7cc:	86 95       	lsr	r24
     7ce:	86 95       	lsr	r24
     7d0:	86 95       	lsr	r24
     7d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num  = pin % 8;
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	87 70       	andi	r24, 0x07	; 7
     7d8:	89 83       	std	Y+1, r24	; 0x01
	
	switch (port)
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	3e 83       	std	Y+6, r19	; 0x06
     7e2:	2d 83       	std	Y+5, r18	; 0x05
     7e4:	4d 81       	ldd	r20, Y+5	; 0x05
     7e6:	5e 81       	ldd	r21, Y+6	; 0x06
     7e8:	41 30       	cpi	r20, 0x01	; 1
     7ea:	51 05       	cpc	r21, r1
     7ec:	41 f1       	breq	.+80     	; 0x83e <DIO_ReadPin+0x86>
     7ee:	8d 81       	ldd	r24, Y+5	; 0x05
     7f0:	9e 81       	ldd	r25, Y+6	; 0x06
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	91 05       	cpc	r25, r1
     7f6:	34 f4       	brge	.+12     	; 0x804 <DIO_ReadPin+0x4c>
     7f8:	2d 81       	ldd	r18, Y+5	; 0x05
     7fa:	3e 81       	ldd	r19, Y+6	; 0x06
     7fc:	21 15       	cp	r18, r1
     7fe:	31 05       	cpc	r19, r1
     800:	61 f0       	breq	.+24     	; 0x81a <DIO_ReadPin+0x62>
     802:	52 c0       	rjmp	.+164    	; 0x8a8 <__stack+0x49>
     804:	4d 81       	ldd	r20, Y+5	; 0x05
     806:	5e 81       	ldd	r21, Y+6	; 0x06
     808:	42 30       	cpi	r20, 0x02	; 2
     80a:	51 05       	cpc	r21, r1
     80c:	51 f1       	breq	.+84     	; 0x862 <__stack+0x3>
     80e:	8d 81       	ldd	r24, Y+5	; 0x05
     810:	9e 81       	ldd	r25, Y+6	; 0x06
     812:	83 30       	cpi	r24, 0x03	; 3
     814:	91 05       	cpc	r25, r1
     816:	b9 f1       	breq	.+110    	; 0x886 <__stack+0x27>
     818:	47 c0       	rjmp	.+142    	; 0x8a8 <__stack+0x49>
	{
		case PA:
		volt = READ_BIT(PINA,pin_num);
     81a:	e9 e3       	ldi	r30, 0x39	; 57
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	28 2f       	mov	r18, r24
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a9 01       	movw	r20, r18
     82c:	02 c0       	rjmp	.+4      	; 0x832 <DIO_ReadPin+0x7a>
     82e:	55 95       	asr	r21
     830:	47 95       	ror	r20
     832:	8a 95       	dec	r24
     834:	e2 f7       	brpl	.-8      	; 0x82e <DIO_ReadPin+0x76>
     836:	ca 01       	movw	r24, r20
     838:	81 70       	andi	r24, 0x01	; 1
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	35 c0       	rjmp	.+106    	; 0x8a8 <__stack+0x49>
		break;
		case PB:
		volt = READ_BIT(PINB,pin_num);
     83e:	e6 e3       	ldi	r30, 0x36	; 54
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	28 2f       	mov	r18, r24
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	88 2f       	mov	r24, r24
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a9 01       	movw	r20, r18
     850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_ReadPin+0x9e>
     852:	55 95       	asr	r21
     854:	47 95       	ror	r20
     856:	8a 95       	dec	r24
     858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_ReadPin+0x9a>
     85a:	ca 01       	movw	r24, r20
     85c:	81 70       	andi	r24, 0x01	; 1
     85e:	8b 83       	std	Y+3, r24	; 0x03
     860:	23 c0       	rjmp	.+70     	; 0x8a8 <__stack+0x49>
		break;
		case PC:
		volt = READ_BIT(PINC,pin_num);
     862:	e3 e3       	ldi	r30, 0x33	; 51
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	28 2f       	mov	r18, r24
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	88 2f       	mov	r24, r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a9 01       	movw	r20, r18
     874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
     876:	55 95       	asr	r21
     878:	47 95       	ror	r20
     87a:	8a 95       	dec	r24
     87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
     87e:	ca 01       	movw	r24, r20
     880:	81 70       	andi	r24, 0x01	; 1
     882:	8b 83       	std	Y+3, r24	; 0x03
     884:	11 c0       	rjmp	.+34     	; 0x8a8 <__stack+0x49>
		break;
		case PD:
		volt = READ_BIT(PIND,pin_num);
     886:	e0 e3       	ldi	r30, 0x30	; 48
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	28 2f       	mov	r18, r24
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	a9 01       	movw	r20, r18
     898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
     89a:	55 95       	asr	r21
     89c:	47 95       	ror	r20
     89e:	8a 95       	dec	r24
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
     8a2:	ca 01       	movw	r24, r20
     8a4:	81 70       	andi	r24, 0x01	; 1
     8a6:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}
	return volt;
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     8aa:	26 96       	adiw	r28, 0x06	; 6
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	08 95       	ret

000008bc <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
     8bc:	df 93       	push	r29
     8be:	cf 93       	push	r28
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <DIO_TogglePin+0x6>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <DIO_TogglePin+0x8>
     8c4:	0f 92       	push	r0
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port = pin/8;
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	86 95       	lsr	r24
     8d0:	86 95       	lsr	r24
     8d2:	86 95       	lsr	r24
     8d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num  = pin % 8;
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	87 70       	andi	r24, 0x07	; 7
     8da:	89 83       	std	Y+1, r24	; 0x01
	switch (port)
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	28 2f       	mov	r18, r24
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	3d 83       	std	Y+5, r19	; 0x05
     8e4:	2c 83       	std	Y+4, r18	; 0x04
     8e6:	8c 81       	ldd	r24, Y+4	; 0x04
     8e8:	9d 81       	ldd	r25, Y+5	; 0x05
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	91 05       	cpc	r25, r1
     8ee:	49 f1       	breq	.+82     	; 0x942 <DIO_TogglePin+0x86>
     8f0:	2c 81       	ldd	r18, Y+4	; 0x04
     8f2:	3d 81       	ldd	r19, Y+5	; 0x05
     8f4:	22 30       	cpi	r18, 0x02	; 2
     8f6:	31 05       	cpc	r19, r1
     8f8:	2c f4       	brge	.+10     	; 0x904 <DIO_TogglePin+0x48>
     8fa:	8c 81       	ldd	r24, Y+4	; 0x04
     8fc:	9d 81       	ldd	r25, Y+5	; 0x05
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	61 f0       	breq	.+24     	; 0x91a <DIO_TogglePin+0x5e>
     902:	5a c0       	rjmp	.+180    	; 0x9b8 <DIO_TogglePin+0xfc>
     904:	2c 81       	ldd	r18, Y+4	; 0x04
     906:	3d 81       	ldd	r19, Y+5	; 0x05
     908:	22 30       	cpi	r18, 0x02	; 2
     90a:	31 05       	cpc	r19, r1
     90c:	71 f1       	breq	.+92     	; 0x96a <DIO_TogglePin+0xae>
     90e:	8c 81       	ldd	r24, Y+4	; 0x04
     910:	9d 81       	ldd	r25, Y+5	; 0x05
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	91 05       	cpc	r25, r1
     916:	e9 f1       	breq	.+122    	; 0x992 <DIO_TogglePin+0xd6>
     918:	4f c0       	rjmp	.+158    	; 0x9b8 <DIO_TogglePin+0xfc>
	{
		case PA:
		TOG_BIT(PORTA,pin_num);
     91a:	ab e3       	ldi	r26, 0x3B	; 59
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	eb e3       	ldi	r30, 0x3B	; 59
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	48 2f       	mov	r20, r24
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	28 2f       	mov	r18, r24
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 2e       	mov	r0, r18
     932:	02 c0       	rjmp	.+4      	; 0x938 <DIO_TogglePin+0x7c>
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	0a 94       	dec	r0
     93a:	e2 f7       	brpl	.-8      	; 0x934 <DIO_TogglePin+0x78>
     93c:	84 27       	eor	r24, r20
     93e:	8c 93       	st	X, r24
     940:	3b c0       	rjmp	.+118    	; 0x9b8 <DIO_TogglePin+0xfc>
		break;
		case PB:
		TOG_BIT(PORTB,pin_num);
     942:	a8 e3       	ldi	r26, 0x38	; 56
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 e3       	ldi	r30, 0x38	; 56
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	48 2f       	mov	r20, r24
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	28 2f       	mov	r18, r24
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	02 2e       	mov	r0, r18
     95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_TogglePin+0xa4>
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	0a 94       	dec	r0
     962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_TogglePin+0xa0>
     964:	84 27       	eor	r24, r20
     966:	8c 93       	st	X, r24
     968:	27 c0       	rjmp	.+78     	; 0x9b8 <DIO_TogglePin+0xfc>
		break;
		case PC:
		TOG_BIT(PORTC,pin_num);
     96a:	a5 e3       	ldi	r26, 0x35	; 53
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	e5 e3       	ldi	r30, 0x35	; 53
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	48 2f       	mov	r20, r24
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	28 2f       	mov	r18, r24
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	02 2e       	mov	r0, r18
     982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_TogglePin+0xcc>
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	0a 94       	dec	r0
     98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_TogglePin+0xc8>
     98c:	84 27       	eor	r24, r20
     98e:	8c 93       	st	X, r24
     990:	13 c0       	rjmp	.+38     	; 0x9b8 <DIO_TogglePin+0xfc>
		break;
		case PD:
		TOG_BIT(PORTD,pin_num);
     992:	a2 e3       	ldi	r26, 0x32	; 50
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e2 e3       	ldi	r30, 0x32	; 50
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	48 2f       	mov	r20, r24
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	28 2f       	mov	r18, r24
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 2e       	mov	r0, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_TogglePin+0xf4>
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	0a 94       	dec	r0
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_TogglePin+0xf0>
     9b4:	84 27       	eor	r24, r20
     9b6:	8c 93       	st	X, r24
		break;
	}
}
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	cf 91       	pop	r28
     9c4:	df 91       	pop	r29
     9c6:	08 95       	ret

000009c8 <DIO_WritePort>:

void DIO_WritePort(DIO_Port_type port , u8 Value)
{
     9c8:	df 93       	push	r29
     9ca:	cf 93       	push	r28
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <DIO_WritePort+0x6>
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <DIO_WritePort+0x8>
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	28 2f       	mov	r18, r24
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	3c 83       	std	Y+4, r19	; 0x04
     9e0:	2b 83       	std	Y+3, r18	; 0x03
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	9c 81       	ldd	r25, Y+4	; 0x04
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	91 05       	cpc	r25, r1
     9ea:	d1 f0       	breq	.+52     	; 0xa20 <DIO_WritePort+0x58>
     9ec:	2b 81       	ldd	r18, Y+3	; 0x03
     9ee:	3c 81       	ldd	r19, Y+4	; 0x04
     9f0:	22 30       	cpi	r18, 0x02	; 2
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f4       	brge	.+10     	; 0xa00 <DIO_WritePort+0x38>
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	9c 81       	ldd	r25, Y+4	; 0x04
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	61 f0       	breq	.+24     	; 0xa16 <DIO_WritePort+0x4e>
     9fe:	1e c0       	rjmp	.+60     	; 0xa3c <DIO_WritePort+0x74>
     a00:	2b 81       	ldd	r18, Y+3	; 0x03
     a02:	3c 81       	ldd	r19, Y+4	; 0x04
     a04:	22 30       	cpi	r18, 0x02	; 2
     a06:	31 05       	cpc	r19, r1
     a08:	81 f0       	breq	.+32     	; 0xa2a <DIO_WritePort+0x62>
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	9c 81       	ldd	r25, Y+4	; 0x04
     a0e:	83 30       	cpi	r24, 0x03	; 3
     a10:	91 05       	cpc	r25, r1
     a12:	81 f0       	breq	.+32     	; 0xa34 <DIO_WritePort+0x6c>
     a14:	13 c0       	rjmp	.+38     	; 0xa3c <DIO_WritePort+0x74>
	{
		case PA:
		PORTA = Value;
     a16:	eb e3       	ldi	r30, 0x3B	; 59
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	80 83       	st	Z, r24
     a1e:	0e c0       	rjmp	.+28     	; 0xa3c <DIO_WritePort+0x74>
		break;
		case PB:
		PORTB = Value;
     a20:	e8 e3       	ldi	r30, 0x38	; 56
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	8a 81       	ldd	r24, Y+2	; 0x02
     a26:	80 83       	st	Z, r24
     a28:	09 c0       	rjmp	.+18     	; 0xa3c <DIO_WritePort+0x74>
		break;
		case PC:
		PORTC = Value;
     a2a:	e5 e3       	ldi	r30, 0x35	; 53
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	80 83       	st	Z, r24
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <DIO_WritePort+0x74>
		break;
		case PD:
		PORTD = Value;
     a34:	e2 e3       	ldi	r30, 0x32	; 50
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	80 83       	st	Z, r24
		break;
	}
}
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <DIO_WriteBitsInPort>:
void DIO_WriteBitsInPort(DIO_Port_type Port,u8 Value,u8 Mask)
{
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <DIO_WriteBitsInPort+0x6>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <DIO_WriteBitsInPort+0x8>
     a52:	0f 92       	push	r0
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	89 83       	std	Y+1, r24	; 0x01
     a5a:	6a 83       	std	Y+2, r22	; 0x02
     a5c:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	28 2f       	mov	r18, r24
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	3d 83       	std	Y+5, r19	; 0x05
     a66:	2c 83       	std	Y+4, r18	; 0x04
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	9d 81       	ldd	r25, Y+5	; 0x05
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	91 05       	cpc	r25, r1
     a70:	59 f1       	breq	.+86     	; 0xac8 <DIO_WriteBitsInPort+0x7e>
     a72:	2c 81       	ldd	r18, Y+4	; 0x04
     a74:	3d 81       	ldd	r19, Y+5	; 0x05
     a76:	22 30       	cpi	r18, 0x02	; 2
     a78:	31 05       	cpc	r19, r1
     a7a:	2c f4       	brge	.+10     	; 0xa86 <DIO_WriteBitsInPort+0x3c>
     a7c:	8c 81       	ldd	r24, Y+4	; 0x04
     a7e:	9d 81       	ldd	r25, Y+5	; 0x05
     a80:	00 97       	sbiw	r24, 0x00	; 0
     a82:	69 f0       	breq	.+26     	; 0xa9e <DIO_WriteBitsInPort+0x54>
     a84:	5f c0       	rjmp	.+190    	; 0xb44 <DIO_WriteBitsInPort+0xfa>
     a86:	2c 81       	ldd	r18, Y+4	; 0x04
     a88:	3d 81       	ldd	r19, Y+5	; 0x05
     a8a:	22 30       	cpi	r18, 0x02	; 2
     a8c:	31 05       	cpc	r19, r1
     a8e:	89 f1       	breq	.+98     	; 0xaf2 <DIO_WriteBitsInPort+0xa8>
     a90:	8c 81       	ldd	r24, Y+4	; 0x04
     a92:	9d 81       	ldd	r25, Y+5	; 0x05
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	91 05       	cpc	r25, r1
     a98:	09 f4       	brne	.+2      	; 0xa9c <DIO_WriteBitsInPort+0x52>
     a9a:	40 c0       	rjmp	.+128    	; 0xb1c <DIO_WriteBitsInPort+0xd2>
     a9c:	53 c0       	rjmp	.+166    	; 0xb44 <DIO_WriteBitsInPort+0xfa>
	{
		case PA:
		CLR_BITS_REG(PORTA,Mask);
     a9e:	ab e3       	ldi	r26, 0x3B	; 59
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	eb e3       	ldi	r30, 0x3B	; 59
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	98 2f       	mov	r25, r24
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	80 95       	com	r24
     aae:	89 23       	and	r24, r25
     ab0:	8c 93       	st	X, r24
		SET_BITS_REG(PORTA,Value&Mask);
     ab2:	ab e3       	ldi	r26, 0x3B	; 59
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	eb e3       	ldi	r30, 0x3B	; 59
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	20 81       	ld	r18, Z
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	89 23       	and	r24, r25
     ac2:	82 2b       	or	r24, r18
     ac4:	8c 93       	st	X, r24
     ac6:	3e c0       	rjmp	.+124    	; 0xb44 <DIO_WriteBitsInPort+0xfa>
		break;
		case PB:
		CLR_BITS_REG(PORTB,Mask);
     ac8:	a8 e3       	ldi	r26, 0x38	; 56
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	e8 e3       	ldi	r30, 0x38	; 56
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	98 2f       	mov	r25, r24
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	80 95       	com	r24
     ad8:	89 23       	and	r24, r25
     ada:	8c 93       	st	X, r24
		SET_BITS_REG(PORTB,Value&Mask);
     adc:	a8 e3       	ldi	r26, 0x38	; 56
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	e8 e3       	ldi	r30, 0x38	; 56
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 81       	ld	r18, Z
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	89 23       	and	r24, r25
     aec:	82 2b       	or	r24, r18
     aee:	8c 93       	st	X, r24
     af0:	29 c0       	rjmp	.+82     	; 0xb44 <DIO_WriteBitsInPort+0xfa>
		break;
		case PC:
		CLR_BITS_REG(PORTC,Mask);
     af2:	a5 e3       	ldi	r26, 0x35	; 53
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e5 e3       	ldi	r30, 0x35	; 53
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	98 2f       	mov	r25, r24
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	80 95       	com	r24
     b02:	89 23       	and	r24, r25
     b04:	8c 93       	st	X, r24
		SET_BITS_REG(PORTC,Value&Mask);
     b06:	a5 e3       	ldi	r26, 0x35	; 53
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	e5 e3       	ldi	r30, 0x35	; 53
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	20 81       	ld	r18, Z
     b10:	9a 81       	ldd	r25, Y+2	; 0x02
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	89 23       	and	r24, r25
     b16:	82 2b       	or	r24, r18
     b18:	8c 93       	st	X, r24
     b1a:	14 c0       	rjmp	.+40     	; 0xb44 <DIO_WriteBitsInPort+0xfa>
		break;
		case PD:
		CLR_BITS_REG(PORTD,Mask);
     b1c:	a2 e3       	ldi	r26, 0x32	; 50
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e2 e3       	ldi	r30, 0x32	; 50
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	98 2f       	mov	r25, r24
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	80 95       	com	r24
     b2c:	89 23       	and	r24, r25
     b2e:	8c 93       	st	X, r24
		SET_BITS_REG(PORTD,Value&Mask);
     b30:	a2 e3       	ldi	r26, 0x32	; 50
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	e2 e3       	ldi	r30, 0x32	; 50
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	20 81       	ld	r18, Z
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	89 23       	and	r24, r25
     b40:	82 2b       	or	r24, r18
     b42:	8c 93       	st	X, r24
		break;
	}
}
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <DIO_higher_nibble_Value>:
void DIO_higher_nibble_Value(DIO_Port_type portNumber,u8 value)
{
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	00 d0       	rcall	.+0      	; 0xb5a <DIO_higher_nibble_Value+0x6>
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <DIO_higher_nibble_Value+0x8>
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	82 95       	swap	r24
     b68:	80 7f       	andi	r24, 0xF0	; 240
     b6a:	8a 83       	std	Y+2, r24	; 0x02
	switch(portNumber)
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	3c 83       	std	Y+4, r19	; 0x04
     b74:	2b 83       	std	Y+3, r18	; 0x03
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	29 f1       	breq	.+74     	; 0xbca <DIO_higher_nibble_Value+0x76>
     b80:	2b 81       	ldd	r18, Y+3	; 0x03
     b82:	3c 81       	ldd	r19, Y+4	; 0x04
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <DIO_higher_nibble_Value+0x40>
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	61 f0       	breq	.+24     	; 0xbaa <DIO_higher_nibble_Value+0x56>
     b92:	4a c0       	rjmp	.+148    	; 0xc28 <DIO_higher_nibble_Value+0xd4>
     b94:	2b 81       	ldd	r18, Y+3	; 0x03
     b96:	3c 81       	ldd	r19, Y+4	; 0x04
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	31 f1       	breq	.+76     	; 0xbea <DIO_higher_nibble_Value+0x96>
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	89 f1       	breq	.+98     	; 0xc0a <DIO_higher_nibble_Value+0xb6>
     ba8:	3f c0       	rjmp	.+126    	; 0xc28 <DIO_higher_nibble_Value+0xd4>
	{
		case PA:
		PORTA&=0x0f;
     baa:	ab e3       	ldi	r26, 0x3B	; 59
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	eb e3       	ldi	r30, 0x3B	; 59
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8f 70       	andi	r24, 0x0F	; 15
     bb6:	8c 93       	st	X, r24
		PORTA|=value;
     bb8:	ab e3       	ldi	r26, 0x3B	; 59
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	eb e3       	ldi	r30, 0x3B	; 59
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	90 81       	ld	r25, Z
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	89 2b       	or	r24, r25
     bc6:	8c 93       	st	X, r24
     bc8:	2f c0       	rjmp	.+94     	; 0xc28 <DIO_higher_nibble_Value+0xd4>
		//higher_nibble_value(PORTA,value);
		break;
		case PB:
		PORTB&=0x0f;
     bca:	a8 e3       	ldi	r26, 0x38	; 56
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 e3       	ldi	r30, 0x38	; 56
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 70       	andi	r24, 0x0F	; 15
     bd6:	8c 93       	st	X, r24
		PORTB|=value;
     bd8:	a8 e3       	ldi	r26, 0x38	; 56
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e8 e3       	ldi	r30, 0x38	; 56
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	90 81       	ld	r25, Z
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	89 2b       	or	r24, r25
     be6:	8c 93       	st	X, r24
     be8:	1f c0       	rjmp	.+62     	; 0xc28 <DIO_higher_nibble_Value+0xd4>
		//higher_nibble_value(PORTB,value);
		break;
		case PC:
		PORTC&=0x0f;
     bea:	a5 e3       	ldi	r26, 0x35	; 53
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e5 e3       	ldi	r30, 0x35	; 53
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 70       	andi	r24, 0x0F	; 15
     bf6:	8c 93       	st	X, r24
		PORTC|=value;
     bf8:	a5 e3       	ldi	r26, 0x35	; 53
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e5 e3       	ldi	r30, 0x35	; 53
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	90 81       	ld	r25, Z
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	89 2b       	or	r24, r25
     c06:	8c 93       	st	X, r24
     c08:	0f c0       	rjmp	.+30     	; 0xc28 <DIO_higher_nibble_Value+0xd4>
		//higher_nibble_value(PORTC,value);
		break;
		case PD:
		PORTD&=0x0f;
     c0a:	a2 e3       	ldi	r26, 0x32	; 50
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e2 e3       	ldi	r30, 0x32	; 50
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8f 70       	andi	r24, 0x0F	; 15
     c16:	8c 93       	st	X, r24
		PORTD|=value;
     c18:	a2 e3       	ldi	r26, 0x32	; 50
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e2 e3       	ldi	r30, 0x32	; 50
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	90 81       	ld	r25, Z
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	89 2b       	or	r24, r25
     c26:	8c 93       	st	X, r24
		//higher_nibble_value(PORTD,value);
		break;
	}
	
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <DIO_lower_nibble_value>:

void DIO_lower_nibble_value(DIO_Port_type portNumber,u8 value)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <DIO_lower_nibble_value+0x6>
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <DIO_lower_nibble_value+0x8>
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	89 83       	std	Y+1, r24	; 0x01
     c44:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	8f 70       	andi	r24, 0x0F	; 15
     c4a:	8a 83       	std	Y+2, r24	; 0x02
	switch(portNumber)
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	3c 83       	std	Y+4, r19	; 0x04
     c54:	2b 83       	std	Y+3, r18	; 0x03
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	91 05       	cpc	r25, r1
     c5e:	29 f1       	breq	.+74     	; 0xcaa <DIO_lower_nibble_value+0x74>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	22 30       	cpi	r18, 0x02	; 2
     c66:	31 05       	cpc	r19, r1
     c68:	2c f4       	brge	.+10     	; 0xc74 <DIO_lower_nibble_value+0x3e>
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	61 f0       	breq	.+24     	; 0xc8a <DIO_lower_nibble_value+0x54>
     c72:	4a c0       	rjmp	.+148    	; 0xd08 <DIO_lower_nibble_value+0xd2>
     c74:	2b 81       	ldd	r18, Y+3	; 0x03
     c76:	3c 81       	ldd	r19, Y+4	; 0x04
     c78:	22 30       	cpi	r18, 0x02	; 2
     c7a:	31 05       	cpc	r19, r1
     c7c:	31 f1       	breq	.+76     	; 0xcca <DIO_lower_nibble_value+0x94>
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	9c 81       	ldd	r25, Y+4	; 0x04
     c82:	83 30       	cpi	r24, 0x03	; 3
     c84:	91 05       	cpc	r25, r1
     c86:	89 f1       	breq	.+98     	; 0xcea <DIO_lower_nibble_value+0xb4>
     c88:	3f c0       	rjmp	.+126    	; 0xd08 <DIO_lower_nibble_value+0xd2>
	{
		case PA:
		PORTA&=0xf0;
     c8a:	ab e3       	ldi	r26, 0x3B	; 59
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	eb e3       	ldi	r30, 0x3B	; 59
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	80 7f       	andi	r24, 0xF0	; 240
     c96:	8c 93       	st	X, r24
		PORTA|=value;
     c98:	ab e3       	ldi	r26, 0x3B	; 59
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	eb e3       	ldi	r30, 0x3B	; 59
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	90 81       	ld	r25, Z
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	89 2b       	or	r24, r25
     ca6:	8c 93       	st	X, r24
     ca8:	2f c0       	rjmp	.+94     	; 0xd08 <DIO_lower_nibble_value+0xd2>
		//lower_nibble_value(PORTA,value);
		break;
		case PB:
		PORTB&=0xf0;
     caa:	a8 e3       	ldi	r26, 0x38	; 56
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e3       	ldi	r30, 0x38	; 56
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 7f       	andi	r24, 0xF0	; 240
     cb6:	8c 93       	st	X, r24
		PORTB|=value;
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	90 81       	ld	r25, Z
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	89 2b       	or	r24, r25
     cc6:	8c 93       	st	X, r24
     cc8:	1f c0       	rjmp	.+62     	; 0xd08 <DIO_lower_nibble_value+0xd2>
		//lower_nibble_value(PORTB,value);
		break;
		case PC:
		PORTC&=0xf0;
     cca:	a5 e3       	ldi	r26, 0x35	; 53
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	80 7f       	andi	r24, 0xF0	; 240
     cd6:	8c 93       	st	X, r24
		PORTC|=value;
     cd8:	a5 e3       	ldi	r26, 0x35	; 53
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e5 e3       	ldi	r30, 0x35	; 53
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	90 81       	ld	r25, Z
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	89 2b       	or	r24, r25
     ce6:	8c 93       	st	X, r24
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <DIO_lower_nibble_value+0xd2>
		//lower_nibble_value(PORTC,value);
		break;
		case PD:
		PORTD&=0xf0;
     cea:	a2 e3       	ldi	r26, 0x32	; 50
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e2 e3       	ldi	r30, 0x32	; 50
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 7f       	andi	r24, 0xF0	; 240
     cf6:	8c 93       	st	X, r24
		PORTD|=value;
     cf8:	a2 e3       	ldi	r26, 0x32	; 50
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e2 e3       	ldi	r30, 0x32	; 50
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	90 81       	ld	r25, Z
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	89 2b       	or	r24, r25
     d06:	8c 93       	st	X, r24
		//lower_nibble_value(PORTD,value);
		break;
		
	}
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <SSD_Update>:

extern u8 Hours;
extern u8 Minutes;
extern u8 Seconds;

void SSD_Update(void){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	Update_Mode();
     d1e:	0e 94 0c 08 	call	0x1018	; 0x1018 <Update_Mode>
	Refesh();
     d22:	0e 94 68 07 	call	0xed0	; 0xed0 <Refesh>
}
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <On>:

static void On(const SSD_t SSD_ID){
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	00 d0       	rcall	.+0      	; 0xd32 <On+0x6>
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD_ID){
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	3b 83       	std	Y+3, r19	; 0x03
     d42:	2a 83       	std	Y+2, r18	; 0x02
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	91 05       	cpc	r25, r1
     d4c:	49 f1       	breq	.+82     	; 0xda0 <On+0x74>
     d4e:	2a 81       	ldd	r18, Y+2	; 0x02
     d50:	3b 81       	ldd	r19, Y+3	; 0x03
     d52:	23 30       	cpi	r18, 0x03	; 3
     d54:	31 05       	cpc	r19, r1
     d56:	54 f4       	brge	.+20     	; 0xd6c <On+0x40>
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	9b 81       	ldd	r25, Y+3	; 0x03
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	b1 f0       	breq	.+44     	; 0xd8c <On+0x60>
     d60:	2a 81       	ldd	r18, Y+2	; 0x02
     d62:	3b 81       	ldd	r19, Y+3	; 0x03
     d64:	21 30       	cpi	r18, 0x01	; 1
     d66:	31 05       	cpc	r19, r1
     d68:	b1 f0       	breq	.+44     	; 0xd96 <On+0x6a>
     d6a:	2d c0       	rjmp	.+90     	; 0xdc6 <On+0x9a>
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	9b 81       	ldd	r25, Y+3	; 0x03
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	91 05       	cpc	r25, r1
     d74:	f9 f0       	breq	.+62     	; 0xdb4 <On+0x88>
     d76:	2a 81       	ldd	r18, Y+2	; 0x02
     d78:	3b 81       	ldd	r19, Y+3	; 0x03
     d7a:	24 30       	cpi	r18, 0x04	; 4
     d7c:	31 05       	cpc	r19, r1
     d7e:	ac f0       	brlt	.+42     	; 0xdaa <On+0x7e>
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	9b 81       	ldd	r25, Y+3	; 0x03
     d84:	85 30       	cpi	r24, 0x05	; 5
     d86:	91 05       	cpc	r25, r1
     d88:	d1 f0       	breq	.+52     	; 0xdbe <On+0x92>
     d8a:	1d c0       	rjmp	.+58     	; 0xdc6 <On+0x9a>
	case SSD_HOURS_TENS:
		DIO_WritePin(SSD_HOURS_TENS_PIN_ID, SSD_STATE_ON);
     d8c:	88 e1       	ldi	r24, 0x18	; 24
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     d94:	18 c0       	rjmp	.+48     	; 0xdc6 <On+0x9a>
		break;
	case SSD_HOURS_UNITS:
		DIO_WritePin(SSD_HOURS_UNITS_PIN_ID, SSD_STATE_ON);
     d96:	89 e1       	ldi	r24, 0x19	; 25
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     d9e:	13 c0       	rjmp	.+38     	; 0xdc6 <On+0x9a>
		break;
	case SSD_MIN_TENS:
		DIO_WritePin(SSD_MIN_TENS_PIN_ID, SSD_STATE_ON);
     da0:	8a e1       	ldi	r24, 0x1A	; 26
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     da8:	0e c0       	rjmp	.+28     	; 0xdc6 <On+0x9a>
		break;
	case SSD_MIN_UNITS:
		DIO_WritePin(SSD_MIN_UNITS_PIN_ID, SSD_STATE_ON);
     daa:	8b e1       	ldi	r24, 0x1B	; 27
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <On+0x9a>
		break;
	case SSD_SEC_TENS:
		DIO_WritePin(SSD_SEC_TENS_PIN_ID, SSD_STATE_ON);
     db4:	8c e1       	ldi	r24, 0x1C	; 28
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <On+0x9a>
		break;
	case SSD_SEC_UNITS:
		DIO_WritePin(SSD_SEC_UNITS_PIN_ID, SSD_STATE_ON);
     dbe:	8e e1       	ldi	r24, 0x1E	; 30
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
		break;
	default:
		/* Error: Undefined SSD */
		break;
	}
}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <Off>:

static void Off(const SSD_t SSD_ID){
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <Off+0x6>
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD_ID){
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	3b 83       	std	Y+3, r19	; 0x03
     de8:	2a 83       	std	Y+2, r18	; 0x02
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	9b 81       	ldd	r25, Y+3	; 0x03
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	91 05       	cpc	r25, r1
     df2:	49 f1       	breq	.+82     	; 0xe46 <Off+0x74>
     df4:	2a 81       	ldd	r18, Y+2	; 0x02
     df6:	3b 81       	ldd	r19, Y+3	; 0x03
     df8:	23 30       	cpi	r18, 0x03	; 3
     dfa:	31 05       	cpc	r19, r1
     dfc:	54 f4       	brge	.+20     	; 0xe12 <Off+0x40>
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	b1 f0       	breq	.+44     	; 0xe32 <Off+0x60>
     e06:	2a 81       	ldd	r18, Y+2	; 0x02
     e08:	3b 81       	ldd	r19, Y+3	; 0x03
     e0a:	21 30       	cpi	r18, 0x01	; 1
     e0c:	31 05       	cpc	r19, r1
     e0e:	b1 f0       	breq	.+44     	; 0xe3c <Off+0x6a>
     e10:	2d c0       	rjmp	.+90     	; 0xe6c <Off+0x9a>
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	9b 81       	ldd	r25, Y+3	; 0x03
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	91 05       	cpc	r25, r1
     e1a:	f9 f0       	breq	.+62     	; 0xe5a <Off+0x88>
     e1c:	2a 81       	ldd	r18, Y+2	; 0x02
     e1e:	3b 81       	ldd	r19, Y+3	; 0x03
     e20:	24 30       	cpi	r18, 0x04	; 4
     e22:	31 05       	cpc	r19, r1
     e24:	ac f0       	brlt	.+42     	; 0xe50 <Off+0x7e>
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	85 30       	cpi	r24, 0x05	; 5
     e2c:	91 05       	cpc	r25, r1
     e2e:	d1 f0       	breq	.+52     	; 0xe64 <Off+0x92>
     e30:	1d c0       	rjmp	.+58     	; 0xe6c <Off+0x9a>
	case SSD_HOURS_TENS:
		DIO_WritePin(SSD_HOURS_TENS_PIN_ID, SSD_STATE_OFF);
     e32:	88 e1       	ldi	r24, 0x18	; 24
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     e3a:	18 c0       	rjmp	.+48     	; 0xe6c <Off+0x9a>
		break;
	case SSD_HOURS_UNITS:
		DIO_WritePin(SSD_HOURS_UNITS_PIN_ID, SSD_STATE_OFF);
     e3c:	89 e1       	ldi	r24, 0x19	; 25
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     e44:	13 c0       	rjmp	.+38     	; 0xe6c <Off+0x9a>
		break;
	case SSD_MIN_TENS:
		DIO_WritePin(SSD_MIN_TENS_PIN_ID, SSD_STATE_OFF);
     e46:	8a e1       	ldi	r24, 0x1A	; 26
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     e4e:	0e c0       	rjmp	.+28     	; 0xe6c <Off+0x9a>
		break;
	case SSD_MIN_UNITS:
		DIO_WritePin(SSD_MIN_UNITS_PIN_ID, SSD_STATE_OFF);
     e50:	8b e1       	ldi	r24, 0x1B	; 27
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <Off+0x9a>
		break;
	case SSD_SEC_TENS:
		DIO_WritePin(SSD_SEC_TENS_PIN_ID, SSD_STATE_OFF);
     e5a:	8c e1       	ldi	r24, 0x1C	; 28
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <Off+0x9a>
		break;
	case SSD_SEC_UNITS:
		DIO_WritePin(SSD_SEC_UNITS_PIN_ID, SSD_STATE_OFF);
     e64:	8e e1       	ldi	r24, 0x1E	; 30
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
		break;
	default:
		/* Error: Undefined SSD */
		break;
	}
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <Update_Symbol>:

static void Update_Symbol(const u8 SYMBOL){
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(SSD_A_PIN_ID, READ_BIT(SYMBOL, 0));
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	98 2f       	mov	r25, r24
     e88:	91 70       	andi	r25, 0x01	; 1
     e8a:	80 e1       	ldi	r24, 0x10	; 16
     e8c:	69 2f       	mov	r22, r25
     e8e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
	DIO_WritePin(SSD_B_PIN_ID, READ_BIT(SYMBOL, 1));
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	86 95       	lsr	r24
     e96:	98 2f       	mov	r25, r24
     e98:	91 70       	andi	r25, 0x01	; 1
     e9a:	81 e1       	ldi	r24, 0x11	; 17
     e9c:	69 2f       	mov	r22, r25
     e9e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
	DIO_WritePin(SSD_C_PIN_ID, READ_BIT(SYMBOL, 2));
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	86 95       	lsr	r24
     ea6:	86 95       	lsr	r24
     ea8:	98 2f       	mov	r25, r24
     eaa:	91 70       	andi	r25, 0x01	; 1
     eac:	82 e1       	ldi	r24, 0x12	; 18
     eae:	69 2f       	mov	r22, r25
     eb0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
	DIO_WritePin(SSD_D_PIN_ID, READ_BIT(SYMBOL, 3));
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	86 95       	lsr	r24
     eb8:	86 95       	lsr	r24
     eba:	86 95       	lsr	r24
     ebc:	98 2f       	mov	r25, r24
     ebe:	91 70       	andi	r25, 0x01	; 1
     ec0:	83 e1       	ldi	r24, 0x13	; 19
     ec2:	69 2f       	mov	r22, r25
     ec4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_WritePin>
}
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <Refesh>:

static void Refesh(void){
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <Refesh+0x6>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62

	Off(SSD_HOURS_TENS);
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Off>
	Off(SSD_HOURS_UNITS);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Off>
	Off(SSD_MIN_TENS);
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Off>
	Off(SSD_MIN_UNITS);
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Off>
	Off(SSD_SEC_TENS);
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Off>
	Off(SSD_SEC_UNITS);
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Off>

	switch(SSD_Id){
     efe:	80 91 89 00 	lds	r24, 0x0089
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3a 83       	std	Y+2, r19	; 0x02
     f08:	29 83       	std	Y+1, r18	; 0x01
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <Refesh+0x46>
     f14:	40 c0       	rjmp	.+128    	; 0xf96 <Refesh+0xc6>
     f16:	29 81       	ldd	r18, Y+1	; 0x01
     f18:	3a 81       	ldd	r19, Y+2	; 0x02
     f1a:	23 30       	cpi	r18, 0x03	; 3
     f1c:	31 05       	cpc	r19, r1
     f1e:	54 f4       	brge	.+20     	; 0xf34 <Refesh+0x64>
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	c1 f0       	breq	.+48     	; 0xf58 <Refesh+0x88>
     f28:	29 81       	ldd	r18, Y+1	; 0x01
     f2a:	3a 81       	ldd	r19, Y+2	; 0x02
     f2c:	21 30       	cpi	r18, 0x01	; 1
     f2e:	31 05       	cpc	r19, r1
     f30:	11 f1       	breq	.+68     	; 0xf76 <Refesh+0xa6>
     f32:	6d c0       	rjmp	.+218    	; 0x100e <Refesh+0x13e>
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <Refesh+0x70>
     f3e:	4a c0       	rjmp	.+148    	; 0xfd4 <Refesh+0x104>
     f40:	29 81       	ldd	r18, Y+1	; 0x01
     f42:	3a 81       	ldd	r19, Y+2	; 0x02
     f44:	24 30       	cpi	r18, 0x04	; 4
     f46:	31 05       	cpc	r19, r1
     f48:	ac f1       	brlt	.+106    	; 0xfb4 <Refesh+0xe4>
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	85 30       	cpi	r24, 0x05	; 5
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <Refesh+0x86>
     f54:	4e c0       	rjmp	.+156    	; 0xff2 <Refesh+0x122>
     f56:	5b c0       	rjmp	.+182    	; 0x100e <Refesh+0x13e>
	case SSD_HOURS_TENS:
		Update_Symbol(Hours / 10);
     f58:	80 91 9f 00 	lds	r24, 0x009F
     f5c:	9a e0       	ldi	r25, 0x0A	; 10
     f5e:	69 2f       	mov	r22, r25
     f60:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodqi4>
     f64:	0e 94 3c 07 	call	0xe78	; 0xe78 <Update_Symbol>
		On(SSD_HOURS_TENS);
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 96 06 	call	0xd2c	; 0xd2c <On>
		SSD_Id = SSD_HOURS_UNITS;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 89 00 	sts	0x0089, r24
     f74:	4c c0       	rjmp	.+152    	; 0x100e <Refesh+0x13e>
		break;
	case SSD_HOURS_UNITS:
		Update_Symbol(Hours % 10);
     f76:	80 91 9f 00 	lds	r24, 0x009F
     f7a:	9a e0       	ldi	r25, 0x0A	; 10
     f7c:	69 2f       	mov	r22, r25
     f7e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodqi4>
     f82:	89 2f       	mov	r24, r25
     f84:	0e 94 3c 07 	call	0xe78	; 0xe78 <Update_Symbol>
		On(SSD_HOURS_UNITS);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	0e 94 96 06 	call	0xd2c	; 0xd2c <On>
		SSD_Id = SSD_MIN_TENS;
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	80 93 89 00 	sts	0x0089, r24
     f94:	3c c0       	rjmp	.+120    	; 0x100e <Refesh+0x13e>
		break;
	case SSD_MIN_TENS:
		Update_Symbol(Minutes / 10);
     f96:	80 91 a0 00 	lds	r24, 0x00A0
     f9a:	9a e0       	ldi	r25, 0x0A	; 10
     f9c:	69 2f       	mov	r22, r25
     f9e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodqi4>
     fa2:	0e 94 3c 07 	call	0xe78	; 0xe78 <Update_Symbol>
		On(SSD_MIN_TENS);
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	0e 94 96 06 	call	0xd2c	; 0xd2c <On>
		SSD_Id = SSD_MIN_UNITS;
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	80 93 89 00 	sts	0x0089, r24
     fb2:	2d c0       	rjmp	.+90     	; 0x100e <Refesh+0x13e>
		break;
	case SSD_MIN_UNITS:
		Update_Symbol(Minutes % 10);
     fb4:	80 91 a0 00 	lds	r24, 0x00A0
     fb8:	9a e0       	ldi	r25, 0x0A	; 10
     fba:	69 2f       	mov	r22, r25
     fbc:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodqi4>
     fc0:	89 2f       	mov	r24, r25
     fc2:	0e 94 3c 07 	call	0xe78	; 0xe78 <Update_Symbol>
		On(SSD_MIN_UNITS);
     fc6:	83 e0       	ldi	r24, 0x03	; 3
     fc8:	0e 94 96 06 	call	0xd2c	; 0xd2c <On>
		SSD_Id = SSD_SEC_TENS;
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	80 93 89 00 	sts	0x0089, r24
     fd2:	1d c0       	rjmp	.+58     	; 0x100e <Refesh+0x13e>
		break;
	case SSD_SEC_TENS:
		Update_Symbol(Seconds / 10);
     fd4:	80 91 a1 00 	lds	r24, 0x00A1
     fd8:	9a e0       	ldi	r25, 0x0A	; 10
     fda:	69 2f       	mov	r22, r25
     fdc:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodqi4>
     fe0:	0e 94 3c 07 	call	0xe78	; 0xe78 <Update_Symbol>
		On(SSD_SEC_TENS);
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	0e 94 96 06 	call	0xd2c	; 0xd2c <On>
		SSD_Id = SSD_SEC_UNITS;
     fea:	85 e0       	ldi	r24, 0x05	; 5
     fec:	80 93 89 00 	sts	0x0089, r24
     ff0:	0e c0       	rjmp	.+28     	; 0x100e <Refesh+0x13e>
		break;
	case SSD_SEC_UNITS:
		Update_Symbol(Seconds % 10);
     ff2:	80 91 a1 00 	lds	r24, 0x00A1
     ff6:	9a e0       	ldi	r25, 0x0A	; 10
     ff8:	69 2f       	mov	r22, r25
     ffa:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__udivmodqi4>
     ffe:	89 2f       	mov	r24, r25
    1000:	0e 94 3c 07 	call	0xe78	; 0xe78 <Update_Symbol>
		On(SSD_SEC_UNITS);
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	0e 94 96 06 	call	0xd2c	; 0xd2c <On>
		SSD_Id = SSD_HOURS_TENS;
    100a:	10 92 89 00 	sts	0x0089, r1

	default:
		/* Error: Undefined SSD */
		break;
	}
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <Update_Mode>:

static void Update_Mode(void){
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <Update_Mode+0x6>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62

	switch(SSD_Mode_g){
    1022:	80 91 88 00 	lds	r24, 0x0088
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3a 83       	std	Y+2, r19	; 0x02
    102c:	29 83       	std	Y+1, r18	; 0x01
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	91 f0       	breq	.+36     	; 0x105c <Update_Mode+0x44>
    1038:	29 81       	ldd	r18, Y+1	; 0x01
    103a:	3a 81       	ldd	r19, Y+2	; 0x02
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	b1 f0       	breq	.+44     	; 0x106e <Update_Mode+0x56>
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	c9 f4       	brne	.+50     	; 0x107c <Update_Mode+0x64>
	case SSD_NORMAL_MODE:
		if(SW_PRESSED == SW_g[SW_SETTING].state){
    104a:	80 91 60 00 	lds	r24, 0x0060
    104e:	80 78       	andi	r24, 0x80	; 128
    1050:	88 23       	and	r24, r24
    1052:	a1 f4       	brne	.+40     	; 0x107c <Update_Mode+0x64>
			SSD_Mode_g = SSD_SETTING_HOURS_MODE;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 88 00 	sts	0x0088, r24
    105a:	10 c0       	rjmp	.+32     	; 0x107c <Update_Mode+0x64>
		}
		break;
	case SSD_SETTING_HOURS_MODE:
		if(SW_PRESSED == SW_g[SW_SETTING].state){
    105c:	80 91 60 00 	lds	r24, 0x0060
    1060:	80 78       	andi	r24, 0x80	; 128
    1062:	88 23       	and	r24, r24
    1064:	59 f4       	brne	.+22     	; 0x107c <Update_Mode+0x64>
			SSD_Mode_g = SSD_SETTING_MINUTES_MODE;
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	80 93 88 00 	sts	0x0088, r24
    106c:	07 c0       	rjmp	.+14     	; 0x107c <Update_Mode+0x64>
		/*else if(SW_PRESSED == SW_g[SW_UP].state){

		}*/
		break;
	case SSD_SETTING_MINUTES_MODE:
		if(SW_PRESSED == SW_g[SW_SETTING].state){
    106e:	80 91 60 00 	lds	r24, 0x0060
    1072:	80 78       	andi	r24, 0x80	; 128
    1074:	88 23       	and	r24, r24
    1076:	11 f4       	brne	.+4      	; 0x107c <Update_Mode+0x64>
			SSD_Mode_g = SSD_NORMAL_MODE;
    1078:	10 92 88 00 	sts	0x0088, r1
	default:
		break;

	}

}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <Scheduler>:

#define OK		0
#define NOK		1

static void Scheduler (void)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	0f 92       	push	r0
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8TaskCounter;

	for(Local_u8TaskCounter=0;Local_u8TaskCounter<NUMBER_OF_TASKS;Local_u8TaskCounter++)
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	98 c0       	rjmp	.+304    	; 0x11c4 <Scheduler+0x13e>
	{

		if (SystemTasks[Local_u8TaskCounter].State == TASK_READY)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	c9 01       	movw	r24, r18
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	82 1b       	sub	r24, r18
    10aa:	93 0b       	sbc	r25, r19
    10ac:	fc 01       	movw	r30, r24
    10ae:	e0 57       	subi	r30, 0x70	; 112
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	80 81       	ld	r24, Z
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	09 f0       	breq	.+2      	; 0x10ba <Scheduler+0x34>
    10b8:	82 c0       	rjmp	.+260    	; 0x11be <Scheduler+0x138>
		{
			if(SystemTasks[Local_u8TaskCounter].FirstDelay == 0)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	c9 01       	movw	r24, r18
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	82 1b       	sub	r24, r18
    10d0:	93 0b       	sbc	r25, r19
    10d2:	fc 01       	movw	r30, r24
    10d4:	e4 57       	subi	r30, 0x74	; 116
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	09 f0       	breq	.+2      	; 0x10e2 <Scheduler+0x5c>
    10e0:	4c c0       	rjmp	.+152    	; 0x117a <Scheduler+0xf4>
			{
				/*Invoke the task function if it is not NULL*/
				if(SystemTasks[Local_u8TaskCounter].TaskHandler != NULL)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	c9 01       	movw	r24, r18
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	82 1b       	sub	r24, r18
    10f8:	93 0b       	sbc	r25, r19
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 57       	subi	r30, 0x72	; 114
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	80 81       	ld	r24, Z
    1102:	91 81       	ldd	r25, Z+1	; 0x01
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	99 f0       	breq	.+38     	; 0x112e <Scheduler+0xa8>
				{
					SystemTasks[Local_u8TaskCounter].TaskHandler();
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	c9 01       	movw	r24, r18
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	82 1b       	sub	r24, r18
    111e:	93 0b       	sbc	r25, r19
    1120:	fc 01       	movw	r30, r24
    1122:	e2 57       	subi	r30, 0x72	; 114
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	01 90       	ld	r0, Z+
    1128:	f0 81       	ld	r31, Z
    112a:	e0 2d       	mov	r30, r0
    112c:	09 95       	icall
				}

				SystemTasks[Local_u8TaskCounter].FirstDelay = SystemTasks[Local_u8TaskCounter].priodicity-1;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	48 2f       	mov	r20, r24
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	c9 01       	movw	r24, r18
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	82 1b       	sub	r24, r18
    114a:	93 0b       	sbc	r25, r19
    114c:	fc 01       	movw	r30, r24
    114e:	e6 57       	subi	r30, 0x76	; 118
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	9c 01       	movw	r18, r24
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	30 40       	sbci	r19, 0x00	; 0
    115c:	ca 01       	movw	r24, r20
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	84 1b       	sub	r24, r20
    116c:	95 0b       	sbc	r25, r21
    116e:	fc 01       	movw	r30, r24
    1170:	e4 57       	subi	r30, 0x74	; 116
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	31 83       	std	Z+1, r19	; 0x01
    1176:	20 83       	st	Z, r18
    1178:	22 c0       	rjmp	.+68     	; 0x11be <Scheduler+0x138>

			}
			else
			{
				SystemTasks[Local_u8TaskCounter].FirstDelay--;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	c9 01       	movw	r24, r18
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	82 1b       	sub	r24, r18
    1190:	93 0b       	sbc	r25, r19
    1192:	fc 01       	movw	r30, r24
    1194:	e4 57       	subi	r30, 0x74	; 116
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	ac 01       	movw	r20, r24
    119e:	41 50       	subi	r20, 0x01	; 1
    11a0:	50 40       	sbci	r21, 0x00	; 0
    11a2:	c9 01       	movw	r24, r18
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	82 1b       	sub	r24, r18
    11b2:	93 0b       	sbc	r25, r19
    11b4:	fc 01       	movw	r30, r24
    11b6:	e4 57       	subi	r30, 0x74	; 116
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	51 83       	std	Z+1, r21	; 0x01
    11bc:	40 83       	st	Z, r20

static void Scheduler (void)
{
	u8 Local_u8TaskCounter;

	for(Local_u8TaskCounter=0;Local_u8TaskCounter<NUMBER_OF_TASKS;Local_u8TaskCounter++)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	08 f4       	brcc	.+2      	; 0x11cc <Scheduler+0x146>
    11ca:	64 cf       	rjmp	.-312    	; 0x1094 <Scheduler+0xe>
		{
			/* Task is suspended */
		}

	}
}
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <STTS_voidStart>:


void STTS_voidStart(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	/*Configure timer to generate interrupt every 1 ms*/
	Timer1_SetInterruptTime_ms(5,&Scheduler);
    11dc:	23 e4       	ldi	r18, 0x43	; 67
    11de:	38 e0       	ldi	r19, 0x08	; 8
    11e0:	85 e0       	ldi	r24, 0x05	; 5
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	b9 01       	movw	r22, r18
    11e6:	0e 94 17 12 	call	0x242e	; 0x242e <Timer1_SetInterruptTime_ms>

	SELECT_SLEEP_MODE(IDLE_MODE);
    11ea:	a5 e5       	ldi	r26, 0x55	; 85
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e5 e5       	ldi	r30, 0x55	; 85
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 68       	ori	r24, 0x80	; 128
    11f6:	8c 93       	st	X, r24

	/*Enable global interrupts*/
	sei();
    11f8:	78 94       	sei
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <STTS_u8CreateTask>:

u8 STTS_u8CreateTask(u8 Copy_u8Priority,void (*Copy_pvTaskFunc)(void),u16 Copy_u16Periodicity,u16 Copy_u16FirstDelay)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	28 97       	sbiw	r28, 0x08	; 8
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	7c 83       	std	Y+4, r23	; 0x04
    1218:	6b 83       	std	Y+3, r22	; 0x03
    121a:	5e 83       	std	Y+6, r21	; 0x06
    121c:	4d 83       	std	Y+5, r20	; 0x05
    121e:	38 87       	std	Y+8, r19	; 0x08
    1220:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState= OK;
    1222:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvTaskFunc != NULL)
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	09 f4       	brne	.+2      	; 0x122e <STTS_u8CreateTask+0x2e>
    122c:	5f c0       	rjmp	.+190    	; 0x12ec <STTS_u8CreateTask+0xec>
	{
		/*check if the given priority is available or not*/
		if(SystemTasks[Copy_u8Priority].TaskHandler == NULL)
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	c9 01       	movw	r24, r18
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	82 1b       	sub	r24, r18
    1244:	93 0b       	sbc	r25, r19
    1246:	fc 01       	movw	r30, r24
    1248:	e2 57       	subi	r30, 0x72	; 114
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	80 81       	ld	r24, Z
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	09 f0       	breq	.+2      	; 0x1256 <STTS_u8CreateTask+0x56>
    1254:	4d c0       	rjmp	.+154    	; 0x12f0 <STTS_u8CreateTask+0xf0>
		{
			SystemTasks[Copy_u8Priority].priodicity= Copy_u16Periodicity;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	c9 01       	movw	r24, r18
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	82 1b       	sub	r24, r18
    126c:	93 0b       	sbc	r25, r19
    126e:	fc 01       	movw	r30, r24
    1270:	e6 57       	subi	r30, 0x76	; 118
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	80 83       	st	Z, r24
			SystemTasks[Copy_u8Priority].TaskHandler= Copy_pvTaskFunc;
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	c9 01       	movw	r24, r18
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	82 1b       	sub	r24, r18
    1292:	93 0b       	sbc	r25, r19
    1294:	fc 01       	movw	r30, r24
    1296:	e2 57       	subi	r30, 0x72	; 114
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
			SystemTasks[Copy_u8Priority].State= TASK_READY;
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	c9 01       	movw	r24, r18
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	82 1b       	sub	r24, r18
    12b8:	93 0b       	sbc	r25, r19
    12ba:	fc 01       	movw	r30, r24
    12bc:	e0 57       	subi	r30, 0x70	; 112
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	80 83       	st	Z, r24
			SystemTasks[Copy_u8Priority].FirstDelay = Copy_u16FirstDelay;
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	c9 01       	movw	r24, r18
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	82 1b       	sub	r24, r18
    12da:	93 0b       	sbc	r25, r19
    12dc:	fc 01       	movw	r30, r24
    12de:	e4 57       	subi	r30, 0x74	; 116
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	8f 81       	ldd	r24, Y+7	; 0x07
    12e4:	98 85       	ldd	r25, Y+8	; 0x08
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <STTS_u8CreateTask+0xf0>
			/*priority is not available*/
		}
	}
	else
	{
		Local_u8ErrorState= NOK;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	28 96       	adiw	r28, 0x08	; 8
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <STTS_voidSuspendTask>:

void STTS_voidSuspendTask(u8 Copy_u8Priority)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State=TASK_SUSPENDED;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	c9 01       	movw	r24, r18
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	82 1b       	sub	r24, r18
    1326:	93 0b       	sbc	r25, r19
    1328:	fc 01       	movw	r30, r24
    132a:	e0 57       	subi	r30, 0x70	; 112
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	80 83       	st	Z, r24
}
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <STTS_voidResumeTask>:

void STTS_voidResumeTask(u8 Copy_u8Priority)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State= TASK_READY;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	c9 01       	movw	r24, r18
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	82 1b       	sub	r24, r18
    135c:	93 0b       	sbc	r25, r19
    135e:	fc 01       	movw	r30, r24
    1360:	e0 57       	subi	r30, 0x70	; 112
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	80 83       	st	Z, r24
}
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <STTS_voidDeleteTask>:

void STTS_voidDeleteTask(u8 Copy_u8Priority)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].TaskHandler= NULL;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	c9 01       	movw	r24, r18
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	82 1b       	sub	r24, r18
    1392:	93 0b       	sbc	r25, r19
    1394:	fc 01       	movw	r30, r24
    1396:	e2 57       	subi	r30, 0x72	; 114
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	11 82       	std	Z+1, r1	; 0x01
    139c:	10 82       	st	Z, r1
}
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <Read>:
		                      {PINA1 , SW_PRE_PRESSED , SW_RELEASED , SW_INTERNAL_PULLUP},
							  {PINA2 , SW_PRE_PRESSED , SW_RELEASED , SW_INTERNAL_PULLUP}
};

static void Read(SW_t * const SW)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	28 97       	sbiw	r28, 0x08	; 8
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
	switch(SW->time){
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	80 81       	ld	r24, Z
    13c4:	82 95       	swap	r24
    13c6:	86 95       	lsr	r24
    13c8:	86 95       	lsr	r24
    13ca:	83 70       	andi	r24, 0x03	; 3
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	38 87       	std	Y+8, r19	; 0x08
    13d4:	2f 83       	std	Y+7, r18	; 0x07
    13d6:	8f 81       	ldd	r24, Y+7	; 0x07
    13d8:	98 85       	ldd	r25, Y+8	; 0x08
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	31 f0       	breq	.+12     	; 0x13ea <Read+0x44>
    13de:	2f 81       	ldd	r18, Y+7	; 0x07
    13e0:	38 85       	ldd	r19, Y+8	; 0x08
    13e2:	21 30       	cpi	r18, 0x01	; 1
    13e4:	31 05       	cpc	r19, r1
    13e6:	d9 f1       	breq	.+118    	; 0x145e <Read+0xb8>
    13e8:	71 c0       	rjmp	.+226    	; 0x14cc <Read+0x126>

	case SW_PRE_PRESSED:
		switch(SW->connection){
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	81 81       	ldd	r24, Z+1	; 0x01
    13f0:	83 70       	andi	r24, 0x03	; 3
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	3e 83       	std	Y+6, r19	; 0x06
    13f8:	2d 83       	std	Y+5, r18	; 0x05
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	91 05       	cpc	r25, r1
    1402:	d1 f0       	breq	.+52     	; 0x1438 <Read+0x92>
    1404:	2d 81       	ldd	r18, Y+5	; 0x05
    1406:	3e 81       	ldd	r19, Y+6	; 0x06
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	09 f0       	breq	.+2      	; 0x1410 <Read+0x6a>
    140e:	5e c0       	rjmp	.+188    	; 0x14cc <Read+0x126>
		case SW_INTERNAL_PULLUP:
			SW->state = SW_RELEASED;
    1410:	e9 81       	ldd	r30, Y+1	; 0x01
    1412:	fa 81       	ldd	r31, Y+2	; 0x02
    1414:	80 81       	ld	r24, Z
    1416:	80 68       	ori	r24, 0x80	; 128
    1418:	80 83       	st	Z, r24
			if(HIGH == DIO_ReadPin(SW->pin)){
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	80 81       	ld	r24, Z
    1420:	8f 73       	andi	r24, 0x3F	; 63
    1422:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <DIO_ReadPin>
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	09 f0       	breq	.+2      	; 0x142c <Read+0x86>
    142a:	50 c0       	rjmp	.+160    	; 0x14cc <Read+0x126>
				SW->time = SW_PRE_RELEASED;
    142c:	e9 81       	ldd	r30, Y+1	; 0x01
    142e:	fa 81       	ldd	r31, Y+2	; 0x02
    1430:	80 81       	ld	r24, Z
    1432:	80 64       	ori	r24, 0x40	; 64
    1434:	80 83       	st	Z, r24
    1436:	4a c0       	rjmp	.+148    	; 0x14cc <Read+0x126>
			}
			break;
		case SW_EXTERNAL_PULLDOWN:
			SW->state = SW_RELEASED;
    1438:	e9 81       	ldd	r30, Y+1	; 0x01
    143a:	fa 81       	ldd	r31, Y+2	; 0x02
    143c:	80 81       	ld	r24, Z
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	80 83       	st	Z, r24
			if(LOW == DIO_ReadPin(SW->pin)){
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	80 81       	ld	r24, Z
    1448:	8f 73       	andi	r24, 0x3F	; 63
    144a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <DIO_ReadPin>
    144e:	88 23       	and	r24, r24
    1450:	e9 f5       	brne	.+122    	; 0x14cc <Read+0x126>
				SW->time = SW_PRE_RELEASED;
    1452:	e9 81       	ldd	r30, Y+1	; 0x01
    1454:	fa 81       	ldd	r31, Y+2	; 0x02
    1456:	80 81       	ld	r24, Z
    1458:	80 64       	ori	r24, 0x40	; 64
    145a:	80 83       	st	Z, r24
    145c:	37 c0       	rjmp	.+110    	; 0x14cc <Read+0x126>
			}
			break;
		}
		break;
	case SW_PRE_RELEASED:
		switch(SW->connection){
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	81 81       	ldd	r24, Z+1	; 0x01
    1464:	83 70       	andi	r24, 0x03	; 3
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3c 83       	std	Y+4, r19	; 0x04
    146c:	2b 83       	std	Y+3, r18	; 0x03
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	c1 f0       	breq	.+48     	; 0x14a8 <Read+0x102>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	29 f5       	brne	.+74     	; 0x14cc <Read+0x126>
		case SW_INTERNAL_PULLUP:
			if(LOW == DIO_ReadPin(SW->pin)){
    1482:	e9 81       	ldd	r30, Y+1	; 0x01
    1484:	fa 81       	ldd	r31, Y+2	; 0x02
    1486:	80 81       	ld	r24, Z
    1488:	8f 73       	andi	r24, 0x3F	; 63
    148a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <DIO_ReadPin>
    148e:	88 23       	and	r24, r24
    1490:	e9 f4       	brne	.+58     	; 0x14cc <Read+0x126>
				SW->state = SW_PRESSED;
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	80 81       	ld	r24, Z
    1498:	8f 77       	andi	r24, 0x7F	; 127
    149a:	80 83       	st	Z, r24
				SW->time = SW_PRE_PRESSED;
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	80 81       	ld	r24, Z
    14a2:	8f 7b       	andi	r24, 0xBF	; 191
    14a4:	80 83       	st	Z, r24
    14a6:	12 c0       	rjmp	.+36     	; 0x14cc <Read+0x126>
			}
			break;
		case SW_EXTERNAL_PULLDOWN:
			if(HIGH == DIO_ReadPin(SW->pin)){
    14a8:	e9 81       	ldd	r30, Y+1	; 0x01
    14aa:	fa 81       	ldd	r31, Y+2	; 0x02
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 73       	andi	r24, 0x3F	; 63
    14b0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <DIO_ReadPin>
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	51 f4       	brne	.+20     	; 0x14cc <Read+0x126>
				SW->state = SW_PRESSED;
    14b8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ba:	fa 81       	ldd	r31, Y+2	; 0x02
    14bc:	80 81       	ld	r24, Z
    14be:	8f 77       	andi	r24, 0x7F	; 127
    14c0:	80 83       	st	Z, r24
				SW->time = SW_PRE_RELEASED;
    14c2:	e9 81       	ldd	r30, Y+1	; 0x01
    14c4:	fa 81       	ldd	r31, Y+2	; 0x02
    14c6:	80 81       	ld	r24, Z
    14c8:	80 64       	ori	r24, 0x40	; 64
    14ca:	80 83       	st	Z, r24
		}
		break;
	default:
			break;
	}
}
    14cc:	28 96       	adiw	r28, 0x08	; 8
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <SW_Update>:

void SW_Update(void)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
	SW_ID_t id;

	for(id = SW_SETTING; id<SW_MAX_NUMBER; ++id)
    14e8:	19 82       	std	Y+1, r1	; 0x01
    14ea:	0c c0       	rjmp	.+24     	; 0x1504 <SW_Update+0x26>
	{
		Read(SW_g+id);
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	80 5a       	subi	r24, 0xA0	; 160
    14f8:	9f 4f       	sbci	r25, 0xFF	; 255
    14fa:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <Read>

void SW_Update(void)
{
	SW_ID_t id;

	for(id = SW_SETTING; id<SW_MAX_NUMBER; ++id)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	8f 5f       	subi	r24, 0xFF	; 255
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	88 f3       	brcs	.-30     	; 0x14ec <SW_Update+0xe>
	{
		Read(SW_g+id);
	}
}
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <TIME_Update>:
u8 Minutes = 0;
u8 Seconds = 0;

extern SSD_MODE_t SSD_Mode_g ;

void TIME_Update(void){
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62

	Auto_Update();
    151a:	0e 94 94 0a 	call	0x1528	; 0x1528 <Auto_Update>
	Manual_Update();
    151e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <Manual_Update>
}
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <Auto_Update>:

static void Auto_Update(void){
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62

	static u8 Period = 50;       /* 50 * 20 = 1000ms */

	Period--;
    1530:	80 91 66 00 	lds	r24, 0x0066
    1534:	81 50       	subi	r24, 0x01	; 1
    1536:	80 93 66 00 	sts	0x0066, r24
	if(Period  == 0){
    153a:	80 91 66 00 	lds	r24, 0x0066
    153e:	88 23       	and	r24, r24
    1540:	39 f5       	brne	.+78     	; 0x1590 <Auto_Update+0x68>
		if(Seconds == SEC_MAX_VAL){
    1542:	80 91 a1 00 	lds	r24, 0x00A1
    1546:	8b 33       	cpi	r24, 0x3B	; 59
    1548:	d9 f4       	brne	.+54     	; 0x1580 <Auto_Update+0x58>
			Seconds = 0;
    154a:	10 92 a1 00 	sts	0x00A1, r1
			if(Minutes == MINUTE_MAX_VAL){
    154e:	80 91 a0 00 	lds	r24, 0x00A0
    1552:	8b 33       	cpi	r24, 0x3B	; 59
    1554:	79 f4       	brne	.+30     	; 0x1574 <Auto_Update+0x4c>
				Minutes = 0;
    1556:	10 92 a0 00 	sts	0x00A0, r1
				if(Hours == HOUR_MAX_VAL){
    155a:	80 91 9f 00 	lds	r24, 0x009F
    155e:	87 31       	cpi	r24, 0x17	; 23
    1560:	19 f4       	brne	.+6      	; 0x1568 <Auto_Update+0x40>
					Hours = 0;
    1562:	10 92 9f 00 	sts	0x009F, r1
    1566:	11 c0       	rjmp	.+34     	; 0x158a <Auto_Update+0x62>
				}
				else{
					Hours++;
    1568:	80 91 9f 00 	lds	r24, 0x009F
    156c:	8f 5f       	subi	r24, 0xFF	; 255
    156e:	80 93 9f 00 	sts	0x009F, r24
    1572:	0b c0       	rjmp	.+22     	; 0x158a <Auto_Update+0x62>
				}
			}
			else{
				Minutes++;
    1574:	80 91 a0 00 	lds	r24, 0x00A0
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	80 93 a0 00 	sts	0x00A0, r24
    157e:	05 c0       	rjmp	.+10     	; 0x158a <Auto_Update+0x62>
			}
		}
		else{
			Seconds++;
    1580:	80 91 a1 00 	lds	r24, 0x00A1
    1584:	8f 5f       	subi	r24, 0xFF	; 255
    1586:	80 93 a1 00 	sts	0x00A1, r24
		}
		Period = 50;
    158a:	82 e3       	ldi	r24, 0x32	; 50
    158c:	80 93 66 00 	sts	0x0066, r24
	}

}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <Manual_Update>:

static void Manual_Update(void){
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <Manual_Update+0x6>
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62

	switch(SSD_Mode_g){
    15a0:	80 91 88 00 	lds	r24, 0x0088
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3a 83       	std	Y+2, r19	; 0x02
    15aa:	29 83       	std	Y+1, r18	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	91 05       	cpc	r25, r1
    15b4:	31 f0       	breq	.+12     	; 0x15c2 <Manual_Update+0x2c>
    15b6:	29 81       	ldd	r18, Y+1	; 0x01
    15b8:	3a 81       	ldd	r19, Y+2	; 0x02
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	f9 f0       	breq	.+62     	; 0x15fe <Manual_Update+0x68>
    15c0:	3b c0       	rjmp	.+118    	; 0x1638 <Manual_Update+0xa2>
	case SSD_NORMAL_MODE:
		/* Time Update Automatic */
		break;
	case SSD_SETTING_HOURS_MODE:
		if(SW_PRESSED == SW_g[SW_UP].state){
    15c2:	80 91 62 00 	lds	r24, 0x0062
    15c6:	80 78       	andi	r24, 0x80	; 128
    15c8:	88 23       	and	r24, r24
    15ca:	51 f4       	brne	.+20     	; 0x15e0 <Manual_Update+0x4a>
			if(Hours < HOUR_MAX_VAL){
    15cc:	80 91 9f 00 	lds	r24, 0x009F
    15d0:	87 31       	cpi	r24, 0x17	; 23
    15d2:	90 f5       	brcc	.+100    	; 0x1638 <Manual_Update+0xa2>
				Hours++;
    15d4:	80 91 9f 00 	lds	r24, 0x009F
    15d8:	8f 5f       	subi	r24, 0xFF	; 255
    15da:	80 93 9f 00 	sts	0x009F, r24
    15de:	2c c0       	rjmp	.+88     	; 0x1638 <Manual_Update+0xa2>
			}
		}
		else if(SW_PRESSED == SW_g[SW_DOWN].state){
    15e0:	80 91 64 00 	lds	r24, 0x0064
    15e4:	80 78       	andi	r24, 0x80	; 128
    15e6:	88 23       	and	r24, r24
    15e8:	39 f5       	brne	.+78     	; 0x1638 <Manual_Update+0xa2>
			if(Hours > 0){
    15ea:	80 91 9f 00 	lds	r24, 0x009F
    15ee:	88 23       	and	r24, r24
    15f0:	19 f1       	breq	.+70     	; 0x1638 <Manual_Update+0xa2>
				Hours--;
    15f2:	80 91 9f 00 	lds	r24, 0x009F
    15f6:	81 50       	subi	r24, 0x01	; 1
    15f8:	80 93 9f 00 	sts	0x009F, r24
    15fc:	1d c0       	rjmp	.+58     	; 0x1638 <Manual_Update+0xa2>
			}
		}
		break;
	case SSD_SETTING_MINUTES_MODE:
		if(SW_PRESSED == SW_g[SW_UP].state){
    15fe:	80 91 62 00 	lds	r24, 0x0062
    1602:	80 78       	andi	r24, 0x80	; 128
    1604:	88 23       	and	r24, r24
    1606:	51 f4       	brne	.+20     	; 0x161c <Manual_Update+0x86>
			if(Minutes < MINUTE_MAX_VAL){
    1608:	80 91 a0 00 	lds	r24, 0x00A0
    160c:	8b 33       	cpi	r24, 0x3B	; 59
    160e:	a0 f4       	brcc	.+40     	; 0x1638 <Manual_Update+0xa2>
				Minutes++;
    1610:	80 91 a0 00 	lds	r24, 0x00A0
    1614:	8f 5f       	subi	r24, 0xFF	; 255
    1616:	80 93 a0 00 	sts	0x00A0, r24
    161a:	0e c0       	rjmp	.+28     	; 0x1638 <Manual_Update+0xa2>
			}
		}
		else if(SW_PRESSED == SW_g[SW_DOWN].state){
    161c:	80 91 64 00 	lds	r24, 0x0064
    1620:	80 78       	andi	r24, 0x80	; 128
    1622:	88 23       	and	r24, r24
    1624:	49 f4       	brne	.+18     	; 0x1638 <Manual_Update+0xa2>
			if(Minutes > 0){
    1626:	80 91 a0 00 	lds	r24, 0x00A0
    162a:	88 23       	and	r24, r24
    162c:	29 f0       	breq	.+10     	; 0x1638 <Manual_Update+0xa2>
				Minutes--;
    162e:	80 91 a0 00 	lds	r24, 0x00A0
    1632:	81 50       	subi	r24, 0x01	; 1
    1634:	80 93 a0 00 	sts	0x00A0, r24
		}
		break;
	default:
		break;
	}
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <Timer0_Init>:
static void (*Timer0_OVF_Fptr) (void)=NULLPTR;
static void (*Timer0_OC_Fptr)  (void)=NULLPTR;
/**********************************Timer 0 ****************************************************/

void Timer0_Init( Timer0Mode_type mode,Timer0Scaler_type scaler,OC0Mode_type oc_mode)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	27 97       	sbiw	r28, 0x07	; 7
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	6a 83       	std	Y+2, r22	; 0x02
    165a:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3f 83       	std	Y+7, r19	; 0x07
    1664:	2e 83       	std	Y+6, r18	; 0x06
    1666:	8e 81       	ldd	r24, Y+6	; 0x06
    1668:	9f 81       	ldd	r25, Y+7	; 0x07
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	21 f1       	breq	.+72     	; 0x16b8 <Timer0_Init+0x76>
    1670:	2e 81       	ldd	r18, Y+6	; 0x06
    1672:	3f 81       	ldd	r19, Y+7	; 0x07
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	2c f4       	brge	.+10     	; 0x1684 <Timer0_Init+0x42>
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
    167c:	9f 81       	ldd	r25, Y+7	; 0x07
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	61 f0       	breq	.+24     	; 0x169a <Timer0_Init+0x58>
    1682:	46 c0       	rjmp	.+140    	; 0x1710 <Timer0_Init+0xce>
    1684:	2e 81       	ldd	r18, Y+6	; 0x06
    1686:	3f 81       	ldd	r19, Y+7	; 0x07
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	21 f1       	breq	.+72     	; 0x16d6 <Timer0_Init+0x94>
    168e:	8e 81       	ldd	r24, Y+6	; 0x06
    1690:	9f 81       	ldd	r25, Y+7	; 0x07
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	91 05       	cpc	r25, r1
    1696:	71 f1       	breq	.+92     	; 0x16f4 <Timer0_Init+0xb2>
    1698:	3b c0       	rjmp	.+118    	; 0x1710 <Timer0_Init+0xce>
	{
		case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM00);
    169a:	a3 e5       	ldi	r26, 0x53	; 83
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e3 e5       	ldi	r30, 0x53	; 83
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 7b       	andi	r24, 0xBF	; 191
    16a6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    16a8:	a3 e5       	ldi	r26, 0x53	; 83
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e3 e5       	ldi	r30, 0x53	; 83
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	87 7f       	andi	r24, 0xF7	; 247
    16b4:	8c 93       	st	X, r24
    16b6:	2c c0       	rjmp	.+88     	; 0x1710 <Timer0_Init+0xce>
		break;
		case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    16b8:	a3 e5       	ldi	r26, 0x53	; 83
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e3 e5       	ldi	r30, 0x53	; 83
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	80 64       	ori	r24, 0x40	; 64
    16c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    16c6:	a3 e5       	ldi	r26, 0x53	; 83
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e3 e5       	ldi	r30, 0x53	; 83
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	87 7f       	andi	r24, 0xF7	; 247
    16d2:	8c 93       	st	X, r24
    16d4:	1d c0       	rjmp	.+58     	; 0x1710 <Timer0_Init+0xce>
		break;
		case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,WGM00);
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 7b       	andi	r24, 0xBF	; 191
    16e2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    16e4:	a3 e5       	ldi	r26, 0x53	; 83
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e3 e5       	ldi	r30, 0x53	; 83
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	88 60       	ori	r24, 0x08	; 8
    16f0:	8c 93       	st	X, r24
    16f2:	0e c0       	rjmp	.+28     	; 0x1710 <Timer0_Init+0xce>
		break;
		case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,WGM00);
    16f4:	a3 e5       	ldi	r26, 0x53	; 83
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e3 e5       	ldi	r30, 0x53	; 83
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 64       	ori	r24, 0x40	; 64
    1700:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1702:	a3 e5       	ldi	r26, 0x53	; 83
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e3 e5       	ldi	r30, 0x53	; 83
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	88 60       	ori	r24, 0x08	; 8
    170e:	8c 93       	st	X, r24
		break;
	}

	TCCR0&=0XF8;
    1710:	a3 e5       	ldi	r26, 0x53	; 83
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e3 e5       	ldi	r30, 0x53	; 83
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 7f       	andi	r24, 0xF8	; 248
    171c:	8c 93       	st	X, r24
	TCCR0|=scaler;
    171e:	a3 e5       	ldi	r26, 0x53	; 83
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e3 e5       	ldi	r30, 0x53	; 83
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	90 81       	ld	r25, Z
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	89 2b       	or	r24, r25
    172c:	8c 93       	st	X, r24

	switch (oc_mode)
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 83       	std	Y+5, r19	; 0x05
    1736:	2c 83       	std	Y+4, r18	; 0x04
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	21 f1       	breq	.+72     	; 0x178a <Timer0_Init+0x148>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	2c f4       	brge	.+10     	; 0x1756 <Timer0_Init+0x114>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	61 f0       	breq	.+24     	; 0x176c <Timer0_Init+0x12a>
    1754:	46 c0       	rjmp	.+140    	; 0x17e2 <Timer0_Init+0x1a0>
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	21 f1       	breq	.+72     	; 0x17a8 <Timer0_Init+0x166>
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	91 05       	cpc	r25, r1
    1768:	71 f1       	breq	.+92     	; 0x17c6 <Timer0_Init+0x184>
    176a:	3b c0       	rjmp	.+118    	; 0x17e2 <Timer0_Init+0x1a0>
	{
		case OCO_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
    176c:	a3 e5       	ldi	r26, 0x53	; 83
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e3 e5       	ldi	r30, 0x53	; 83
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 7e       	andi	r24, 0xEF	; 239
    1778:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    177a:	a3 e5       	ldi	r26, 0x53	; 83
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e3 e5       	ldi	r30, 0x53	; 83
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 7d       	andi	r24, 0xDF	; 223
    1786:	8c 93       	st	X, r24
    1788:	2c c0       	rjmp	.+88     	; 0x17e2 <Timer0_Init+0x1a0>
		break;
		case OCO_TOGGLE:
		SET_BIT(TCCR0,COM00);
    178a:	a3 e5       	ldi	r26, 0x53	; 83
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e3 e5       	ldi	r30, 0x53	; 83
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 61       	ori	r24, 0x10	; 16
    1796:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    1798:	a3 e5       	ldi	r26, 0x53	; 83
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e3 e5       	ldi	r30, 0x53	; 83
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8f 7d       	andi	r24, 0xDF	; 223
    17a4:	8c 93       	st	X, r24
    17a6:	1d c0       	rjmp	.+58     	; 0x17e2 <Timer0_Init+0x1a0>
		break;
		case OCO_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
    17a8:	a3 e5       	ldi	r26, 0x53	; 83
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e3 e5       	ldi	r30, 0x53	; 83
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8f 7e       	andi	r24, 0xEF	; 239
    17b4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    17b6:	a3 e5       	ldi	r26, 0x53	; 83
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e3 e5       	ldi	r30, 0x53	; 83
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 62       	ori	r24, 0x20	; 32
    17c2:	8c 93       	st	X, r24
    17c4:	0e c0       	rjmp	.+28     	; 0x17e2 <Timer0_Init+0x1a0>
		break;
		case OCO_INVERTING:
		SET_BIT(TCCR0,COM00);
    17c6:	a3 e5       	ldi	r26, 0x53	; 83
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e3 e5       	ldi	r30, 0x53	; 83
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 61       	ori	r24, 0x10	; 16
    17d2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    17d4:	a3 e5       	ldi	r26, 0x53	; 83
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e3 e5       	ldi	r30, 0x53	; 83
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 62       	ori	r24, 0x20	; 32
    17e0:	8c 93       	st	X, r24
		break;
	}
	

}
    17e2:	27 96       	adiw	r28, 0x07	; 7
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <Timer0_OV_InterruptEnable>:
void Timer0_OV_InterruptEnable(void)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    17fc:	a9 e5       	ldi	r26, 0x59	; 89
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e9 e5       	ldi	r30, 0x59	; 89
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	8c 93       	st	X, r24
}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    1818:	a9 e5       	ldi	r26, 0x59	; 89
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e9 e5       	ldi	r30, 0x59	; 89
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8e 7f       	andi	r24, 0xFE	; 254
    1824:	8c 93       	st	X, r24
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    1834:	a9 e5       	ldi	r26, 0x59	; 89
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e9 e5       	ldi	r30, 0x59	; 89
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	82 60       	ori	r24, 0x02	; 2
    1840:	8c 93       	st	X, r24
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
    1850:	a9 e5       	ldi	r26, 0x59	; 89
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e9 e5       	ldi	r30, 0x59	; 89
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8d 7f       	andi	r24, 0xFD	; 253
    185c:	8c 93       	st	X, r24
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <Timer0_OVF_SetCallBack>:

/*******************************************TIMER 0 call Back function***************************************/

void Timer0_OVF_SetCallBack(void(*LocalFptr)(void))
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <Timer0_OVF_SetCallBack+0x6>
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr=LocalFptr;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	90 93 ab 00 	sts	0x00AB, r25
    187a:	80 93 aa 00 	sts	0x00AA, r24
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <Timer0_Oc_SetCallBack>:

void Timer0_Oc_SetCallBack(void(*LocalFptr)(void))
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <Timer0_Oc_SetCallBack+0x6>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OC_Fptr=LocalFptr;
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	90 93 ad 00 	sts	0x00AD, r25
    189e:	80 93 ac 00 	sts	0x00AC, r24
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <__vector_11>:

/*********************************Timer 0 ISR functions*********************************************/

ISR(TIMER0_OVF_vect)
{
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	4f 93       	push	r20
    18bc:	5f 93       	push	r21
    18be:	6f 93       	push	r22
    18c0:	7f 93       	push	r23
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	af 93       	push	r26
    18c8:	bf 93       	push	r27
    18ca:	ef 93       	push	r30
    18cc:	ff 93       	push	r31
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_OVF_Fptr!=NULLPTR)
    18d6:	80 91 aa 00 	lds	r24, 0x00AA
    18da:	90 91 ab 00 	lds	r25, 0x00AB
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	29 f0       	breq	.+10     	; 0x18ec <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
    18e2:	e0 91 aa 00 	lds	r30, 0x00AA
    18e6:	f0 91 ab 00 	lds	r31, 0x00AB
    18ea:	09 95       	icall
	}
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	bf 91       	pop	r27
    18f6:	af 91       	pop	r26
    18f8:	9f 91       	pop	r25
    18fa:	8f 91       	pop	r24
    18fc:	7f 91       	pop	r23
    18fe:	6f 91       	pop	r22
    1900:	5f 91       	pop	r21
    1902:	4f 91       	pop	r20
    1904:	3f 91       	pop	r19
    1906:	2f 91       	pop	r18
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_OC_Fptr!=NULLPTR)
    193c:	80 91 ac 00 	lds	r24, 0x00AC
    1940:	90 91 ad 00 	lds	r25, 0x00AD
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	29 f0       	breq	.+10     	; 0x1952 <__vector_10+0x40>
	{
		Timer0_OC_Fptr();
    1948:	e0 91 ac 00 	lds	r30, 0x00AC
    194c:	f0 91 ad 00 	lds	r31, 0x00AD
    1950:	09 95       	icall
	}
}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <Timer1_Init>:

/*************************************************TIMER 1 **************************************************/


void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler,OC1A_Mode_type oc1a_mode,OC1B_Mode_type oc1b_mode)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	2a 97       	sbiw	r28, 0x0a	; 10
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	6a 83       	std	Y+2, r22	; 0x02
    1990:	4b 83       	std	Y+3, r20	; 0x03
    1992:	2c 83       	std	Y+4, r18	; 0x04
	switch (mode)
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3a 87       	std	Y+10, r19	; 0x0a
    199c:	29 87       	std	Y+9, r18	; 0x09
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <Timer1_Init+0x32>
    19a8:	7f c0       	rjmp	.+254    	; 0x1aa8 <Timer1_Init+0x130>
    19aa:	29 85       	ldd	r18, Y+9	; 0x09
    19ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    19ae:	24 30       	cpi	r18, 0x04	; 4
    19b0:	31 05       	cpc	r19, r1
    19b2:	84 f4       	brge	.+32     	; 0x19d4 <Timer1_Init+0x5c>
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	91 05       	cpc	r25, r1
    19bc:	d9 f1       	breq	.+118    	; 0x1a34 <Timer1_Init+0xbc>
    19be:	29 85       	ldd	r18, Y+9	; 0x09
    19c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	0c f0       	brlt	.+2      	; 0x19ca <Timer1_Init+0x52>
    19c8:	52 c0       	rjmp	.+164    	; 0x1a6e <Timer1_Init+0xf6>
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	a1 f0       	breq	.+40     	; 0x19fa <Timer1_Init+0x82>
    19d2:	dd c0       	rjmp	.+442    	; 0x1b8e <Timer1_Init+0x216>
    19d4:	29 85       	ldd	r18, Y+9	; 0x09
    19d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    19d8:	25 30       	cpi	r18, 0x05	; 5
    19da:	31 05       	cpc	r19, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <Timer1_Init+0x68>
    19de:	9e c0       	rjmp	.+316    	; 0x1b1c <Timer1_Init+0x1a4>
    19e0:	89 85       	ldd	r24, Y+9	; 0x09
    19e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e4:	85 30       	cpi	r24, 0x05	; 5
    19e6:	91 05       	cpc	r25, r1
    19e8:	0c f4       	brge	.+2      	; 0x19ec <Timer1_Init+0x74>
    19ea:	7b c0       	rjmp	.+246    	; 0x1ae2 <Timer1_Init+0x16a>
    19ec:	29 85       	ldd	r18, Y+9	; 0x09
    19ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    19f0:	26 30       	cpi	r18, 0x06	; 6
    19f2:	31 05       	cpc	r19, r1
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <Timer1_Init+0x80>
    19f6:	af c0       	rjmp	.+350    	; 0x1b56 <Timer1_Init+0x1de>
    19f8:	ca c0       	rjmp	.+404    	; 0x1b8e <Timer1_Init+0x216>
	{
		case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A,WGM10);
    19fa:	af e4       	ldi	r26, 0x4F	; 79
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ef e4       	ldi	r30, 0x4F	; 79
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	8e 7f       	andi	r24, 0xFE	; 254
    1a06:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    1a08:	af e4       	ldi	r26, 0x4F	; 79
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ef e4       	ldi	r30, 0x4F	; 79
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	8d 7f       	andi	r24, 0xFD	; 253
    1a14:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
    1a16:	ae e4       	ldi	r26, 0x4E	; 78
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ee e4       	ldi	r30, 0x4E	; 78
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	87 7f       	andi	r24, 0xF7	; 247
    1a22:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
    1a24:	ae e4       	ldi	r26, 0x4E	; 78
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ee e4       	ldi	r30, 0x4E	; 78
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8f 7e       	andi	r24, 0xEF	; 239
    1a30:	8c 93       	st	X, r24
    1a32:	ad c0       	rjmp	.+346    	; 0x1b8e <Timer1_Init+0x216>
		break;
		case TIMER1_CTC_ICR_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
    1a34:	af e4       	ldi	r26, 0x4F	; 79
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	ef e4       	ldi	r30, 0x4F	; 79
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8e 7f       	andi	r24, 0xFE	; 254
    1a40:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    1a42:	af e4       	ldi	r26, 0x4F	; 79
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	ef e4       	ldi	r30, 0x4F	; 79
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8d 7f       	andi	r24, 0xFD	; 253
    1a4e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1a50:	ae e4       	ldi	r26, 0x4E	; 78
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	ee e4       	ldi	r30, 0x4E	; 78
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	88 60       	ori	r24, 0x08	; 8
    1a5c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1a5e:	ae e4       	ldi	r26, 0x4E	; 78
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	ee e4       	ldi	r30, 0x4E	; 78
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	80 61       	ori	r24, 0x10	; 16
    1a6a:	8c 93       	st	X, r24
    1a6c:	90 c0       	rjmp	.+288    	; 0x1b8e <Timer1_Init+0x216>
		break;
		
		case TIMER1_CTC_OCRA_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
    1a6e:	af e4       	ldi	r26, 0x4F	; 79
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ef e4       	ldi	r30, 0x4F	; 79
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	8e 7f       	andi	r24, 0xFE	; 254
    1a7a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    1a7c:	af e4       	ldi	r26, 0x4F	; 79
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ef e4       	ldi	r30, 0x4F	; 79
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8d 7f       	andi	r24, 0xFD	; 253
    1a88:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1a8a:	ae e4       	ldi	r26, 0x4E	; 78
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ee e4       	ldi	r30, 0x4E	; 78
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 60       	ori	r24, 0x08	; 8
    1a96:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
    1a98:	ae e4       	ldi	r26, 0x4E	; 78
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ee e4       	ldi	r30, 0x4E	; 78
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8f 7e       	andi	r24, 0xEF	; 239
    1aa4:	8c 93       	st	X, r24
    1aa6:	73 c0       	rjmp	.+230    	; 0x1b8e <Timer1_Init+0x216>
		break;
		
		case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
    1aa8:	af e4       	ldi	r26, 0x4F	; 79
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ef e4       	ldi	r30, 0x4F	; 79
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8e 7f       	andi	r24, 0xFE	; 254
    1ab4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    1ab6:	af e4       	ldi	r26, 0x4F	; 79
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ef e4       	ldi	r30, 0x4F	; 79
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	82 60       	ori	r24, 0x02	; 2
    1ac2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1ac4:	ae e4       	ldi	r26, 0x4E	; 78
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ee e4       	ldi	r30, 0x4E	; 78
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	88 60       	ori	r24, 0x08	; 8
    1ad0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1ad2:	ae e4       	ldi	r26, 0x4E	; 78
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ee e4       	ldi	r30, 0x4E	; 78
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	80 61       	ori	r24, 0x10	; 16
    1ade:	8c 93       	st	X, r24
    1ae0:	56 c0       	rjmp	.+172    	; 0x1b8e <Timer1_Init+0x216>
		break;
		
		case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
    1ae2:	af e4       	ldi	r26, 0x4F	; 79
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	ef e4       	ldi	r30, 0x4F	; 79
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	81 60       	ori	r24, 0x01	; 1
    1aee:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    1af0:	af e4       	ldi	r26, 0x4F	; 79
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ef e4       	ldi	r30, 0x4F	; 79
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	82 60       	ori	r24, 0x02	; 2
    1afc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1afe:	ae e4       	ldi	r26, 0x4E	; 78
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	ee e4       	ldi	r30, 0x4E	; 78
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	88 60       	ori	r24, 0x08	; 8
    1b0a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1b0c:	ae e4       	ldi	r26, 0x4E	; 78
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	ee e4       	ldi	r30, 0x4E	; 78
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 61       	ori	r24, 0x10	; 16
    1b18:	8c 93       	st	X, r24
    1b1a:	39 c0       	rjmp	.+114    	; 0x1b8e <Timer1_Init+0x216>
		break;
		
		case TIMER1_PHASECORRECT_ICR_MODE:
		CLR_BIT(TCCR1A,WGM10);
    1b1c:	af e4       	ldi	r26, 0x4F	; 79
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ef e4       	ldi	r30, 0x4F	; 79
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8e 7f       	andi	r24, 0xFE	; 254
    1b28:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    1b2a:	af e4       	ldi	r26, 0x4F	; 79
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	ef e4       	ldi	r30, 0x4F	; 79
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	82 60       	ori	r24, 0x02	; 2
    1b36:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
    1b38:	ae e4       	ldi	r26, 0x4E	; 78
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	ee e4       	ldi	r30, 0x4E	; 78
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	87 7f       	andi	r24, 0xF7	; 247
    1b44:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1b46:	ae e4       	ldi	r26, 0x4E	; 78
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ee e4       	ldi	r30, 0x4E	; 78
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	80 61       	ori	r24, 0x10	; 16
    1b52:	8c 93       	st	X, r24
    1b54:	1c c0       	rjmp	.+56     	; 0x1b8e <Timer1_Init+0x216>
		break;
		
		case TIMER1_PHASECORRECT_OCRA_MODE:
		SET_BIT(TCCR1A,WGM10);
    1b56:	af e4       	ldi	r26, 0x4F	; 79
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ef e4       	ldi	r30, 0x4F	; 79
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	81 60       	ori	r24, 0x01	; 1
    1b62:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    1b64:	af e4       	ldi	r26, 0x4F	; 79
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	ef e4       	ldi	r30, 0x4F	; 79
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	82 60       	ori	r24, 0x02	; 2
    1b70:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
    1b72:	ae e4       	ldi	r26, 0x4E	; 78
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ee e4       	ldi	r30, 0x4E	; 78
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	87 7f       	andi	r24, 0xF7	; 247
    1b7e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1b80:	ae e4       	ldi	r26, 0x4E	; 78
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ee e4       	ldi	r30, 0x4E	; 78
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 61       	ori	r24, 0x10	; 16
    1b8c:	8c 93       	st	X, r24
		break;
	}
	switch (oc1a_mode)
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	38 87       	std	Y+8, r19	; 0x08
    1b96:	2f 83       	std	Y+7, r18	; 0x07
    1b98:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9a:	98 85       	ldd	r25, Y+8	; 0x08
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	21 f1       	breq	.+72     	; 0x1bea <Timer1_Init+0x272>
    1ba2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba4:	38 85       	ldd	r19, Y+8	; 0x08
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <Timer1_Init+0x23e>
    1bac:	8f 81       	ldd	r24, Y+7	; 0x07
    1bae:	98 85       	ldd	r25, Y+8	; 0x08
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <Timer1_Init+0x254>
    1bb4:	46 c0       	rjmp	.+140    	; 0x1c42 <Timer1_Init+0x2ca>
    1bb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb8:	38 85       	ldd	r19, Y+8	; 0x08
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	21 f1       	breq	.+72     	; 0x1c08 <Timer1_Init+0x290>
    1bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc2:	98 85       	ldd	r25, Y+8	; 0x08
    1bc4:	83 30       	cpi	r24, 0x03	; 3
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	71 f1       	breq	.+92     	; 0x1c26 <Timer1_Init+0x2ae>
    1bca:	3b c0       	rjmp	.+118    	; 0x1c42 <Timer1_Init+0x2ca>
	{
		case OCRA_DISCONNECTED:
		CLR_BIT(TCCR1A,COM1A0);
    1bcc:	af e4       	ldi	r26, 0x4F	; 79
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ef e4       	ldi	r30, 0x4F	; 79
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8f 7b       	andi	r24, 0xBF	; 191
    1bd8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1A1);
    1bda:	af e4       	ldi	r26, 0x4F	; 79
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ef e4       	ldi	r30, 0x4F	; 79
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 77       	andi	r24, 0x7F	; 127
    1be6:	8c 93       	st	X, r24
    1be8:	2c c0       	rjmp	.+88     	; 0x1c42 <Timer1_Init+0x2ca>
		break;
		case OCRA_TOGGLE:
		SET_BIT(TCCR1A,COM1A0);
    1bea:	af e4       	ldi	r26, 0x4F	; 79
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	ef e4       	ldi	r30, 0x4F	; 79
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 64       	ori	r24, 0x40	; 64
    1bf6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1A1);
    1bf8:	af e4       	ldi	r26, 0x4F	; 79
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	ef e4       	ldi	r30, 0x4F	; 79
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8f 77       	andi	r24, 0x7F	; 127
    1c04:	8c 93       	st	X, r24
    1c06:	1d c0       	rjmp	.+58     	; 0x1c42 <Timer1_Init+0x2ca>
		break;
		case OCRA_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1A0);
    1c08:	af e4       	ldi	r26, 0x4F	; 79
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ef e4       	ldi	r30, 0x4F	; 79
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8f 7b       	andi	r24, 0xBF	; 191
    1c14:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1c16:	af e4       	ldi	r26, 0x4F	; 79
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	ef e4       	ldi	r30, 0x4F	; 79
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	80 68       	ori	r24, 0x80	; 128
    1c22:	8c 93       	st	X, r24
    1c24:	0e c0       	rjmp	.+28     	; 0x1c42 <Timer1_Init+0x2ca>
		break;
		case OCRA_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    1c26:	af e4       	ldi	r26, 0x4F	; 79
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ef e4       	ldi	r30, 0x4F	; 79
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 64       	ori	r24, 0x40	; 64
    1c32:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1c34:	af e4       	ldi	r26, 0x4F	; 79
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ef e4       	ldi	r30, 0x4F	; 79
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	8c 93       	st	X, r24
		break;
	}
	switch (oc1b_mode)
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3e 83       	std	Y+6, r19	; 0x06
    1c4a:	2d 83       	std	Y+5, r18	; 0x05
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	91 05       	cpc	r25, r1
    1c54:	21 f1       	breq	.+72     	; 0x1c9e <Timer1_Init+0x326>
    1c56:	2d 81       	ldd	r18, Y+5	; 0x05
    1c58:	3e 81       	ldd	r19, Y+6	; 0x06
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <Timer1_Init+0x2f2>
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <Timer1_Init+0x308>
    1c68:	46 c0       	rjmp	.+140    	; 0x1cf6 <Timer1_Init+0x37e>
    1c6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c6e:	22 30       	cpi	r18, 0x02	; 2
    1c70:	31 05       	cpc	r19, r1
    1c72:	21 f1       	breq	.+72     	; 0x1cbc <Timer1_Init+0x344>
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	83 30       	cpi	r24, 0x03	; 3
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	71 f1       	breq	.+92     	; 0x1cda <Timer1_Init+0x362>
    1c7e:	3b c0       	rjmp	.+118    	; 0x1cf6 <Timer1_Init+0x37e>
	{
		case OCRB_DISCONNECTED:
		CLR_BIT(TCCR1A,COM1B0);
    1c80:	af e4       	ldi	r26, 0x4F	; 79
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ef e4       	ldi	r30, 0x4F	; 79
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 7e       	andi	r24, 0xEF	; 239
    1c8c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1B1);
    1c8e:	af e4       	ldi	r26, 0x4F	; 79
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ef e4       	ldi	r30, 0x4F	; 79
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8f 7d       	andi	r24, 0xDF	; 223
    1c9a:	8c 93       	st	X, r24
    1c9c:	2c c0       	rjmp	.+88     	; 0x1cf6 <Timer1_Init+0x37e>
		break;
		case OCRB_TOGGLE:
		SET_BIT(TCCR1A,COM1B0);
    1c9e:	af e4       	ldi	r26, 0x4F	; 79
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ef e4       	ldi	r30, 0x4F	; 79
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	80 61       	ori	r24, 0x10	; 16
    1caa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1B1);
    1cac:	af e4       	ldi	r26, 0x4F	; 79
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ef e4       	ldi	r30, 0x4F	; 79
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8f 7d       	andi	r24, 0xDF	; 223
    1cb8:	8c 93       	st	X, r24
    1cba:	1d c0       	rjmp	.+58     	; 0x1cf6 <Timer1_Init+0x37e>
		break;
		case OCRB_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1B0);
    1cbc:	af e4       	ldi	r26, 0x4F	; 79
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	ef e4       	ldi	r30, 0x4F	; 79
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8f 7e       	andi	r24, 0xEF	; 239
    1cc8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1cca:	af e4       	ldi	r26, 0x4F	; 79
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	ef e4       	ldi	r30, 0x4F	; 79
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 62       	ori	r24, 0x20	; 32
    1cd6:	8c 93       	st	X, r24
    1cd8:	0e c0       	rjmp	.+28     	; 0x1cf6 <Timer1_Init+0x37e>
		break;
		case OCRB_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    1cda:	af e4       	ldi	r26, 0x4F	; 79
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	ef e4       	ldi	r30, 0x4F	; 79
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	80 61       	ori	r24, 0x10	; 16
    1ce6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1ce8:	af e4       	ldi	r26, 0x4F	; 79
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	ef e4       	ldi	r30, 0x4F	; 79
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	80 62       	ori	r24, 0x20	; 32
    1cf4:	8c 93       	st	X, r24
		break;
	}
	
	
	TCCR1B&=0XF8;
    1cf6:	ae e4       	ldi	r26, 0x4E	; 78
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	ee e4       	ldi	r30, 0x4E	; 78
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	88 7f       	andi	r24, 0xF8	; 248
    1d02:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    1d04:	ae e4       	ldi	r26, 0x4E	; 78
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	ee e4       	ldi	r30, 0x4E	; 78
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	90 81       	ld	r25, Z
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	89 2b       	or	r24, r25
    1d12:	8c 93       	st	X, r24

}
    1d14:	2a 96       	adiw	r28, 0x0a	; 10
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	88 23       	and	r24, r24
    1d36:	41 f4       	brne	.+16     	; 0x1d48 <Timer1_InputCaptureEdge+0x22>
	SET_BIT(TCCR1B,ICES1);
    1d38:	ae e4       	ldi	r26, 0x4E	; 78
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ee e4       	ldi	r30, 0x4E	; 78
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	80 64       	ori	r24, 0x40	; 64
    1d44:	8c 93       	st	X, r24
    1d46:	0a c0       	rjmp	.+20     	; 0x1d5c <Timer1_InputCaptureEdge+0x36>
	
	else if(edge==FALLING)
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	39 f4       	brne	.+14     	; 0x1d5c <Timer1_InputCaptureEdge+0x36>
	CLR_BIT(TCCR1B,ICES1);
    1d4e:	ae e4       	ldi	r26, 0x4E	; 78
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ee e4       	ldi	r30, 0x4E	; 78
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8f 7b       	andi	r24, 0xBF	; 191
    1d5a:	8c 93       	st	X, r24

}
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <Timer1_WriteToTCNT1>:

void Timer1_WriteToTCNT1(u16 Value)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <Timer1_WriteToTCNT1+0x6>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
	ASSIGN_REG(TCNT1 , Value);
    1d72:	ec e4       	ldi	r30, 0x4C	; 76
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <Timer1_ReadTCNT1>:


u16 Timer1_ReadTCNT1(void)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;	
    1d90:	ec e4       	ldi	r30, 0x4C	; 76
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <Timer1_ICU_InterruptEnable>:

/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    1da6:	a9 e5       	ldi	r26, 0x59	; 89
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e9 e5       	ldi	r30, 0x59	; 89
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	80 62       	ori	r24, 0x20	; 32
    1db2:	8c 93       	st	X, r24
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    1dc2:	a9 e5       	ldi	r26, 0x59	; 89
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e9 e5       	ldi	r30, 0x59	; 89
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8f 7d       	andi	r24, 0xDF	; 223
    1dce:	8c 93       	st	X, r24
}
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	84 60       	ori	r24, 0x04	; 4
    1dea:	8c 93       	st	X, r24
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    1dfa:	a9 e5       	ldi	r26, 0x59	; 89
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e9 e5       	ldi	r30, 0x59	; 89
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8b 7f       	andi	r24, 0xFB	; 251
    1e06:	8c 93       	st	X, r24
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    1e16:	a9 e5       	ldi	r26, 0x59	; 89
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e9 e5       	ldi	r30, 0x59	; 89
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	80 61       	ori	r24, 0x10	; 16
    1e22:	8c 93       	st	X, r24
}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1A);
    1e32:	a9 e5       	ldi	r26, 0x59	; 89
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e9 e5       	ldi	r30, 0x59	; 89
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8f 7e       	andi	r24, 0xEF	; 239
    1e3e:	8c 93       	st	X, r24
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    1e4e:	a9 e5       	ldi	r26, 0x59	; 89
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e9 e5       	ldi	r30, 0x59	; 89
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	88 60       	ori	r24, 0x08	; 8
    1e5a:	8c 93       	st	X, r24
}
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1B);
    1e6a:	a9 e5       	ldi	r26, 0x59	; 89
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e9 e5       	ldi	r30, 0x59	; 89
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	87 7f       	andi	r24, 0xF7	; 247
    1e76:	8c 93       	st	X, r24
}
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <Timer1_OVF_SetCallBack+0x6>
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	90 93 a3 00 	sts	0x00A3, r25
    1e94:	80 93 a2 00 	sts	0x00A2, r24
}
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <Timer1_OCA_SetCallBack+0x6>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	90 93 a5 00 	sts	0x00A5, r25
    1eb8:	80 93 a4 00 	sts	0x00A4, r24
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <Timer1_OCB_SetCallBack+0x6>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	90 93 a7 00 	sts	0x00A7, r25
    1edc:	80 93 a6 00 	sts	0x00A6, r24
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <Timer1_ICU_SetCallBack+0x6>
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	90 93 a9 00 	sts	0x00A9, r25
    1f00:	80 93 a8 00 	sts	0x00A8, r24
}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	2f 93       	push	r18
    1f1a:	3f 93       	push	r19
    1f1c:	4f 93       	push	r20
    1f1e:	5f 93       	push	r21
    1f20:	6f 93       	push	r22
    1f22:	7f 93       	push	r23
    1f24:	8f 93       	push	r24
    1f26:	9f 93       	push	r25
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULLPTR)
    1f38:	80 91 a2 00 	lds	r24, 0x00A2
    1f3c:	90 91 a3 00 	lds	r25, 0x00A3
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	29 f0       	breq	.+10     	; 0x1f4e <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    1f44:	e0 91 a2 00 	lds	r30, 0x00A2
    1f48:	f0 91 a3 00 	lds	r31, 0x00A3
    1f4c:	09 95       	icall
	}
}
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	ff 91       	pop	r31
    1f54:	ef 91       	pop	r30
    1f56:	bf 91       	pop	r27
    1f58:	af 91       	pop	r26
    1f5a:	9f 91       	pop	r25
    1f5c:	8f 91       	pop	r24
    1f5e:	7f 91       	pop	r23
    1f60:	6f 91       	pop	r22
    1f62:	5f 91       	pop	r21
    1f64:	4f 91       	pop	r20
    1f66:	3f 91       	pop	r19
    1f68:	2f 91       	pop	r18
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	0f 90       	pop	r0
    1f70:	1f 90       	pop	r1
    1f72:	18 95       	reti

00001f74 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    1f74:	1f 92       	push	r1
    1f76:	0f 92       	push	r0
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	0f 92       	push	r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	2f 93       	push	r18
    1f80:	3f 93       	push	r19
    1f82:	4f 93       	push	r20
    1f84:	5f 93       	push	r21
    1f86:	6f 93       	push	r22
    1f88:	7f 93       	push	r23
    1f8a:	8f 93       	push	r24
    1f8c:	9f 93       	push	r25
    1f8e:	af 93       	push	r26
    1f90:	bf 93       	push	r27
    1f92:	ef 93       	push	r30
    1f94:	ff 93       	push	r31
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULLPTR)
    1f9e:	80 91 a4 00 	lds	r24, 0x00A4
    1fa2:	90 91 a5 00 	lds	r25, 0x00A5
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	29 f0       	breq	.+10     	; 0x1fb4 <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    1faa:	e0 91 a4 00 	lds	r30, 0x00A4
    1fae:	f0 91 a5 00 	lds	r31, 0x00A5
    1fb2:	09 95       	icall
	}
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	ff 91       	pop	r31
    1fba:	ef 91       	pop	r30
    1fbc:	bf 91       	pop	r27
    1fbe:	af 91       	pop	r26
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	7f 91       	pop	r23
    1fc6:	6f 91       	pop	r22
    1fc8:	5f 91       	pop	r21
    1fca:	4f 91       	pop	r20
    1fcc:	3f 91       	pop	r19
    1fce:	2f 91       	pop	r18
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    1fda:	1f 92       	push	r1
    1fdc:	0f 92       	push	r0
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	0f 92       	push	r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	2f 93       	push	r18
    1fe6:	3f 93       	push	r19
    1fe8:	4f 93       	push	r20
    1fea:	5f 93       	push	r21
    1fec:	6f 93       	push	r22
    1fee:	7f 93       	push	r23
    1ff0:	8f 93       	push	r24
    1ff2:	9f 93       	push	r25
    1ff4:	af 93       	push	r26
    1ff6:	bf 93       	push	r27
    1ff8:	ef 93       	push	r30
    1ffa:	ff 93       	push	r31
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULLPTR)
    2004:	80 91 a6 00 	lds	r24, 0x00A6
    2008:	90 91 a7 00 	lds	r25, 0x00A7
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	29 f0       	breq	.+10     	; 0x201a <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    2010:	e0 91 a6 00 	lds	r30, 0x00A6
    2014:	f0 91 a7 00 	lds	r31, 0x00A7
    2018:	09 95       	icall
	}
}
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	ff 91       	pop	r31
    2020:	ef 91       	pop	r30
    2022:	bf 91       	pop	r27
    2024:	af 91       	pop	r26
    2026:	9f 91       	pop	r25
    2028:	8f 91       	pop	r24
    202a:	7f 91       	pop	r23
    202c:	6f 91       	pop	r22
    202e:	5f 91       	pop	r21
    2030:	4f 91       	pop	r20
    2032:	3f 91       	pop	r19
    2034:	2f 91       	pop	r18
    2036:	0f 90       	pop	r0
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	0f 90       	pop	r0
    203c:	1f 90       	pop	r1
    203e:	18 95       	reti

00002040 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
    2040:	1f 92       	push	r1
    2042:	0f 92       	push	r0
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	0f 92       	push	r0
    2048:	11 24       	eor	r1, r1
    204a:	2f 93       	push	r18
    204c:	3f 93       	push	r19
    204e:	4f 93       	push	r20
    2050:	5f 93       	push	r21
    2052:	6f 93       	push	r22
    2054:	7f 93       	push	r23
    2056:	8f 93       	push	r24
    2058:	9f 93       	push	r25
    205a:	af 93       	push	r26
    205c:	bf 93       	push	r27
    205e:	ef 93       	push	r30
    2060:	ff 93       	push	r31
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULLPTR)
    206a:	80 91 a8 00 	lds	r24, 0x00A8
    206e:	90 91 a9 00 	lds	r25, 0x00A9
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	29 f0       	breq	.+10     	; 0x2080 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    2076:	e0 91 a8 00 	lds	r30, 0x00A8
    207a:	f0 91 a9 00 	lds	r31, 0x00A9
    207e:	09 95       	icall
	}
}
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	ff 91       	pop	r31
    2086:	ef 91       	pop	r30
    2088:	bf 91       	pop	r27
    208a:	af 91       	pop	r26
    208c:	9f 91       	pop	r25
    208e:	8f 91       	pop	r24
    2090:	7f 91       	pop	r23
    2092:	6f 91       	pop	r22
    2094:	5f 91       	pop	r21
    2096:	4f 91       	pop	r20
    2098:	3f 91       	pop	r19
    209a:	2f 91       	pop	r18
    209c:	0f 90       	pop	r0
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	0f 90       	pop	r0
    20a2:	1f 90       	pop	r1
    20a4:	18 95       	reti

000020a6 <PWM_Init>:

static void Func_ICU(void);
static void Func_OVF(void);

void PWM_Init(void)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE , TIMER1_SCALER_8 , OCRA_NON_INVERTING , OCRB_DISCONNECTED);
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	62 e0       	ldi	r22, 0x02	; 2
    20b2:	42 e0       	ldi	r20, 0x02	; 2
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <Timer1_Init>
}
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <PWM_Freq_KHZ>:

void PWM_Freq_KHZ(u16 freq)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <PWM_Freq_KHZ+0x6>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <PWM_Freq_KHZ+0x8>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9c 83       	std	Y+4, r25	; 0x04
    20ce:	8b 83       	std	Y+3, r24	; 0x03
	u16 ttotal;
	
	if(freq > 0)
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	d1 f0       	breq	.+52     	; 0x210c <PWM_Freq_KHZ+0x4c>
	{
		ttotal = 1000 / freq;       // (10^6*(1/freq*10^3)) us
    20d8:	88 ee       	ldi	r24, 0xE8	; 232
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	2b 81       	ldd	r18, Y+3	; 0x03
    20de:	3c 81       	ldd	r19, Y+4	; 0x04
    20e0:	b9 01       	movw	r22, r18
    20e2:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__udivmodhi4>
    20e6:	cb 01       	movw	r24, r22
    20e8:	9a 83       	std	Y+2, r25	; 0x02
    20ea:	89 83       	std	Y+1, r24	; 0x01
		if (ttotal >= 1)
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	41 f0       	breq	.+16     	; 0x2104 <PWM_Freq_KHZ+0x44>
		{
			ICR1 = ttotal - 1;
    20f4:	e6 e4       	ldi	r30, 0x46	; 70
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	04 c0       	rjmp	.+8      	; 0x210c <PWM_Freq_KHZ+0x4c>
		}
		else{
			ICR1 = 0;
    2104:	e6 e4       	ldi	r30, 0x46	; 70
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	11 82       	std	Z+1, r1	; 0x01
    210a:	10 82       	st	Z, r1
		}	
	}
}
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <PWM_Freq_HZ>:

void PWM_Freq_HZ(u16 freq)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <PWM_Freq_HZ+0x6>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <PWM_Freq_HZ+0x8>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
	u16 ttotal;
	
	if(freq > 0)
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	09 f1       	breq	.+66     	; 0x2174 <PWM_Freq_HZ+0x5a>
	{
		ttotal = (u32)1000000 / freq;       // (10^6*(1/freq)) us
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	9c 01       	movw	r18, r24
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	80 e4       	ldi	r24, 0x40	; 64
    213e:	92 e4       	ldi	r25, 0x42	; 66
    2140:	af e0       	ldi	r26, 0x0F	; 15
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 0c 13 	call	0x2618	; 0x2618 <__udivmodsi4>
    214c:	da 01       	movw	r26, r20
    214e:	c9 01       	movw	r24, r18
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
		if (ttotal >= 1)
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	41 f0       	breq	.+16     	; 0x216c <PWM_Freq_HZ+0x52>
		{
			ICR1 = ttotal - 1;
    215c:	e6 e4       	ldi	r30, 0x46	; 70
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	80 83       	st	Z, r24
    216a:	04 c0       	rjmp	.+8      	; 0x2174 <PWM_Freq_HZ+0x5a>
		}
		else
		{
			ICR1 = 0;
    216c:	e6 e4       	ldi	r30, 0x46	; 70
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	11 82       	std	Z+1, r1	; 0x01
    2172:	10 82       	st	Z, r1
		}	
	}
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <PWM_Duty>:

void PWM_Duty(u16 duty)
{
    2182:	ef 92       	push	r14
    2184:	ff 92       	push	r15
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <PWM_Duty+0xe>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <PWM_Duty+0x10>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
	if (duty <= 100)
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	85 36       	cpi	r24, 0x65	; 101
    21a0:	91 05       	cpc	r25, r1
    21a2:	80 f5       	brcc	.+96     	; 0x2204 <PWM_Duty+0x82>
	{
		u16 ton = ((u32)duty * (ICR1+1))/100;
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	7c 01       	movw	r14, r24
    21aa:	00 e0       	ldi	r16, 0x00	; 0
    21ac:	10 e0       	ldi	r17, 0x00	; 0
    21ae:	e6 e4       	ldi	r30, 0x46	; 70
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	01 96       	adiw	r24, 0x01	; 1
    21b8:	9c 01       	movw	r18, r24
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	c8 01       	movw	r24, r16
    21c0:	b7 01       	movw	r22, r14
    21c2:	0e 94 cd 12 	call	0x259a	; 0x259a <__mulsi3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	24 e6       	ldi	r18, 0x64	; 100
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 0c 13 	call	0x2618	; 0x2618 <__udivmodsi4>
    21da:	da 01       	movw	r26, r20
    21dc:	c9 01       	movw	r24, r18
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
		if (ton > 1)
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	82 30       	cpi	r24, 0x02	; 2
    21e8:	91 05       	cpc	r25, r1
    21ea:	40 f0       	brcs	.+16     	; 0x21fc <PWM_Duty+0x7a>
		{
			OCR1A = ton - 1;
    21ec:	ea e4       	ldi	r30, 0x4A	; 74
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	80 83       	st	Z, r24
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <PWM_Duty+0x82>
		}
		else
		{
			OCR1A = 0;
    21fc:	ea e4       	ldi	r30, 0x4A	; 74
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	11 82       	std	Z+1, r1	; 0x01
    2202:	10 82       	st	Z, r1
		}
	}
}
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	08 95       	ret

0000221a <Func_ICU>:

static void Func_ICU(void)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
	if (flag == 0)
    2222:	80 91 ae 00 	lds	r24, 0x00AE
    2226:	88 23       	and	r24, r24
    2228:	79 f4       	brne	.+30     	; 0x2248 <Func_ICU+0x2e>
	{
		t1 = ICR1;
    222a:	e6 e4       	ldi	r30, 0x46	; 70
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	90 93 b2 00 	sts	0x00B2, r25
    2236:	80 93 b1 00 	sts	0x00B1, r24
		Timer1_InputCaptureEdge(FALLING);
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <Timer1_InputCaptureEdge>
		flag = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	80 93 ae 00 	sts	0x00AE, r24
    2246:	24 c0       	rjmp	.+72     	; 0x2290 <Func_ICU+0x76>
	}
	else if (flag == 1)
    2248:	80 91 ae 00 	lds	r24, 0x00AE
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	79 f4       	brne	.+30     	; 0x226e <Func_ICU+0x54>
	{
		t2 = ICR1;
    2250:	e6 e4       	ldi	r30, 0x46	; 70
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	90 93 b4 00 	sts	0x00B4, r25
    225c:	80 93 b3 00 	sts	0x00B3, r24
		Timer1_InputCaptureEdge(RISING);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <Timer1_InputCaptureEdge>
		flag = 2;
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	80 93 ae 00 	sts	0x00AE, r24
    226c:	11 c0       	rjmp	.+34     	; 0x2290 <Func_ICU+0x76>
	}
	else if (flag == 2)
    226e:	80 91 ae 00 	lds	r24, 0x00AE
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	69 f4       	brne	.+26     	; 0x2290 <Func_ICU+0x76>
	{
		t3 = ICR1;
    2276:	e6 e4       	ldi	r30, 0x46	; 70
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	90 93 b6 00 	sts	0x00B6, r25
    2282:	80 93 b5 00 	sts	0x00B5, r24
		Timer1_ICU_InterruptDisable();
    2286:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer1_ICU_InterruptDisable>
		flag = 3;
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	80 93 ae 00 	sts	0x00AE, r24
	}
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <Func_OVF>:

static void Func_OVF(void)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
	c++;
    229e:	80 91 af 00 	lds	r24, 0x00AF
    22a2:	90 91 b0 00 	lds	r25, 0x00B0
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	90 93 b0 00 	sts	0x00B0, r25
    22ac:	80 93 af 00 	sts	0x00AF, r24
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <PWM_Measure>:

void PWM_Measure(u32* Pfreq,u8* Pduty)
{ 
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	28 97       	sbiw	r28, 0x08	; 8
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	78 87       	std	Y+8, r23	; 0x08
    22d8:	6f 83       	std	Y+7, r22	; 0x07
	u16 ton , toff;
	c=0;
    22da:	10 92 b0 00 	sts	0x00B0, r1
    22de:	10 92 af 00 	sts	0x00AF, r1
	Timer1_ICU_SetCallBack(Func_ICU);
    22e2:	8d e0       	ldi	r24, 0x0D	; 13
    22e4:	91 e1       	ldi	r25, 0x11	; 17
    22e6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <Timer1_ICU_SetCallBack>
	Timer1_OVF_SetCallBack(Func_OVF);
    22ea:	8b e4       	ldi	r24, 0x4B	; 75
    22ec:	91 e1       	ldi	r25, 0x11	; 17
    22ee:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <Timer1_OVF_SetCallBack>
	Timer1_InputCaptureEdge(RISING);
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <Timer1_InputCaptureEdge>
	Timer1_ICU_InterruptEnable();
    22f8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Timer1_ICU_InterruptEnable>
	Timer1_OVF_InterruptEnable();
    22fc:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <Timer1_OVF_InterruptEnable>
	flag = 0;
    2300:	10 92 ae 00 	sts	0x00AE, r1
	while(flag<3);
    2304:	80 91 ae 00 	lds	r24, 0x00AE
    2308:	83 30       	cpi	r24, 0x03	; 3
    230a:	e0 f3       	brcs	.-8      	; 0x2304 <PWM_Measure+0x4e>
	ton = t2 - t1 + ((u32)c*65535);
    230c:	20 91 b3 00 	lds	r18, 0x00B3
    2310:	30 91 b4 00 	lds	r19, 0x00B4
    2314:	80 91 b1 00 	lds	r24, 0x00B1
    2318:	90 91 b2 00 	lds	r25, 0x00B2
    231c:	89 01       	movw	r16, r18
    231e:	08 1b       	sub	r16, r24
    2320:	19 0b       	sbc	r17, r25
    2322:	80 91 af 00 	lds	r24, 0x00AF
    2326:	90 91 b0 00 	lds	r25, 0x00B0
    232a:	cc 01       	movw	r24, r24
    232c:	a0 e0       	ldi	r26, 0x00	; 0
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	2f ef       	ldi	r18, 0xFF	; 255
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 cd 12 	call	0x259a	; 0x259a <__mulsi3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	80 0f       	add	r24, r16
    2346:	91 1f       	adc	r25, r17
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
	toff = t3 - t2 + + ((u32)c*65535);
    234c:	20 91 b5 00 	lds	r18, 0x00B5
    2350:	30 91 b6 00 	lds	r19, 0x00B6
    2354:	80 91 b3 00 	lds	r24, 0x00B3
    2358:	90 91 b4 00 	lds	r25, 0x00B4
    235c:	89 01       	movw	r16, r18
    235e:	08 1b       	sub	r16, r24
    2360:	19 0b       	sbc	r17, r25
    2362:	80 91 af 00 	lds	r24, 0x00AF
    2366:	90 91 b0 00 	lds	r25, 0x00B0
    236a:	cc 01       	movw	r24, r24
    236c:	a0 e0       	ldi	r26, 0x00	; 0
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	2f ef       	ldi	r18, 0xFF	; 255
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 cd 12 	call	0x259a	; 0x259a <__mulsi3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	80 0f       	add	r24, r16
    2386:	91 1f       	adc	r25, r17
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
	
	*Pfreq = ((u32)1000000 / ((u32)ton + toff));
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	9c 01       	movw	r18, r24
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	9a 81       	ldd	r25, Y+2	; 0x02
    239a:	cc 01       	movw	r24, r24
    239c:	a0 e0       	ldi	r26, 0x00	; 0
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	28 0f       	add	r18, r24
    23a2:	39 1f       	adc	r19, r25
    23a4:	4a 1f       	adc	r20, r26
    23a6:	5b 1f       	adc	r21, r27
    23a8:	80 e4       	ldi	r24, 0x40	; 64
    23aa:	92 e4       	ldi	r25, 0x42	; 66
    23ac:	af e0       	ldi	r26, 0x0F	; 15
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 0c 13 	call	0x2618	; 0x2618 <__udivmodsi4>
    23b8:	da 01       	movw	r26, r20
    23ba:	c9 01       	movw	r24, r18
    23bc:	ed 81       	ldd	r30, Y+5	; 0x05
    23be:	fe 81       	ldd	r31, Y+6	; 0x06
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	b3 83       	std	Z+3, r27	; 0x03
	*Pduty = ((u32)ton*100)/((u32)ton + toff);
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	cc 01       	movw	r24, r24
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	24 e6       	ldi	r18, 0x64	; 100
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 cd 12 	call	0x259a	; 0x259a <__mulsi3>
    23e2:	7b 01       	movw	r14, r22
    23e4:	8c 01       	movw	r16, r24
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	9c 01       	movw	r18, r24
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	cc 01       	movw	r24, r24
    23f6:	a0 e0       	ldi	r26, 0x00	; 0
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	28 0f       	add	r18, r24
    23fc:	39 1f       	adc	r19, r25
    23fe:	4a 1f       	adc	r20, r26
    2400:	5b 1f       	adc	r21, r27
    2402:	c8 01       	movw	r24, r16
    2404:	b7 01       	movw	r22, r14
    2406:	0e 94 0c 13 	call	0x2618	; 0x2618 <__udivmodsi4>
    240a:	da 01       	movw	r26, r20
    240c:	c9 01       	movw	r24, r18
    240e:	ef 81       	ldd	r30, Y+7	; 0x07
    2410:	f8 85       	ldd	r31, Y+8	; 0x08
    2412:	80 83       	st	Z, r24
}
    2414:	28 96       	adiw	r28, 0x08	; 8
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	ef 90       	pop	r14
    242c:	08 95       	ret

0000242e <Timer1_SetInterruptTime_ms>:


void Timer1_SetInterruptTime_ms (u16 time,void(*LocalFptr)(void))
{
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	00 d0       	rcall	.+0      	; 0x2438 <Timer1_SetInterruptTime_ms+0xa>
    2438:	00 d0       	rcall	.+0      	; 0x243a <Timer1_SetInterruptTime_ms+0xc>
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	7c 83       	std	Y+4, r23	; 0x04
    2444:	6b 83       	std	Y+3, r22	; 0x03
	if (time >= 1 && time <= 65)
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	e9 f0       	breq	.+58     	; 0x2488 <Timer1_SetInterruptTime_ms+0x5a>
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	82 34       	cpi	r24, 0x42	; 66
    2454:	91 05       	cpc	r25, r1
    2456:	c0 f4       	brcc	.+48     	; 0x2488 <Timer1_SetInterruptTime_ms+0x5a>
	{
		Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE , TIMER1_SCALER_8 , OCRA_DISCONNECTED , OCRB_DISCONNECTED);
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	62 e0       	ldi	r22, 0x02	; 2
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	0e 94 bc 0c 	call	0x1978	; 0x1978 <Timer1_Init>
		OCR1A = (time*1000)-1;   // time range 0 - 65ms
    2464:	ea e4       	ldi	r30, 0x4A	; 74
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	29 81       	ldd	r18, Y+1	; 0x01
    246a:	3a 81       	ldd	r19, Y+2	; 0x02
    246c:	88 ee       	ldi	r24, 0xE8	; 232
    246e:	93 e0       	ldi	r25, 0x03	; 3
    2470:	ac 01       	movw	r20, r24
    2472:	24 9f       	mul	r18, r20
    2474:	c0 01       	movw	r24, r0
    2476:	25 9f       	mul	r18, r21
    2478:	90 0d       	add	r25, r0
    247a:	34 9f       	mul	r19, r20
    247c:	90 0d       	add	r25, r0
    247e:	11 24       	eor	r1, r1
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	80 83       	st	Z, r24
    2486:	23 c0       	rjmp	.+70     	; 0x24ce <Timer1_SetInterruptTime_ms+0xa0>
	}
	else
	{
		Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE , TIMER1_SCALER_1024 , OCRA_DISCONNECTED , OCRB_DISCONNECTED);
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	65 e0       	ldi	r22, 0x05	; 5
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	0e 94 bc 0c 	call	0x1978	; 0x1978 <Timer1_Init>
		OCR1A = (((u32)time*1000)/128)-1;  
    2494:	0a e4       	ldi	r16, 0x4A	; 74
    2496:	10 e0       	ldi	r17, 0x00	; 0
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	cc 01       	movw	r24, r24
    249e:	a0 e0       	ldi	r26, 0x00	; 0
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	28 ee       	ldi	r18, 0xE8	; 232
    24a4:	33 e0       	ldi	r19, 0x03	; 3
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	0e 94 cd 12 	call	0x259a	; 0x259a <__mulsi3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	68 94       	set
    24b8:	16 f8       	bld	r1, 6
    24ba:	b6 95       	lsr	r27
    24bc:	a7 95       	ror	r26
    24be:	97 95       	ror	r25
    24c0:	87 95       	ror	r24
    24c2:	16 94       	lsr	r1
    24c4:	d1 f7       	brne	.-12     	; 0x24ba <Timer1_SetInterruptTime_ms+0x8c>
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f8 01       	movw	r30, r16
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
	}

	Timer1_OCA_SetCallBack(LocalFptr);
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <Timer1_OCA_SetCallBack>
	Timer1_OCA_InterruptEnable();
    24d6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Timer1_OCA_InterruptEnable>
}
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	08 95       	ret

000024ec <Timer1_SetInterruptTime_us>:
void Timer1_SetInterruptTime_us (u16 time,void(*LocalFptr)(void))
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <Timer1_SetInterruptTime_us+0x6>
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <Timer1_SetInterruptTime_us+0x8>
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	9a 83       	std	Y+2, r25	; 0x02
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	7c 83       	std	Y+4, r23	; 0x04
    24fe:	6b 83       	std	Y+3, r22	; 0x03
	Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE , TIMER1_SCALER_8 , OCRA_DISCONNECTED , OCRB_DISCONNECTED);
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	62 e0       	ldi	r22, 0x02	; 2
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	0e 94 bc 0c 	call	0x1978	; 0x1978 <Timer1_Init>
	OCR1A = (time)-1;
    250c:	ea e4       	ldi	r30, 0x4A	; 74
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
	Timer1_OCA_SetCallBack(LocalFptr);
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <Timer1_OCA_SetCallBack>
	Timer1_OCA_InterruptEnable();
    2522:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Timer1_OCA_InterruptEnable>
}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <sEos_ISR>:
#include "TIME.h"
#include "SSD.h"


void sEos_ISR(void)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	static u8 i = 0;
	SSD_Update();
    253c:	0e 94 8b 06 	call	0xd16	; 0xd16 <SSD_Update>

	i++;
    2540:	80 91 b7 00 	lds	r24, 0x00B7
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	80 93 b7 00 	sts	0x00B7, r24
	if(i%4 == 0)
    254a:	80 91 b7 00 	lds	r24, 0x00B7
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	83 70       	andi	r24, 0x03	; 3
    2554:	90 70       	andi	r25, 0x00	; 0
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	31 f4       	brne	.+12     	; 0x2566 <sEos_ISR+0x32>
	{
		SW_Update();
    255a:	0e 94 6f 0a 	call	0x14de	; 0x14de <SW_Update>
		TIME_Update();
    255e:	0e 94 89 0a 	call	0x1512	; 0x1512 <TIME_Update>
		i = 0;
    2562:	10 92 b7 00 	sts	0x00B7, r1

	}
}
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <main>:

int main(void)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62

    DIO_Init();
    2574:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_Init>

    /************ First way using Timer1 directly and sEos_ISR Function *************/
    /*Enable global interrupts*/
    sei();
    2578:	78 94       	sei

    /* set interrupt each 5 ms */
	Timer1_SetInterruptTime_ms(5,&sEos_ISR);
    257a:	2a e9       	ldi	r18, 0x9A	; 154
    257c:	32 e1       	ldi	r19, 0x12	; 18
    257e:	85 e0       	ldi	r24, 0x05	; 5
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	b9 01       	movw	r22, r18
    2584:	0e 94 17 12 	call	0x242e	; 0x242e <Timer1_SetInterruptTime_ms>

	/* set sleep mode to idle */
//	When the SM2:0 bits are written to 000, the SLEEP instruction makes the MCU enter Idle mode, stopping the CPU
//	but allowing SPI, USART, Analog Comparator, ADC, Two-wire Serial Interface, Timer/Counters, Watchdog, and
//	the interrupt system to continue operating.
	SELECT_SLEEP_MODE(IDLE_MODE);
    2588:	a5 e5       	ldi	r26, 0x55	; 85
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e5 e5       	ldi	r30, 0x55	; 85
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	80 68       	ori	r24, 0x80	; 128
    2594:	8c 93       	st	X, r24

    //SELECT_SLEEP_MODE(IDLE_MODE); /* for test sleep mode */

    while (1) 
    {
    	MCU_GTS();
    2596:	88 95       	sleep
    2598:	fe cf       	rjmp	.-4      	; 0x2596 <main+0x2a>

0000259a <__mulsi3>:
    259a:	62 9f       	mul	r22, r18
    259c:	d0 01       	movw	r26, r0
    259e:	73 9f       	mul	r23, r19
    25a0:	f0 01       	movw	r30, r0
    25a2:	82 9f       	mul	r24, r18
    25a4:	e0 0d       	add	r30, r0
    25a6:	f1 1d       	adc	r31, r1
    25a8:	64 9f       	mul	r22, r20
    25aa:	e0 0d       	add	r30, r0
    25ac:	f1 1d       	adc	r31, r1
    25ae:	92 9f       	mul	r25, r18
    25b0:	f0 0d       	add	r31, r0
    25b2:	83 9f       	mul	r24, r19
    25b4:	f0 0d       	add	r31, r0
    25b6:	74 9f       	mul	r23, r20
    25b8:	f0 0d       	add	r31, r0
    25ba:	65 9f       	mul	r22, r21
    25bc:	f0 0d       	add	r31, r0
    25be:	99 27       	eor	r25, r25
    25c0:	72 9f       	mul	r23, r18
    25c2:	b0 0d       	add	r27, r0
    25c4:	e1 1d       	adc	r30, r1
    25c6:	f9 1f       	adc	r31, r25
    25c8:	63 9f       	mul	r22, r19
    25ca:	b0 0d       	add	r27, r0
    25cc:	e1 1d       	adc	r30, r1
    25ce:	f9 1f       	adc	r31, r25
    25d0:	bd 01       	movw	r22, r26
    25d2:	cf 01       	movw	r24, r30
    25d4:	11 24       	eor	r1, r1
    25d6:	08 95       	ret

000025d8 <__udivmodqi4>:
    25d8:	99 1b       	sub	r25, r25
    25da:	79 e0       	ldi	r23, 0x09	; 9
    25dc:	04 c0       	rjmp	.+8      	; 0x25e6 <__udivmodqi4_ep>

000025de <__udivmodqi4_loop>:
    25de:	99 1f       	adc	r25, r25
    25e0:	96 17       	cp	r25, r22
    25e2:	08 f0       	brcs	.+2      	; 0x25e6 <__udivmodqi4_ep>
    25e4:	96 1b       	sub	r25, r22

000025e6 <__udivmodqi4_ep>:
    25e6:	88 1f       	adc	r24, r24
    25e8:	7a 95       	dec	r23
    25ea:	c9 f7       	brne	.-14     	; 0x25de <__udivmodqi4_loop>
    25ec:	80 95       	com	r24
    25ee:	08 95       	ret

000025f0 <__udivmodhi4>:
    25f0:	aa 1b       	sub	r26, r26
    25f2:	bb 1b       	sub	r27, r27
    25f4:	51 e1       	ldi	r21, 0x11	; 17
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <__udivmodhi4_ep>

000025f8 <__udivmodhi4_loop>:
    25f8:	aa 1f       	adc	r26, r26
    25fa:	bb 1f       	adc	r27, r27
    25fc:	a6 17       	cp	r26, r22
    25fe:	b7 07       	cpc	r27, r23
    2600:	10 f0       	brcs	.+4      	; 0x2606 <__udivmodhi4_ep>
    2602:	a6 1b       	sub	r26, r22
    2604:	b7 0b       	sbc	r27, r23

00002606 <__udivmodhi4_ep>:
    2606:	88 1f       	adc	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	5a 95       	dec	r21
    260c:	a9 f7       	brne	.-22     	; 0x25f8 <__udivmodhi4_loop>
    260e:	80 95       	com	r24
    2610:	90 95       	com	r25
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	08 95       	ret

00002618 <__udivmodsi4>:
    2618:	a1 e2       	ldi	r26, 0x21	; 33
    261a:	1a 2e       	mov	r1, r26
    261c:	aa 1b       	sub	r26, r26
    261e:	bb 1b       	sub	r27, r27
    2620:	fd 01       	movw	r30, r26
    2622:	0d c0       	rjmp	.+26     	; 0x263e <__udivmodsi4_ep>

00002624 <__udivmodsi4_loop>:
    2624:	aa 1f       	adc	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	ee 1f       	adc	r30, r30
    262a:	ff 1f       	adc	r31, r31
    262c:	a2 17       	cp	r26, r18
    262e:	b3 07       	cpc	r27, r19
    2630:	e4 07       	cpc	r30, r20
    2632:	f5 07       	cpc	r31, r21
    2634:	20 f0       	brcs	.+8      	; 0x263e <__udivmodsi4_ep>
    2636:	a2 1b       	sub	r26, r18
    2638:	b3 0b       	sbc	r27, r19
    263a:	e4 0b       	sbc	r30, r20
    263c:	f5 0b       	sbc	r31, r21

0000263e <__udivmodsi4_ep>:
    263e:	66 1f       	adc	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	88 1f       	adc	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	1a 94       	dec	r1
    2648:	69 f7       	brne	.-38     	; 0x2624 <__udivmodsi4_loop>
    264a:	60 95       	com	r22
    264c:	70 95       	com	r23
    264e:	80 95       	com	r24
    2650:	90 95       	com	r25
    2652:	9b 01       	movw	r18, r22
    2654:	ac 01       	movw	r20, r24
    2656:	bd 01       	movw	r22, r26
    2658:	cf 01       	movw	r24, r30
    265a:	08 95       	ret

0000265c <_exit>:
    265c:	f8 94       	cli

0000265e <__stop_program>:
    265e:	ff cf       	rjmp	.-2      	; 0x265e <__stop_program>
