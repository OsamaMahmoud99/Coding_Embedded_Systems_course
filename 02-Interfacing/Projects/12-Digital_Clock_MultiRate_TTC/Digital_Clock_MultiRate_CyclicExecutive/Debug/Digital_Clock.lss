
Digital_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00003230  000032c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800090  00800090  000032f4  2**0
                  ALLOC
  3 .stab         00002e74  00000000  00000000  000032f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e7e  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000adca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__vector_6>
      1c:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__vector_7>
      20:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__vector_8>
      24:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__vector_9>
      28:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__vector_10>
      2c:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 17 	call	0x2fda	; 0x2fda <main>
      8a:	0c 94 16 19 	jmp	0x322c	; 0x322c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 18 	jmp	0x31be	; 0x31be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 19 	jmp	0x320e	; 0x320e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 19 	jmp	0x320e	; 0x320e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 18 	jmp	0x31be	; 0x31be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 07 19 	jmp	0x320e	; 0x320e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 07 19 	jmp	0x320e	; 0x320e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 07 19 	jmp	0x320e	; 0x320e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_InitPin>:

#include "DIO_Interface.h"
#include "DIO_Private.h"

static void DIO_InitPin(DIO_Pin_type pin , DIO_PinStatus_type status)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port = pin/8;
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	86 95       	lsr	r24
     b62:	86 95       	lsr	r24
     b64:	86 95       	lsr	r24
     b66:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num  = pin % 8;
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	87 70       	andi	r24, 0x07	; 7
     b6c:	89 83       	std	Y+1, r24	; 0x01
	switch(status)
     b6e:	8c 81       	ldd	r24, Y+4	; 0x04
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	3c 87       	std	Y+12, r19	; 0x0c
     b76:	2b 87       	std	Y+11, r18	; 0x0b
     b78:	8b 85       	ldd	r24, Y+11	; 0x0b
     b7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	91 05       	cpc	r25, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <DIO_InitPin+0x3e>
     b82:	c9 c0       	rjmp	.+402    	; 0xd16 <DIO_InitPin+0x1d0>
     b84:	2b 85       	ldd	r18, Y+11	; 0x0b
     b86:	3c 85       	ldd	r19, Y+12	; 0x0c
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <DIO_InitPin+0x4a>
     b8e:	85 c1       	rjmp	.+778    	; 0xe9a <DIO_InitPin+0x354>
     b90:	8b 85       	ldd	r24, Y+11	; 0x0b
     b92:	9c 85       	ldd	r25, Y+12	; 0x0c
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	09 f0       	breq	.+2      	; 0xb9a <DIO_InitPin+0x54>
     b98:	3d c2       	rjmp	.+1146   	; 0x1014 <DIO_InitPin+0x4ce>
	{
		case OUTPUT:
		switch(port)
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	3a 87       	std	Y+10, r19	; 0x0a
     ba2:	29 87       	std	Y+9, r18	; 0x09
     ba4:	89 85       	ldd	r24, Y+9	; 0x09
     ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <DIO_InitPin+0x6a>
     bae:	3e c0       	rjmp	.+124    	; 0xc2c <DIO_InitPin+0xe6>
     bb0:	29 85       	ldd	r18, Y+9	; 0x09
     bb2:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb4:	22 30       	cpi	r18, 0x02	; 2
     bb6:	31 05       	cpc	r19, r1
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <DIO_InitPin+0x7e>
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	71 f0       	breq	.+28     	; 0xbde <DIO_InitPin+0x98>
     bc2:	28 c2       	rjmp	.+1104   	; 0x1014 <DIO_InitPin+0x4ce>
     bc4:	29 85       	ldd	r18, Y+9	; 0x09
     bc6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bc8:	22 30       	cpi	r18, 0x02	; 2
     bca:	31 05       	cpc	r19, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <DIO_InitPin+0x8a>
     bce:	55 c0       	rjmp	.+170    	; 0xc7a <DIO_InitPin+0x134>
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <DIO_InitPin+0x96>
     bda:	76 c0       	rjmp	.+236    	; 0xcc8 <DIO_InitPin+0x182>
     bdc:	1b c2       	rjmp	.+1078   	; 0x1014 <DIO_InitPin+0x4ce>
		{
			case PA:
			SET_BIT(DDRA , pin_num);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_InitPin+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	2a 95       	dec	r18
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_InitPin+0xb0>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
			CLR_BIT(PORTA , pin_num);
     c02:	ab e3       	ldi	r26, 0x3B	; 59
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	eb e3       	ldi	r30, 0x3B	; 59
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	48 2f       	mov	r20, r24
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 2e       	mov	r0, r18
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_InitPin+0xda>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_InitPin+0xd6>
     c24:	80 95       	com	r24
     c26:	84 23       	and	r24, r20
     c28:	8c 93       	st	X, r24
     c2a:	f4 c1       	rjmp	.+1000   	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PB:
			SET_BIT(DDRB , pin_num);
     c2c:	a7 e3       	ldi	r26, 0x37	; 55
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e7 e3       	ldi	r30, 0x37	; 55
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	48 2f       	mov	r20, r24
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <DIO_InitPin+0x102>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	2a 95       	dec	r18
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <DIO_InitPin+0xfe>
     c4c:	84 2b       	or	r24, r20
     c4e:	8c 93       	st	X, r24
			CLR_BIT(PORTB , pin_num);
     c50:	a8 e3       	ldi	r26, 0x38	; 56
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e8 e3       	ldi	r30, 0x38	; 56
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	48 2f       	mov	r20, r24
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 2e       	mov	r0, r18
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_InitPin+0x128>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_InitPin+0x124>
     c72:	80 95       	com	r24
     c74:	84 23       	and	r24, r20
     c76:	8c 93       	st	X, r24
     c78:	cd c1       	rjmp	.+922    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PC:
			SET_BIT(DDRC , pin_num);
     c7a:	a4 e3       	ldi	r26, 0x34	; 52
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e4 e3       	ldi	r30, 0x34	; 52
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	48 2f       	mov	r20, r24
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <DIO_InitPin+0x150>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	2a 95       	dec	r18
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <DIO_InitPin+0x14c>
     c9a:	84 2b       	or	r24, r20
     c9c:	8c 93       	st	X, r24
			CLR_BIT(PORTC , pin_num);
     c9e:	a5 e3       	ldi	r26, 0x35	; 53
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e5 e3       	ldi	r30, 0x35	; 53
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_InitPin+0x176>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_InitPin+0x172>
     cc0:	80 95       	com	r24
     cc2:	84 23       	and	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	a6 c1       	rjmp	.+844    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PD:
			SET_BIT(DDRD , pin_num);
     cc8:	a1 e3       	ldi	r26, 0x31	; 49
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e1 e3       	ldi	r30, 0x31	; 49
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DIO_InitPin+0x19e>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	2a 95       	dec	r18
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DIO_InitPin+0x19a>
     ce8:	84 2b       	or	r24, r20
     cea:	8c 93       	st	X, r24
			CLR_BIT(PORTD , pin_num);
     cec:	a2 e3       	ldi	r26, 0x32	; 50
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e2 e3       	ldi	r30, 0x32	; 50
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_InitPin+0x1c4>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_InitPin+0x1c0>
     d0e:	80 95       	com	r24
     d10:	84 23       	and	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	7f c1       	rjmp	.+766    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
		}
		break;
		case INFREE:
		switch(port)
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	38 87       	std	Y+8, r19	; 0x08
     d1e:	2f 83       	std	Y+7, r18	; 0x07
     d20:	8f 81       	ldd	r24, Y+7	; 0x07
     d22:	98 85       	ldd	r25, Y+8	; 0x08
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	09 f4       	brne	.+2      	; 0xd2c <DIO_InitPin+0x1e6>
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <DIO_InitPin+0x264>
     d2c:	2f 81       	ldd	r18, Y+7	; 0x07
     d2e:	38 85       	ldd	r19, Y+8	; 0x08
     d30:	22 30       	cpi	r18, 0x02	; 2
     d32:	31 05       	cpc	r19, r1
     d34:	2c f4       	brge	.+10     	; 0xd40 <DIO_InitPin+0x1fa>
     d36:	8f 81       	ldd	r24, Y+7	; 0x07
     d38:	98 85       	ldd	r25, Y+8	; 0x08
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	71 f0       	breq	.+28     	; 0xd5a <DIO_InitPin+0x214>
     d3e:	6a c1       	rjmp	.+724    	; 0x1014 <DIO_InitPin+0x4ce>
     d40:	2f 81       	ldd	r18, Y+7	; 0x07
     d42:	38 85       	ldd	r19, Y+8	; 0x08
     d44:	22 30       	cpi	r18, 0x02	; 2
     d46:	31 05       	cpc	r19, r1
     d48:	09 f4       	brne	.+2      	; 0xd4c <DIO_InitPin+0x206>
     d4a:	57 c0       	rjmp	.+174    	; 0xdfa <DIO_InitPin+0x2b4>
     d4c:	8f 81       	ldd	r24, Y+7	; 0x07
     d4e:	98 85       	ldd	r25, Y+8	; 0x08
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_InitPin+0x212>
     d56:	79 c0       	rjmp	.+242    	; 0xe4a <DIO_InitPin+0x304>
     d58:	5d c1       	rjmp	.+698    	; 0x1014 <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA , pin_num);
     d5a:	aa e3       	ldi	r26, 0x3A	; 58
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ea e3       	ldi	r30, 0x3A	; 58
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_InitPin+0x230>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	2a 95       	dec	r18
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_InitPin+0x22c>
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	8c 93       	st	X, r24
			CLR_BIT(PORTA , pin_num);
     d80:	ab e3       	ldi	r26, 0x3B	; 59
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	eb e3       	ldi	r30, 0x3B	; 59
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_InitPin+0x258>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_InitPin+0x254>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	35 c1       	rjmp	.+618    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB , pin_num);
     daa:	a7 e3       	ldi	r26, 0x37	; 55
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e7 e3       	ldi	r30, 0x37	; 55
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_InitPin+0x280>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	2a 95       	dec	r18
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_InitPin+0x27c>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
			CLR_BIT(PORTB , pin_num);
     dd0:	a8 e3       	ldi	r26, 0x38	; 56
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e8 e3       	ldi	r30, 0x38	; 56
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_InitPin+0x2a8>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_InitPin+0x2a4>
     df2:	80 95       	com	r24
     df4:	84 23       	and	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	0d c1       	rjmp	.+538    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PC:
		    CLR_BIT(DDRC , pin_num);
     dfa:	a4 e3       	ldi	r26, 0x34	; 52
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e4 e3       	ldi	r30, 0x34	; 52
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_InitPin+0x2d0>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	2a 95       	dec	r18
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_InitPin+0x2cc>
     e1a:	80 95       	com	r24
     e1c:	84 23       	and	r24, r20
     e1e:	8c 93       	st	X, r24
			CLR_BIT(PORTC , pin_num);
     e20:	a5 e3       	ldi	r26, 0x35	; 53
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e5 e3       	ldi	r30, 0x35	; 53
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_InitPin+0x2f8>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_InitPin+0x2f4>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	e5 c0       	rjmp	.+458    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD , pin_num);
     e4a:	a1 e3       	ldi	r26, 0x31	; 49
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_InitPin+0x320>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	2a 95       	dec	r18
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_InitPin+0x31c>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
			CLR_BIT(PORTD , pin_num);
     e70:	a2 e3       	ldi	r26, 0x32	; 50
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e2 e3       	ldi	r30, 0x32	; 50
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_InitPin+0x348>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_InitPin+0x344>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	bd c0       	rjmp	.+378    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
		}
		break;
		case INPULLUP:
		switch(port)
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3e 83       	std	Y+6, r19	; 0x06
     ea2:	2d 83       	std	Y+5, r18	; 0x05
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <DIO_InitPin+0x36a>
     eae:	3e c0       	rjmp	.+124    	; 0xf2c <DIO_InitPin+0x3e6>
     eb0:	2d 81       	ldd	r18, Y+5	; 0x05
     eb2:	3e 81       	ldd	r19, Y+6	; 0x06
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	2c f4       	brge	.+10     	; 0xec4 <DIO_InitPin+0x37e>
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	71 f0       	breq	.+28     	; 0xede <DIO_InitPin+0x398>
     ec2:	a8 c0       	rjmp	.+336    	; 0x1014 <DIO_InitPin+0x4ce>
     ec4:	2d 81       	ldd	r18, Y+5	; 0x05
     ec6:	3e 81       	ldd	r19, Y+6	; 0x06
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <DIO_InitPin+0x38a>
     ece:	55 c0       	rjmp	.+170    	; 0xf7a <DIO_InitPin+0x434>
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <DIO_InitPin+0x396>
     eda:	76 c0       	rjmp	.+236    	; 0xfc8 <DIO_InitPin+0x482>
     edc:	9b c0       	rjmp	.+310    	; 0x1014 <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA , pin_num);
     ede:	aa e3       	ldi	r26, 0x3A	; 58
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e3       	ldi	r30, 0x3A	; 58
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_InitPin+0x3b4>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	2a 95       	dec	r18
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_InitPin+0x3b0>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
			SET_BIT(PORTA , pin_num);
     f04:	ab e3       	ldi	r26, 0x3B	; 59
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e3       	ldi	r30, 0x3B	; 59
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_InitPin+0x3dc>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_InitPin+0x3d8>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	74 c0       	rjmp	.+232    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB , pin_num);
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_InitPin+0x402>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	2a 95       	dec	r18
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_InitPin+0x3fe>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
			SET_BIT(PORTB , pin_num);
     f52:	a8 e3       	ldi	r26, 0x38	; 56
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e8 e3       	ldi	r30, 0x38	; 56
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_InitPin+0x42a>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_InitPin+0x426>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	4d c0       	rjmp	.+154    	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC , pin_num);
     f7a:	a4 e3       	ldi	r26, 0x34	; 52
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e4 e3       	ldi	r30, 0x34	; 52
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_InitPin+0x450>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	2a 95       	dec	r18
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_InitPin+0x44c>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
			SET_BIT(PORTC , pin_num);
     fa0:	a5 e3       	ldi	r26, 0x35	; 53
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e3       	ldi	r30, 0x35	; 53
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_InitPin+0x478>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_InitPin+0x474>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	26 c0       	rjmp	.+76     	; 0x1014 <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD , pin_num);
     fc8:	a1 e3       	ldi	r26, 0x31	; 49
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e3       	ldi	r30, 0x31	; 49
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_InitPin+0x49e>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	2a 95       	dec	r18
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_InitPin+0x49a>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
			SET_BIT(PORTD , pin_num);
     fee:	a2 e3       	ldi	r26, 0x32	; 50
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e2 e3       	ldi	r30, 0x32	; 50
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_InitPin+0x4c6>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_InitPin+0x4c2>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    1014:	2c 96       	adiw	r28, 0x0c	; 12
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <DIO_Init>:


void DIO_Init(void)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type counter;
	for (counter=PINA0; counter<TOTAL_PINS; ++counter)
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	0e c0       	rjmp	.+28     	; 0x1050 <DIO_Init+0x2a>
	{
		DIO_InitPin(counter , PinsStatusArray[counter]);
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	fc 01       	movw	r30, r24
    103c:	e1 59       	subi	r30, 0x91	; 145
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	90 81       	ld	r25, Z
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	69 2f       	mov	r22, r25
    1046:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_type counter;
	for (counter=PINA0; counter<TOTAL_PINS; ++counter)
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	8f 5f       	subi	r24, 0xFF	; 255
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 32       	cpi	r24, 0x20	; 32
    1054:	78 f3       	brcs	.-34     	; 0x1034 <DIO_Init+0xe>
	{
		DIO_InitPin(counter , PinsStatusArray[counter]);
	}
}
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	28 97       	sbiw	r28, 0x08	; 8
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	8b 83       	std	Y+3, r24	; 0x03
    1074:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port = pin/8;
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	86 95       	lsr	r24
    107a:	86 95       	lsr	r24
    107c:	86 95       	lsr	r24
    107e:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num  = pin % 8;
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	87 70       	andi	r24, 0x07	; 7
    1084:	89 83       	std	Y+1, r24	; 0x01
	
	if (volt == LOW)
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	88 23       	and	r24, r24
    108a:	09 f0       	breq	.+2      	; 0x108e <DIO_WritePin+0x30>
    108c:	74 c0       	rjmp	.+232    	; 0x1176 <DIO_WritePin+0x118>
	{
		switch(port)
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	38 87       	std	Y+8, r19	; 0x08
    1096:	2f 83       	std	Y+7, r18	; 0x07
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	59 f1       	breq	.+86     	; 0x10f8 <DIO_WritePin+0x9a>
    10a2:	2f 81       	ldd	r18, Y+7	; 0x07
    10a4:	38 85       	ldd	r19, Y+8	; 0x08
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <DIO_WritePin+0x58>
    10ac:	8f 81       	ldd	r24, Y+7	; 0x07
    10ae:	98 85       	ldd	r25, Y+8	; 0x08
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	69 f0       	breq	.+26     	; 0x10ce <DIO_WritePin+0x70>
    10b4:	d2 c0       	rjmp	.+420    	; 0x125a <DIO_WritePin+0x1fc>
    10b6:	2f 81       	ldd	r18, Y+7	; 0x07
    10b8:	38 85       	ldd	r19, Y+8	; 0x08
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	89 f1       	breq	.+98     	; 0x1122 <DIO_WritePin+0xc4>
    10c0:	8f 81       	ldd	r24, Y+7	; 0x07
    10c2:	98 85       	ldd	r25, Y+8	; 0x08
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <DIO_WritePin+0x6e>
    10ca:	40 c0       	rjmp	.+128    	; 0x114c <DIO_WritePin+0xee>
    10cc:	c6 c0       	rjmp	.+396    	; 0x125a <DIO_WritePin+0x1fc>
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
    10ce:	ab e3       	ldi	r26, 0x3B	; 59
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	eb e3       	ldi	r30, 0x3B	; 59
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_WritePin+0x8e>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_WritePin+0x8a>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	b1 c0       	rjmp	.+354    	; 0x125a <DIO_WritePin+0x1fc>
			break;
			case PB:
			CLR_BIT(PORTB,pin_num);
    10f8:	a8 e3       	ldi	r26, 0x38	; 56
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e8 e3       	ldi	r30, 0x38	; 56
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_WritePin+0xb8>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_WritePin+0xb4>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	9c c0       	rjmp	.+312    	; 0x125a <DIO_WritePin+0x1fc>
			break;
			case PC:
			CLR_BIT(PORTC,pin_num);
    1122:	a5 e3       	ldi	r26, 0x35	; 53
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e3       	ldi	r30, 0x35	; 53
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_WritePin+0xe2>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_WritePin+0xde>
    1144:	80 95       	com	r24
    1146:	84 23       	and	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	87 c0       	rjmp	.+270    	; 0x125a <DIO_WritePin+0x1fc>
			break;
			case PD:
			CLR_BIT(PORTD,pin_num);
    114c:	a2 e3       	ldi	r26, 0x32	; 50
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e2 e3       	ldi	r30, 0x32	; 50
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_WritePin+0x10c>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_WritePin+0x108>
    116e:	80 95       	com	r24
    1170:	84 23       	and	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	72 c0       	rjmp	.+228    	; 0x125a <DIO_WritePin+0x1fc>
			break;
		}
	}
	else if (volt == HIGH)
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	09 f0       	breq	.+2      	; 0x117e <DIO_WritePin+0x120>
    117c:	6e c0       	rjmp	.+220    	; 0x125a <DIO_WritePin+0x1fc>
	{
		switch(port)
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3e 83       	std	Y+6, r19	; 0x06
    1186:	2d 83       	std	Y+5, r18	; 0x05
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	49 f1       	breq	.+82     	; 0x11e4 <DIO_WritePin+0x186>
    1192:	2d 81       	ldd	r18, Y+5	; 0x05
    1194:	3e 81       	ldd	r19, Y+6	; 0x06
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	2c f4       	brge	.+10     	; 0x11a6 <DIO_WritePin+0x148>
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	61 f0       	breq	.+24     	; 0x11bc <DIO_WritePin+0x15e>
    11a4:	5a c0       	rjmp	.+180    	; 0x125a <DIO_WritePin+0x1fc>
    11a6:	2d 81       	ldd	r18, Y+5	; 0x05
    11a8:	3e 81       	ldd	r19, Y+6	; 0x06
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	71 f1       	breq	.+92     	; 0x120c <DIO_WritePin+0x1ae>
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	e9 f1       	breq	.+122    	; 0x1234 <DIO_WritePin+0x1d6>
    11ba:	4f c0       	rjmp	.+158    	; 0x125a <DIO_WritePin+0x1fc>
		{
			case PA:
			SET_BIT(PORTA,pin_num);
    11bc:	ab e3       	ldi	r26, 0x3B	; 59
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e3       	ldi	r30, 0x3B	; 59
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_WritePin+0x17c>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_WritePin+0x178>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	3b c0       	rjmp	.+118    	; 0x125a <DIO_WritePin+0x1fc>
			break;
			case PB:
			SET_BIT(PORTB,pin_num);
    11e4:	a8 e3       	ldi	r26, 0x38	; 56
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e8 e3       	ldi	r30, 0x38	; 56
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_WritePin+0x1a4>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_WritePin+0x1a0>
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	27 c0       	rjmp	.+78     	; 0x125a <DIO_WritePin+0x1fc>
			break;
			case PC:
			SET_BIT(PORTC,pin_num);
    120c:	a5 e3       	ldi	r26, 0x35	; 53
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e3       	ldi	r30, 0x35	; 53
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_WritePin+0x1cc>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_WritePin+0x1c8>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	13 c0       	rjmp	.+38     	; 0x125a <DIO_WritePin+0x1fc>
			break;
			case PD:
			SET_BIT(PORTD,pin_num);
    1234:	a2 e3       	ldi	r26, 0x32	; 50
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e2 e3       	ldi	r30, 0x32	; 50
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_WritePin+0x1f4>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_WritePin+0x1f0>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
			break;
		}
	}
}
    125a:	28 96       	adiw	r28, 0x08	; 8
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <DIO_ReadPin>:

DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <DIO_ReadPin+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <DIO_ReadPin+0x8>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <DIO_ReadPin+0xa>
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	8c 83       	std	Y+4, r24	; 0x04
	DIO_PinVoltage_type volt = LOW;
    127c:	1b 82       	std	Y+3, r1	; 0x03
	DIO_Port_type port = pin/8;
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	86 95       	lsr	r24
    1282:	86 95       	lsr	r24
    1284:	86 95       	lsr	r24
    1286:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num  = pin % 8;
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	87 70       	andi	r24, 0x07	; 7
    128c:	89 83       	std	Y+1, r24	; 0x01
	
	switch (port)
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3e 83       	std	Y+6, r19	; 0x06
    1296:	2d 83       	std	Y+5, r18	; 0x05
    1298:	4d 81       	ldd	r20, Y+5	; 0x05
    129a:	5e 81       	ldd	r21, Y+6	; 0x06
    129c:	41 30       	cpi	r20, 0x01	; 1
    129e:	51 05       	cpc	r21, r1
    12a0:	41 f1       	breq	.+80     	; 0x12f2 <DIO_ReadPin+0x86>
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	34 f4       	brge	.+12     	; 0x12b8 <DIO_ReadPin+0x4c>
    12ac:	2d 81       	ldd	r18, Y+5	; 0x05
    12ae:	3e 81       	ldd	r19, Y+6	; 0x06
    12b0:	21 15       	cp	r18, r1
    12b2:	31 05       	cpc	r19, r1
    12b4:	61 f0       	breq	.+24     	; 0x12ce <DIO_ReadPin+0x62>
    12b6:	52 c0       	rjmp	.+164    	; 0x135c <DIO_ReadPin+0xf0>
    12b8:	4d 81       	ldd	r20, Y+5	; 0x05
    12ba:	5e 81       	ldd	r21, Y+6	; 0x06
    12bc:	42 30       	cpi	r20, 0x02	; 2
    12be:	51 05       	cpc	r21, r1
    12c0:	51 f1       	breq	.+84     	; 0x1316 <DIO_ReadPin+0xaa>
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	b9 f1       	breq	.+110    	; 0x133a <DIO_ReadPin+0xce>
    12cc:	47 c0       	rjmp	.+142    	; 0x135c <DIO_ReadPin+0xf0>
	{
		case PA:
		volt = READ_BIT(PINA,pin_num);
    12ce:	e9 e3       	ldi	r30, 0x39	; 57
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a9 01       	movw	r20, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_ReadPin+0x7a>
    12e2:	55 95       	asr	r21
    12e4:	47 95       	ror	r20
    12e6:	8a 95       	dec	r24
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_ReadPin+0x76>
    12ea:	ca 01       	movw	r24, r20
    12ec:	81 70       	andi	r24, 0x01	; 1
    12ee:	8b 83       	std	Y+3, r24	; 0x03
    12f0:	35 c0       	rjmp	.+106    	; 0x135c <DIO_ReadPin+0xf0>
		break;
		case PB:
		volt = READ_BIT(PINB,pin_num);
    12f2:	e6 e3       	ldi	r30, 0x36	; 54
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_ReadPin+0x9e>
    1306:	55 95       	asr	r21
    1308:	47 95       	ror	r20
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_ReadPin+0x9a>
    130e:	ca 01       	movw	r24, r20
    1310:	81 70       	andi	r24, 0x01	; 1
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	23 c0       	rjmp	.+70     	; 0x135c <DIO_ReadPin+0xf0>
		break;
		case PC:
		volt = READ_BIT(PINC,pin_num);
    1316:	e3 e3       	ldi	r30, 0x33	; 51
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_ReadPin+0xc2>
    132a:	55 95       	asr	r21
    132c:	47 95       	ror	r20
    132e:	8a 95       	dec	r24
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_ReadPin+0xbe>
    1332:	ca 01       	movw	r24, r20
    1334:	81 70       	andi	r24, 0x01	; 1
    1336:	8b 83       	std	Y+3, r24	; 0x03
    1338:	11 c0       	rjmp	.+34     	; 0x135c <DIO_ReadPin+0xf0>
		break;
		case PD:
		volt = READ_BIT(PIND,pin_num);
    133a:	e0 e3       	ldi	r30, 0x30	; 48
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_ReadPin+0xe6>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_ReadPin+0xe2>
    1356:	ca 01       	movw	r24, r20
    1358:	81 70       	andi	r24, 0x01	; 1
    135a:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}
	return volt;
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    135e:	26 96       	adiw	r28, 0x06	; 6
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_TogglePin+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <DIO_TogglePin+0x8>
    1378:	0f 92       	push	r0
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port = pin/8;
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	86 95       	lsr	r24
    1384:	86 95       	lsr	r24
    1386:	86 95       	lsr	r24
    1388:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num  = pin % 8;
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	87 70       	andi	r24, 0x07	; 7
    138e:	89 83       	std	Y+1, r24	; 0x01
	switch (port)
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3d 83       	std	Y+5, r19	; 0x05
    1398:	2c 83       	std	Y+4, r18	; 0x04
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	91 05       	cpc	r25, r1
    13a2:	49 f1       	breq	.+82     	; 0x13f6 <DIO_TogglePin+0x86>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <DIO_TogglePin+0x48>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	61 f0       	breq	.+24     	; 0x13ce <DIO_TogglePin+0x5e>
    13b6:	5a c0       	rjmp	.+180    	; 0x146c <DIO_TogglePin+0xfc>
    13b8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ba:	3d 81       	ldd	r19, Y+5	; 0x05
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	71 f1       	breq	.+92     	; 0x141e <DIO_TogglePin+0xae>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	e9 f1       	breq	.+122    	; 0x1446 <DIO_TogglePin+0xd6>
    13cc:	4f c0       	rjmp	.+158    	; 0x146c <DIO_TogglePin+0xfc>
	{
		case PA:
		TOG_BIT(PORTA,pin_num);
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_TogglePin+0x7c>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_TogglePin+0x78>
    13f0:	84 27       	eor	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	3b c0       	rjmp	.+118    	; 0x146c <DIO_TogglePin+0xfc>
		break;
		case PB:
		TOG_BIT(PORTB,pin_num);
    13f6:	a8 e3       	ldi	r26, 0x38	; 56
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e8 e3       	ldi	r30, 0x38	; 56
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_TogglePin+0xa4>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_TogglePin+0xa0>
    1418:	84 27       	eor	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	27 c0       	rjmp	.+78     	; 0x146c <DIO_TogglePin+0xfc>
		break;
		case PC:
		TOG_BIT(PORTC,pin_num);
    141e:	a5 e3       	ldi	r26, 0x35	; 53
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e3       	ldi	r30, 0x35	; 53
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_TogglePin+0xcc>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_TogglePin+0xc8>
    1440:	84 27       	eor	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	13 c0       	rjmp	.+38     	; 0x146c <DIO_TogglePin+0xfc>
		break;
		case PD:
		TOG_BIT(PORTD,pin_num);
    1446:	a2 e3       	ldi	r26, 0x32	; 50
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_TogglePin+0xf4>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_TogglePin+0xf0>
    1468:	84 27       	eor	r24, r20
    146a:	8c 93       	st	X, r24
		break;
	}
}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <DIO_WritePort>:

void DIO_WritePort(DIO_Port_type port , u8 Value)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <DIO_WritePort+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <DIO_WritePort+0x8>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	3c 83       	std	Y+4, r19	; 0x04
    1494:	2b 83       	std	Y+3, r18	; 0x03
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	d1 f0       	breq	.+52     	; 0x14d4 <DIO_WritePort+0x58>
    14a0:	2b 81       	ldd	r18, Y+3	; 0x03
    14a2:	3c 81       	ldd	r19, Y+4	; 0x04
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <DIO_WritePort+0x38>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	61 f0       	breq	.+24     	; 0x14ca <DIO_WritePort+0x4e>
    14b2:	1e c0       	rjmp	.+60     	; 0x14f0 <DIO_WritePort+0x74>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	22 30       	cpi	r18, 0x02	; 2
    14ba:	31 05       	cpc	r19, r1
    14bc:	81 f0       	breq	.+32     	; 0x14de <DIO_WritePort+0x62>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	91 05       	cpc	r25, r1
    14c6:	81 f0       	breq	.+32     	; 0x14e8 <DIO_WritePort+0x6c>
    14c8:	13 c0       	rjmp	.+38     	; 0x14f0 <DIO_WritePort+0x74>
	{
		case PA:
		PORTA = Value;
    14ca:	eb e3       	ldi	r30, 0x3B	; 59
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	80 83       	st	Z, r24
    14d2:	0e c0       	rjmp	.+28     	; 0x14f0 <DIO_WritePort+0x74>
		break;
		case PB:
		PORTB = Value;
    14d4:	e8 e3       	ldi	r30, 0x38	; 56
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	80 83       	st	Z, r24
    14dc:	09 c0       	rjmp	.+18     	; 0x14f0 <DIO_WritePort+0x74>
		break;
		case PC:
		PORTC = Value;
    14de:	e5 e3       	ldi	r30, 0x35	; 53
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	80 83       	st	Z, r24
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <DIO_WritePort+0x74>
		break;
		case PD:
		PORTD = Value;
    14e8:	e2 e3       	ldi	r30, 0x32	; 50
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	80 83       	st	Z, r24
		break;
	}
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_WriteBitsInPort>:
void DIO_WriteBitsInPort(DIO_Port_type Port,u8 Value,u8 Mask)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_WriteBitsInPort+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_WriteBitsInPort+0x8>
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	6a 83       	std	Y+2, r22	; 0x02
    1510:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3d 83       	std	Y+5, r19	; 0x05
    151a:	2c 83       	std	Y+4, r18	; 0x04
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	59 f1       	breq	.+86     	; 0x157c <DIO_WriteBitsInPort+0x7e>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	2c f4       	brge	.+10     	; 0x153a <DIO_WriteBitsInPort+0x3c>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	69 f0       	breq	.+26     	; 0x1552 <DIO_WriteBitsInPort+0x54>
    1538:	5f c0       	rjmp	.+190    	; 0x15f8 <DIO_WriteBitsInPort+0xfa>
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	3d 81       	ldd	r19, Y+5	; 0x05
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	89 f1       	breq	.+98     	; 0x15a6 <DIO_WriteBitsInPort+0xa8>
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <DIO_WriteBitsInPort+0x52>
    154e:	40 c0       	rjmp	.+128    	; 0x15d0 <DIO_WriteBitsInPort+0xd2>
    1550:	53 c0       	rjmp	.+166    	; 0x15f8 <DIO_WriteBitsInPort+0xfa>
	{
		case PA:
		CLR_BITS_REG(PORTA,Mask);
    1552:	ab e3       	ldi	r26, 0x3B	; 59
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	eb e3       	ldi	r30, 0x3B	; 59
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	98 2f       	mov	r25, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	80 95       	com	r24
    1562:	89 23       	and	r24, r25
    1564:	8c 93       	st	X, r24
		SET_BITS_REG(PORTA,Value&Mask);
    1566:	ab e3       	ldi	r26, 0x3B	; 59
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	20 81       	ld	r18, Z
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	89 23       	and	r24, r25
    1576:	82 2b       	or	r24, r18
    1578:	8c 93       	st	X, r24
    157a:	3e c0       	rjmp	.+124    	; 0x15f8 <DIO_WriteBitsInPort+0xfa>
		break;
		case PB:
		CLR_BITS_REG(PORTB,Mask);
    157c:	a8 e3       	ldi	r26, 0x38	; 56
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e8 e3       	ldi	r30, 0x38	; 56
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	98 2f       	mov	r25, r24
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	80 95       	com	r24
    158c:	89 23       	and	r24, r25
    158e:	8c 93       	st	X, r24
		SET_BITS_REG(PORTB,Value&Mask);
    1590:	a8 e3       	ldi	r26, 0x38	; 56
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e8 e3       	ldi	r30, 0x38	; 56
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	20 81       	ld	r18, Z
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	89 23       	and	r24, r25
    15a0:	82 2b       	or	r24, r18
    15a2:	8c 93       	st	X, r24
    15a4:	29 c0       	rjmp	.+82     	; 0x15f8 <DIO_WriteBitsInPort+0xfa>
		break;
		case PC:
		CLR_BITS_REG(PORTC,Mask);
    15a6:	a5 e3       	ldi	r26, 0x35	; 53
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e5 e3       	ldi	r30, 0x35	; 53
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	98 2f       	mov	r25, r24
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	80 95       	com	r24
    15b6:	89 23       	and	r24, r25
    15b8:	8c 93       	st	X, r24
		SET_BITS_REG(PORTC,Value&Mask);
    15ba:	a5 e3       	ldi	r26, 0x35	; 53
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e3       	ldi	r30, 0x35	; 53
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	20 81       	ld	r18, Z
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	89 23       	and	r24, r25
    15ca:	82 2b       	or	r24, r18
    15cc:	8c 93       	st	X, r24
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <DIO_WriteBitsInPort+0xfa>
		break;
		case PD:
		CLR_BITS_REG(PORTD,Mask);
    15d0:	a2 e3       	ldi	r26, 0x32	; 50
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	98 2f       	mov	r25, r24
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	80 95       	com	r24
    15e0:	89 23       	and	r24, r25
    15e2:	8c 93       	st	X, r24
		SET_BITS_REG(PORTD,Value&Mask);
    15e4:	a2 e3       	ldi	r26, 0x32	; 50
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e2 e3       	ldi	r30, 0x32	; 50
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	20 81       	ld	r18, Z
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	89 23       	and	r24, r25
    15f4:	82 2b       	or	r24, r18
    15f6:	8c 93       	st	X, r24
		break;
	}
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <DIO_higher_nibble_Value>:
void DIO_higher_nibble_Value(DIO_Port_type portNumber,u8 value)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <DIO_higher_nibble_Value+0x6>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <DIO_higher_nibble_Value+0x8>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	82 95       	swap	r24
    161c:	80 7f       	andi	r24, 0xF0	; 240
    161e:	8a 83       	std	Y+2, r24	; 0x02
	switch(portNumber)
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3c 83       	std	Y+4, r19	; 0x04
    1628:	2b 83       	std	Y+3, r18	; 0x03
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	91 05       	cpc	r25, r1
    1632:	29 f1       	breq	.+74     	; 0x167e <DIO_higher_nibble_Value+0x76>
    1634:	2b 81       	ldd	r18, Y+3	; 0x03
    1636:	3c 81       	ldd	r19, Y+4	; 0x04
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	2c f4       	brge	.+10     	; 0x1648 <DIO_higher_nibble_Value+0x40>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	61 f0       	breq	.+24     	; 0x165e <DIO_higher_nibble_Value+0x56>
    1646:	4a c0       	rjmp	.+148    	; 0x16dc <DIO_higher_nibble_Value+0xd4>
    1648:	2b 81       	ldd	r18, Y+3	; 0x03
    164a:	3c 81       	ldd	r19, Y+4	; 0x04
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	31 f1       	breq	.+76     	; 0x169e <DIO_higher_nibble_Value+0x96>
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	89 f1       	breq	.+98     	; 0x16be <DIO_higher_nibble_Value+0xb6>
    165c:	3f c0       	rjmp	.+126    	; 0x16dc <DIO_higher_nibble_Value+0xd4>
	{
		case PA:
		PORTA&=0x0f;
    165e:	ab e3       	ldi	r26, 0x3B	; 59
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	eb e3       	ldi	r30, 0x3B	; 59
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 70       	andi	r24, 0x0F	; 15
    166a:	8c 93       	st	X, r24
		PORTA|=value;
    166c:	ab e3       	ldi	r26, 0x3B	; 59
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	eb e3       	ldi	r30, 0x3B	; 59
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	90 81       	ld	r25, Z
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	89 2b       	or	r24, r25
    167a:	8c 93       	st	X, r24
    167c:	2f c0       	rjmp	.+94     	; 0x16dc <DIO_higher_nibble_Value+0xd4>
		//higher_nibble_value(PORTA,value);
		break;
		case PB:
		PORTB&=0x0f;
    167e:	a8 e3       	ldi	r26, 0x38	; 56
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e8 e3       	ldi	r30, 0x38	; 56
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 70       	andi	r24, 0x0F	; 15
    168a:	8c 93       	st	X, r24
		PORTB|=value;
    168c:	a8 e3       	ldi	r26, 0x38	; 56
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e8 e3       	ldi	r30, 0x38	; 56
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	90 81       	ld	r25, Z
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	89 2b       	or	r24, r25
    169a:	8c 93       	st	X, r24
    169c:	1f c0       	rjmp	.+62     	; 0x16dc <DIO_higher_nibble_Value+0xd4>
		//higher_nibble_value(PORTB,value);
		break;
		case PC:
		PORTC&=0x0f;
    169e:	a5 e3       	ldi	r26, 0x35	; 53
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e5 e3       	ldi	r30, 0x35	; 53
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8f 70       	andi	r24, 0x0F	; 15
    16aa:	8c 93       	st	X, r24
		PORTC|=value;
    16ac:	a5 e3       	ldi	r26, 0x35	; 53
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e3       	ldi	r30, 0x35	; 53
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	90 81       	ld	r25, Z
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	89 2b       	or	r24, r25
    16ba:	8c 93       	st	X, r24
    16bc:	0f c0       	rjmp	.+30     	; 0x16dc <DIO_higher_nibble_Value+0xd4>
		//higher_nibble_value(PORTC,value);
		break;
		case PD:
		PORTD&=0x0f;
    16be:	a2 e3       	ldi	r26, 0x32	; 50
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e2 e3       	ldi	r30, 0x32	; 50
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 70       	andi	r24, 0x0F	; 15
    16ca:	8c 93       	st	X, r24
		PORTD|=value;
    16cc:	a2 e3       	ldi	r26, 0x32	; 50
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e2 e3       	ldi	r30, 0x32	; 50
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	90 81       	ld	r25, Z
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	89 2b       	or	r24, r25
    16da:	8c 93       	st	X, r24
		//higher_nibble_value(PORTD,value);
		break;
	}
	
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <DIO_lower_nibble_value>:

void DIO_lower_nibble_value(DIO_Port_type portNumber,u8 value)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <DIO_lower_nibble_value+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <DIO_lower_nibble_value+0x8>
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	8f 70       	andi	r24, 0x0F	; 15
    16fe:	8a 83       	std	Y+2, r24	; 0x02
	switch(portNumber)
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3c 83       	std	Y+4, r19	; 0x04
    1708:	2b 83       	std	Y+3, r18	; 0x03
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	29 f1       	breq	.+74     	; 0x175e <DIO_lower_nibble_value+0x74>
    1714:	2b 81       	ldd	r18, Y+3	; 0x03
    1716:	3c 81       	ldd	r19, Y+4	; 0x04
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	2c f4       	brge	.+10     	; 0x1728 <DIO_lower_nibble_value+0x3e>
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	61 f0       	breq	.+24     	; 0x173e <DIO_lower_nibble_value+0x54>
    1726:	4a c0       	rjmp	.+148    	; 0x17bc <DIO_lower_nibble_value+0xd2>
    1728:	2b 81       	ldd	r18, Y+3	; 0x03
    172a:	3c 81       	ldd	r19, Y+4	; 0x04
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	31 f1       	breq	.+76     	; 0x177e <DIO_lower_nibble_value+0x94>
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	91 05       	cpc	r25, r1
    173a:	89 f1       	breq	.+98     	; 0x179e <DIO_lower_nibble_value+0xb4>
    173c:	3f c0       	rjmp	.+126    	; 0x17bc <DIO_lower_nibble_value+0xd2>
	{
		case PA:
		PORTA&=0xf0;
    173e:	ab e3       	ldi	r26, 0x3B	; 59
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	eb e3       	ldi	r30, 0x3B	; 59
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	80 7f       	andi	r24, 0xF0	; 240
    174a:	8c 93       	st	X, r24
		PORTA|=value;
    174c:	ab e3       	ldi	r26, 0x3B	; 59
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	eb e3       	ldi	r30, 0x3B	; 59
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	90 81       	ld	r25, Z
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	89 2b       	or	r24, r25
    175a:	8c 93       	st	X, r24
    175c:	2f c0       	rjmp	.+94     	; 0x17bc <DIO_lower_nibble_value+0xd2>
		//lower_nibble_value(PORTA,value);
		break;
		case PB:
		PORTB&=0xf0;
    175e:	a8 e3       	ldi	r26, 0x38	; 56
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e8 e3       	ldi	r30, 0x38	; 56
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 7f       	andi	r24, 0xF0	; 240
    176a:	8c 93       	st	X, r24
		PORTB|=value;
    176c:	a8 e3       	ldi	r26, 0x38	; 56
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e8 e3       	ldi	r30, 0x38	; 56
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	90 81       	ld	r25, Z
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	89 2b       	or	r24, r25
    177a:	8c 93       	st	X, r24
    177c:	1f c0       	rjmp	.+62     	; 0x17bc <DIO_lower_nibble_value+0xd2>
		//lower_nibble_value(PORTB,value);
		break;
		case PC:
		PORTC&=0xf0;
    177e:	a5 e3       	ldi	r26, 0x35	; 53
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 7f       	andi	r24, 0xF0	; 240
    178a:	8c 93       	st	X, r24
		PORTC|=value;
    178c:	a5 e3       	ldi	r26, 0x35	; 53
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e5 e3       	ldi	r30, 0x35	; 53
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	90 81       	ld	r25, Z
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	89 2b       	or	r24, r25
    179a:	8c 93       	st	X, r24
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <DIO_lower_nibble_value+0xd2>
		//lower_nibble_value(PORTC,value);
		break;
		case PD:
		PORTD&=0xf0;
    179e:	a2 e3       	ldi	r26, 0x32	; 50
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e2 e3       	ldi	r30, 0x32	; 50
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	80 7f       	andi	r24, 0xF0	; 240
    17aa:	8c 93       	st	X, r24
		PORTD|=value;
    17ac:	a2 e3       	ldi	r26, 0x32	; 50
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e2 e3       	ldi	r30, 0x32	; 50
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	90 81       	ld	r25, Z
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	89 2b       	or	r24, r25
    17ba:	8c 93       	st	X, r24
		//lower_nibble_value(PORTD,value);
		break;
		
	}
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <SSD_Update>:

extern u8 Hours;
extern u8 Minutes;
extern u8 Seconds;

void SSD_Update(void){
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	Update_Mode();
    17d2:	0e 94 66 0d 	call	0x1acc	; 0x1acc <Update_Mode>
	Refesh();
    17d6:	0e 94 c2 0c 	call	0x1984	; 0x1984 <Refesh>
}
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <On>:

static void On(const SSD_t SSD_ID){
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <On+0x6>
    17e6:	0f 92       	push	r0
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD_ID){
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	3b 83       	std	Y+3, r19	; 0x03
    17f6:	2a 83       	std	Y+2, r18	; 0x02
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	91 05       	cpc	r25, r1
    1800:	49 f1       	breq	.+82     	; 0x1854 <On+0x74>
    1802:	2a 81       	ldd	r18, Y+2	; 0x02
    1804:	3b 81       	ldd	r19, Y+3	; 0x03
    1806:	23 30       	cpi	r18, 0x03	; 3
    1808:	31 05       	cpc	r19, r1
    180a:	54 f4       	brge	.+20     	; 0x1820 <On+0x40>
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	b1 f0       	breq	.+44     	; 0x1840 <On+0x60>
    1814:	2a 81       	ldd	r18, Y+2	; 0x02
    1816:	3b 81       	ldd	r19, Y+3	; 0x03
    1818:	21 30       	cpi	r18, 0x01	; 1
    181a:	31 05       	cpc	r19, r1
    181c:	b1 f0       	breq	.+44     	; 0x184a <On+0x6a>
    181e:	2d c0       	rjmp	.+90     	; 0x187a <On+0x9a>
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	9b 81       	ldd	r25, Y+3	; 0x03
    1824:	84 30       	cpi	r24, 0x04	; 4
    1826:	91 05       	cpc	r25, r1
    1828:	f9 f0       	breq	.+62     	; 0x1868 <On+0x88>
    182a:	2a 81       	ldd	r18, Y+2	; 0x02
    182c:	3b 81       	ldd	r19, Y+3	; 0x03
    182e:	24 30       	cpi	r18, 0x04	; 4
    1830:	31 05       	cpc	r19, r1
    1832:	ac f0       	brlt	.+42     	; 0x185e <On+0x7e>
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	85 30       	cpi	r24, 0x05	; 5
    183a:	91 05       	cpc	r25, r1
    183c:	d1 f0       	breq	.+52     	; 0x1872 <On+0x92>
    183e:	1d c0       	rjmp	.+58     	; 0x187a <On+0x9a>
	case SSD_HOURS_TENS:
		DIO_WritePin(SSD_HOURS_TENS_PIN_ID, SSD_STATE_ON);
    1840:	88 e1       	ldi	r24, 0x18	; 24
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1848:	18 c0       	rjmp	.+48     	; 0x187a <On+0x9a>
		break;
	case SSD_HOURS_UNITS:
		DIO_WritePin(SSD_HOURS_UNITS_PIN_ID, SSD_STATE_ON);
    184a:	89 e1       	ldi	r24, 0x19	; 25
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1852:	13 c0       	rjmp	.+38     	; 0x187a <On+0x9a>
		break;
	case SSD_MIN_TENS:
		DIO_WritePin(SSD_MIN_TENS_PIN_ID, SSD_STATE_ON);
    1854:	8a e1       	ldi	r24, 0x1A	; 26
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    185c:	0e c0       	rjmp	.+28     	; 0x187a <On+0x9a>
		break;
	case SSD_MIN_UNITS:
		DIO_WritePin(SSD_MIN_UNITS_PIN_ID, SSD_STATE_ON);
    185e:	8b e1       	ldi	r24, 0x1B	; 27
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1866:	09 c0       	rjmp	.+18     	; 0x187a <On+0x9a>
		break;
	case SSD_SEC_TENS:
		DIO_WritePin(SSD_SEC_TENS_PIN_ID, SSD_STATE_ON);
    1868:	8c e1       	ldi	r24, 0x1C	; 28
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1870:	04 c0       	rjmp	.+8      	; 0x187a <On+0x9a>
		break;
	case SSD_SEC_UNITS:
		DIO_WritePin(SSD_SEC_UNITS_PIN_ID, SSD_STATE_ON);
    1872:	8e e1       	ldi	r24, 0x1E	; 30
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
		break;
	default:
		/* Error: Undefined SSD */
		break;
	}
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <Off>:

static void Off(const SSD_t SSD_ID){
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <Off+0x6>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD_ID){
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	3b 83       	std	Y+3, r19	; 0x03
    189c:	2a 83       	std	Y+2, r18	; 0x02
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	91 05       	cpc	r25, r1
    18a6:	49 f1       	breq	.+82     	; 0x18fa <Off+0x74>
    18a8:	2a 81       	ldd	r18, Y+2	; 0x02
    18aa:	3b 81       	ldd	r19, Y+3	; 0x03
    18ac:	23 30       	cpi	r18, 0x03	; 3
    18ae:	31 05       	cpc	r19, r1
    18b0:	54 f4       	brge	.+20     	; 0x18c6 <Off+0x40>
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	b1 f0       	breq	.+44     	; 0x18e6 <Off+0x60>
    18ba:	2a 81       	ldd	r18, Y+2	; 0x02
    18bc:	3b 81       	ldd	r19, Y+3	; 0x03
    18be:	21 30       	cpi	r18, 0x01	; 1
    18c0:	31 05       	cpc	r19, r1
    18c2:	b1 f0       	breq	.+44     	; 0x18f0 <Off+0x6a>
    18c4:	2d c0       	rjmp	.+90     	; 0x1920 <Off+0x9a>
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	91 05       	cpc	r25, r1
    18ce:	f9 f0       	breq	.+62     	; 0x190e <Off+0x88>
    18d0:	2a 81       	ldd	r18, Y+2	; 0x02
    18d2:	3b 81       	ldd	r19, Y+3	; 0x03
    18d4:	24 30       	cpi	r18, 0x04	; 4
    18d6:	31 05       	cpc	r19, r1
    18d8:	ac f0       	brlt	.+42     	; 0x1904 <Off+0x7e>
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	85 30       	cpi	r24, 0x05	; 5
    18e0:	91 05       	cpc	r25, r1
    18e2:	d1 f0       	breq	.+52     	; 0x1918 <Off+0x92>
    18e4:	1d c0       	rjmp	.+58     	; 0x1920 <Off+0x9a>
	case SSD_HOURS_TENS:
		DIO_WritePin(SSD_HOURS_TENS_PIN_ID, SSD_STATE_OFF);
    18e6:	88 e1       	ldi	r24, 0x18	; 24
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    18ee:	18 c0       	rjmp	.+48     	; 0x1920 <Off+0x9a>
		break;
	case SSD_HOURS_UNITS:
		DIO_WritePin(SSD_HOURS_UNITS_PIN_ID, SSD_STATE_OFF);
    18f0:	89 e1       	ldi	r24, 0x19	; 25
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    18f8:	13 c0       	rjmp	.+38     	; 0x1920 <Off+0x9a>
		break;
	case SSD_MIN_TENS:
		DIO_WritePin(SSD_MIN_TENS_PIN_ID, SSD_STATE_OFF);
    18fa:	8a e1       	ldi	r24, 0x1A	; 26
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1902:	0e c0       	rjmp	.+28     	; 0x1920 <Off+0x9a>
		break;
	case SSD_MIN_UNITS:
		DIO_WritePin(SSD_MIN_UNITS_PIN_ID, SSD_STATE_OFF);
    1904:	8b e1       	ldi	r24, 0x1B	; 27
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <Off+0x9a>
		break;
	case SSD_SEC_TENS:
		DIO_WritePin(SSD_SEC_TENS_PIN_ID, SSD_STATE_OFF);
    190e:	8c e1       	ldi	r24, 0x1C	; 28
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <Off+0x9a>
		break;
	case SSD_SEC_UNITS:
		DIO_WritePin(SSD_SEC_UNITS_PIN_ID, SSD_STATE_OFF);
    1918:	8e e1       	ldi	r24, 0x1E	; 30
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
		break;
	default:
		/* Error: Undefined SSD */
		break;
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <Update_Symbol>:

static void Update_Symbol(const u8 SYMBOL){
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(SSD_A_PIN_ID, READ_BIT(SYMBOL, 0));
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	98 2f       	mov	r25, r24
    193c:	91 70       	andi	r25, 0x01	; 1
    193e:	80 e1       	ldi	r24, 0x10	; 16
    1940:	69 2f       	mov	r22, r25
    1942:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(SSD_B_PIN_ID, READ_BIT(SYMBOL, 1));
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	86 95       	lsr	r24
    194a:	98 2f       	mov	r25, r24
    194c:	91 70       	andi	r25, 0x01	; 1
    194e:	81 e1       	ldi	r24, 0x11	; 17
    1950:	69 2f       	mov	r22, r25
    1952:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(SSD_C_PIN_ID, READ_BIT(SYMBOL, 2));
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	86 95       	lsr	r24
    195a:	86 95       	lsr	r24
    195c:	98 2f       	mov	r25, r24
    195e:	91 70       	andi	r25, 0x01	; 1
    1960:	82 e1       	ldi	r24, 0x12	; 18
    1962:	69 2f       	mov	r22, r25
    1964:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
	DIO_WritePin(SSD_D_PIN_ID, READ_BIT(SYMBOL, 3));
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	86 95       	lsr	r24
    196c:	86 95       	lsr	r24
    196e:	86 95       	lsr	r24
    1970:	98 2f       	mov	r25, r24
    1972:	91 70       	andi	r25, 0x01	; 1
    1974:	83 e1       	ldi	r24, 0x13	; 19
    1976:	69 2f       	mov	r22, r25
    1978:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_WritePin>
}
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <Refesh>:

static void Refesh(void){
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <Refesh+0x6>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62

	Off(SSD_HOURS_TENS);
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	0e 94 43 0c 	call	0x1886	; 0x1886 <Off>
	Off(SSD_HOURS_UNITS);
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	0e 94 43 0c 	call	0x1886	; 0x1886 <Off>
	Off(SSD_MIN_TENS);
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	0e 94 43 0c 	call	0x1886	; 0x1886 <Off>
	Off(SSD_MIN_UNITS);
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	0e 94 43 0c 	call	0x1886	; 0x1886 <Off>
	Off(SSD_SEC_TENS);
    19a6:	84 e0       	ldi	r24, 0x04	; 4
    19a8:	0e 94 43 0c 	call	0x1886	; 0x1886 <Off>
	Off(SSD_SEC_UNITS);
    19ac:	85 e0       	ldi	r24, 0x05	; 5
    19ae:	0e 94 43 0c 	call	0x1886	; 0x1886 <Off>

	switch(SSD_Id){
    19b2:	80 91 91 00 	lds	r24, 0x0091
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3a 83       	std	Y+2, r19	; 0x02
    19bc:	29 83       	std	Y+1, r18	; 0x01
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	91 05       	cpc	r25, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <Refesh+0x46>
    19c8:	40 c0       	rjmp	.+128    	; 0x1a4a <Refesh+0xc6>
    19ca:	29 81       	ldd	r18, Y+1	; 0x01
    19cc:	3a 81       	ldd	r19, Y+2	; 0x02
    19ce:	23 30       	cpi	r18, 0x03	; 3
    19d0:	31 05       	cpc	r19, r1
    19d2:	54 f4       	brge	.+20     	; 0x19e8 <Refesh+0x64>
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	c1 f0       	breq	.+48     	; 0x1a0c <Refesh+0x88>
    19dc:	29 81       	ldd	r18, Y+1	; 0x01
    19de:	3a 81       	ldd	r19, Y+2	; 0x02
    19e0:	21 30       	cpi	r18, 0x01	; 1
    19e2:	31 05       	cpc	r19, r1
    19e4:	11 f1       	breq	.+68     	; 0x1a2a <Refesh+0xa6>
    19e6:	6d c0       	rjmp	.+218    	; 0x1ac2 <Refesh+0x13e>
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	84 30       	cpi	r24, 0x04	; 4
    19ee:	91 05       	cpc	r25, r1
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <Refesh+0x70>
    19f2:	4a c0       	rjmp	.+148    	; 0x1a88 <Refesh+0x104>
    19f4:	29 81       	ldd	r18, Y+1	; 0x01
    19f6:	3a 81       	ldd	r19, Y+2	; 0x02
    19f8:	24 30       	cpi	r18, 0x04	; 4
    19fa:	31 05       	cpc	r19, r1
    19fc:	ac f1       	brlt	.+106    	; 0x1a68 <Refesh+0xe4>
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	85 30       	cpi	r24, 0x05	; 5
    1a04:	91 05       	cpc	r25, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <Refesh+0x86>
    1a08:	4e c0       	rjmp	.+156    	; 0x1aa6 <Refesh+0x122>
    1a0a:	5b c0       	rjmp	.+182    	; 0x1ac2 <Refesh+0x13e>
	case SSD_HOURS_TENS:
		Update_Symbol(Hours / 10);
    1a0c:	80 91 a7 00 	lds	r24, 0x00A7
    1a10:	9a e0       	ldi	r25, 0x0A	; 10
    1a12:	69 2f       	mov	r22, r25
    1a14:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodqi4>
    1a18:	0e 94 96 0c 	call	0x192c	; 0x192c <Update_Symbol>
		On(SSD_HOURS_TENS);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <On>
		SSD_Id = SSD_HOURS_UNITS;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	80 93 91 00 	sts	0x0091, r24
    1a28:	4c c0       	rjmp	.+152    	; 0x1ac2 <Refesh+0x13e>
		break;
	case SSD_HOURS_UNITS:
		Update_Symbol(Hours % 10);
    1a2a:	80 91 a7 00 	lds	r24, 0x00A7
    1a2e:	9a e0       	ldi	r25, 0x0A	; 10
    1a30:	69 2f       	mov	r22, r25
    1a32:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodqi4>
    1a36:	89 2f       	mov	r24, r25
    1a38:	0e 94 96 0c 	call	0x192c	; 0x192c <Update_Symbol>
		On(SSD_HOURS_UNITS);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <On>
		SSD_Id = SSD_MIN_TENS;
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	80 93 91 00 	sts	0x0091, r24
    1a48:	3c c0       	rjmp	.+120    	; 0x1ac2 <Refesh+0x13e>
		break;
	case SSD_MIN_TENS:
		Update_Symbol(Minutes / 10);
    1a4a:	80 91 a8 00 	lds	r24, 0x00A8
    1a4e:	9a e0       	ldi	r25, 0x0A	; 10
    1a50:	69 2f       	mov	r22, r25
    1a52:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodqi4>
    1a56:	0e 94 96 0c 	call	0x192c	; 0x192c <Update_Symbol>
		On(SSD_MIN_TENS);
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <On>
		SSD_Id = SSD_MIN_UNITS;
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	80 93 91 00 	sts	0x0091, r24
    1a66:	2d c0       	rjmp	.+90     	; 0x1ac2 <Refesh+0x13e>
		break;
	case SSD_MIN_UNITS:
		Update_Symbol(Minutes % 10);
    1a68:	80 91 a8 00 	lds	r24, 0x00A8
    1a6c:	9a e0       	ldi	r25, 0x0A	; 10
    1a6e:	69 2f       	mov	r22, r25
    1a70:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodqi4>
    1a74:	89 2f       	mov	r24, r25
    1a76:	0e 94 96 0c 	call	0x192c	; 0x192c <Update_Symbol>
		On(SSD_MIN_UNITS);
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <On>
		SSD_Id = SSD_SEC_TENS;
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	80 93 91 00 	sts	0x0091, r24
    1a86:	1d c0       	rjmp	.+58     	; 0x1ac2 <Refesh+0x13e>
		break;
	case SSD_SEC_TENS:
		Update_Symbol(Seconds / 10);
    1a88:	80 91 a9 00 	lds	r24, 0x00A9
    1a8c:	9a e0       	ldi	r25, 0x0A	; 10
    1a8e:	69 2f       	mov	r22, r25
    1a90:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodqi4>
    1a94:	0e 94 96 0c 	call	0x192c	; 0x192c <Update_Symbol>
		On(SSD_SEC_TENS);
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <On>
		SSD_Id = SSD_SEC_UNITS;
    1a9e:	85 e0       	ldi	r24, 0x05	; 5
    1aa0:	80 93 91 00 	sts	0x0091, r24
    1aa4:	0e c0       	rjmp	.+28     	; 0x1ac2 <Refesh+0x13e>
		break;
	case SSD_SEC_UNITS:
		Update_Symbol(Seconds % 10);
    1aa6:	80 91 a9 00 	lds	r24, 0x00A9
    1aaa:	9a e0       	ldi	r25, 0x0A	; 10
    1aac:	69 2f       	mov	r22, r25
    1aae:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodqi4>
    1ab2:	89 2f       	mov	r24, r25
    1ab4:	0e 94 96 0c 	call	0x192c	; 0x192c <Update_Symbol>
		On(SSD_SEC_UNITS);
    1ab8:	85 e0       	ldi	r24, 0x05	; 5
    1aba:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <On>
		SSD_Id = SSD_HOURS_TENS;
    1abe:	10 92 91 00 	sts	0x0091, r1

	default:
		/* Error: Undefined SSD */
		break;
	}
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <Update_Mode>:

static void Update_Mode(void){
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <Update_Mode+0x6>
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62

	switch(SSD_Mode_g){
    1ad6:	80 91 90 00 	lds	r24, 0x0090
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3a 83       	std	Y+2, r19	; 0x02
    1ae0:	29 83       	std	Y+1, r18	; 0x01
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	91 f0       	breq	.+36     	; 0x1b10 <Update_Mode+0x44>
    1aec:	29 81       	ldd	r18, Y+1	; 0x01
    1aee:	3a 81       	ldd	r19, Y+2	; 0x02
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	b1 f0       	breq	.+44     	; 0x1b22 <Update_Mode+0x56>
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	c9 f4       	brne	.+50     	; 0x1b30 <Update_Mode+0x64>
	case SSD_NORMAL_MODE:
		if(SW_PRESSED == SW_g[SW_SETTING].state){
    1afe:	80 91 68 00 	lds	r24, 0x0068
    1b02:	80 78       	andi	r24, 0x80	; 128
    1b04:	88 23       	and	r24, r24
    1b06:	a1 f4       	brne	.+40     	; 0x1b30 <Update_Mode+0x64>
			SSD_Mode_g = SSD_SETTING_HOURS_MODE;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 90 00 	sts	0x0090, r24
    1b0e:	10 c0       	rjmp	.+32     	; 0x1b30 <Update_Mode+0x64>
		}
		break;
	case SSD_SETTING_HOURS_MODE:
		if(SW_PRESSED == SW_g[SW_SETTING].state){
    1b10:	80 91 68 00 	lds	r24, 0x0068
    1b14:	80 78       	andi	r24, 0x80	; 128
    1b16:	88 23       	and	r24, r24
    1b18:	59 f4       	brne	.+22     	; 0x1b30 <Update_Mode+0x64>
			SSD_Mode_g = SSD_SETTING_MINUTES_MODE;
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	80 93 90 00 	sts	0x0090, r24
    1b20:	07 c0       	rjmp	.+14     	; 0x1b30 <Update_Mode+0x64>
		/*else if(SW_PRESSED == SW_g[SW_UP].state){

		}*/
		break;
	case SSD_SETTING_MINUTES_MODE:
		if(SW_PRESSED == SW_g[SW_SETTING].state){
    1b22:	80 91 68 00 	lds	r24, 0x0068
    1b26:	80 78       	andi	r24, 0x80	; 128
    1b28:	88 23       	and	r24, r24
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <Update_Mode+0x64>
			SSD_Mode_g = SSD_NORMAL_MODE;
    1b2c:	10 92 90 00 	sts	0x0090, r1
	default:
		break;

	}

}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <Scheduler>:

#define OK		0
#define NOK		1

static void Scheduler (void)
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8TaskCounter;

	for(Local_u8TaskCounter=0;Local_u8TaskCounter<NUMBER_OF_TASKS;Local_u8TaskCounter++)
    1b44:	19 82       	std	Y+1, r1	; 0x01
    1b46:	98 c0       	rjmp	.+304    	; 0x1c78 <Scheduler+0x13e>
	{

		if (SystemTasks[Local_u8TaskCounter].State == TASK_READY)
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	c9 01       	movw	r24, r18
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	82 1b       	sub	r24, r18
    1b5e:	93 0b       	sbc	r25, r19
    1b60:	fc 01       	movw	r30, r24
    1b62:	e8 56       	subi	r30, 0x68	; 104
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 81       	ld	r24, Z
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	09 f0       	breq	.+2      	; 0x1b6e <Scheduler+0x34>
    1b6c:	82 c0       	rjmp	.+260    	; 0x1c72 <Scheduler+0x138>
		{
			if(SystemTasks[Local_u8TaskCounter].FirstDelay == 0)
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	c9 01       	movw	r24, r18
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	82 1b       	sub	r24, r18
    1b84:	93 0b       	sbc	r25, r19
    1b86:	fc 01       	movw	r30, r24
    1b88:	ec 56       	subi	r30, 0x6C	; 108
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <Scheduler+0x5c>
    1b94:	4c c0       	rjmp	.+152    	; 0x1c2e <Scheduler+0xf4>
			{
				/*Invoke the task function if it is not NULL*/
				if(SystemTasks[Local_u8TaskCounter].TaskHandler != NULL)
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	82 1b       	sub	r24, r18
    1bac:	93 0b       	sbc	r25, r19
    1bae:	fc 01       	movw	r30, r24
    1bb0:	ea 56       	subi	r30, 0x6A	; 106
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	99 f0       	breq	.+38     	; 0x1be2 <Scheduler+0xa8>
				{
					SystemTasks[Local_u8TaskCounter].TaskHandler();
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	c9 01       	movw	r24, r18
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	82 1b       	sub	r24, r18
    1bd2:	93 0b       	sbc	r25, r19
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	ea 56       	subi	r30, 0x6A	; 106
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	01 90       	ld	r0, Z+
    1bdc:	f0 81       	ld	r31, Z
    1bde:	e0 2d       	mov	r30, r0
    1be0:	09 95       	icall
				}

				SystemTasks[Local_u8TaskCounter].FirstDelay = SystemTasks[Local_u8TaskCounter].priodicity-1;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	48 2f       	mov	r20, r24
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	c9 01       	movw	r24, r18
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	82 1b       	sub	r24, r18
    1bfe:	93 0b       	sbc	r25, r19
    1c00:	fc 01       	movw	r30, r24
    1c02:	ee 56       	subi	r30, 0x6E	; 110
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	21 50       	subi	r18, 0x01	; 1
    1c0e:	30 40       	sbci	r19, 0x00	; 0
    1c10:	ca 01       	movw	r24, r20
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	84 1b       	sub	r24, r20
    1c20:	95 0b       	sbc	r25, r21
    1c22:	fc 01       	movw	r30, r24
    1c24:	ec 56       	subi	r30, 0x6C	; 108
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	31 83       	std	Z+1, r19	; 0x01
    1c2a:	20 83       	st	Z, r18
    1c2c:	22 c0       	rjmp	.+68     	; 0x1c72 <Scheduler+0x138>

			}
			else
			{
				SystemTasks[Local_u8TaskCounter].FirstDelay--;
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	c9 01       	movw	r24, r18
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	82 1b       	sub	r24, r18
    1c44:	93 0b       	sbc	r25, r19
    1c46:	fc 01       	movw	r30, r24
    1c48:	ec 56       	subi	r30, 0x6C	; 108
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 81       	ld	r24, Z
    1c4e:	91 81       	ldd	r25, Z+1	; 0x01
    1c50:	ac 01       	movw	r20, r24
    1c52:	41 50       	subi	r20, 0x01	; 1
    1c54:	50 40       	sbci	r21, 0x00	; 0
    1c56:	c9 01       	movw	r24, r18
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	82 1b       	sub	r24, r18
    1c66:	93 0b       	sbc	r25, r19
    1c68:	fc 01       	movw	r30, r24
    1c6a:	ec 56       	subi	r30, 0x6C	; 108
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	51 83       	std	Z+1, r21	; 0x01
    1c70:	40 83       	st	Z, r20

static void Scheduler (void)
{
	u8 Local_u8TaskCounter;

	for(Local_u8TaskCounter=0;Local_u8TaskCounter<NUMBER_OF_TASKS;Local_u8TaskCounter++)
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	8f 5f       	subi	r24, 0xFF	; 255
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	83 30       	cpi	r24, 0x03	; 3
    1c7c:	08 f4       	brcc	.+2      	; 0x1c80 <Scheduler+0x146>
    1c7e:	64 cf       	rjmp	.-312    	; 0x1b48 <Scheduler+0xe>
		{
			/* Task is suspended */
		}

	}
}
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <STTS_voidStart>:


void STTS_voidStart(void)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	/*Configure timer to generate interrupt every 1 ms*/
	Timer1_SetInterruptTime_ms(5,&Scheduler);
    1c90:	2d e9       	ldi	r18, 0x9D	; 157
    1c92:	3d e0       	ldi	r19, 0x0D	; 13
    1c94:	85 e0       	ldi	r24, 0x05	; 5
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	b9 01       	movw	r22, r18
    1c9a:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <Timer1_SetInterruptTime_ms>

	/*Enable global interrupts*/
	sei();
    1c9e:	78 94       	sei
}
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <STTS_u8CreateTask>:

u8 STTS_u8CreateTask(u8 Copy_u8Priority,void (*Copy_pvTaskFunc)(void),u16 Copy_u16Periodicity,u16 Copy_u16FirstDelay)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	28 97       	sbiw	r28, 0x08	; 8
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	8a 83       	std	Y+2, r24	; 0x02
    1cbc:	7c 83       	std	Y+4, r23	; 0x04
    1cbe:	6b 83       	std	Y+3, r22	; 0x03
    1cc0:	5e 83       	std	Y+6, r21	; 0x06
    1cc2:	4d 83       	std	Y+5, r20	; 0x05
    1cc4:	38 87       	std	Y+8, r19	; 0x08
    1cc6:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState= OK;
    1cc8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvTaskFunc != NULL)
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <STTS_u8CreateTask+0x2e>
    1cd2:	5f c0       	rjmp	.+190    	; 0x1d92 <STTS_u8CreateTask+0xec>
	{
		/*check if the given priority is available or not*/
		if(SystemTasks[Copy_u8Priority].TaskHandler == NULL)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	c9 01       	movw	r24, r18
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	82 1b       	sub	r24, r18
    1cea:	93 0b       	sbc	r25, r19
    1cec:	fc 01       	movw	r30, r24
    1cee:	ea 56       	subi	r30, 0x6A	; 106
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <STTS_u8CreateTask+0x56>
    1cfa:	4d c0       	rjmp	.+154    	; 0x1d96 <STTS_u8CreateTask+0xf0>
		{
			SystemTasks[Copy_u8Priority].priodicity= Copy_u16Periodicity;
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	c9 01       	movw	r24, r18
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	82 1b       	sub	r24, r18
    1d12:	93 0b       	sbc	r25, r19
    1d14:	fc 01       	movw	r30, r24
    1d16:	ee 56       	subi	r30, 0x6E	; 110
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
			SystemTasks[Copy_u8Priority].TaskHandler= Copy_pvTaskFunc;
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	c9 01       	movw	r24, r18
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	82 1b       	sub	r24, r18
    1d38:	93 0b       	sbc	r25, r19
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	ea 56       	subi	r30, 0x6A	; 106
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	80 83       	st	Z, r24
			SystemTasks[Copy_u8Priority].State= TASK_READY;
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	c9 01       	movw	r24, r18
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	82 1b       	sub	r24, r18
    1d5e:	93 0b       	sbc	r25, r19
    1d60:	fc 01       	movw	r30, r24
    1d62:	e8 56       	subi	r30, 0x68	; 104
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	80 83       	st	Z, r24
			SystemTasks[Copy_u8Priority].FirstDelay = Copy_u16FirstDelay;
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	c9 01       	movw	r24, r18
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	82 1b       	sub	r24, r18
    1d80:	93 0b       	sbc	r25, r19
    1d82:	fc 01       	movw	r30, r24
    1d84:	ec 56       	subi	r30, 0x6C	; 108
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8a:	98 85       	ldd	r25, Y+8	; 0x08
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <STTS_u8CreateTask+0xf0>
			/*priority is not available*/
		}
	}
	else
	{
		Local_u8ErrorState= NOK;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d98:	28 96       	adiw	r28, 0x08	; 8
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <STTS_voidSuspendTask>:

void STTS_voidSuspendTask(u8 Copy_u8Priority)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State=TASK_SUSPENDED;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	c9 01       	movw	r24, r18
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	82 1b       	sub	r24, r18
    1dcc:	93 0b       	sbc	r25, r19
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e8 56       	subi	r30, 0x68	; 104
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	80 83       	st	Z, r24
}
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <STTS_voidResumeTask>:

void STTS_voidResumeTask(u8 Copy_u8Priority)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State= TASK_READY;
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	c9 01       	movw	r24, r18
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	82 1b       	sub	r24, r18
    1e02:	93 0b       	sbc	r25, r19
    1e04:	fc 01       	movw	r30, r24
    1e06:	e8 56       	subi	r30, 0x68	; 104
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	80 83       	st	Z, r24
}
    1e0e:	0f 90       	pop	r0
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <STTS_voidDeleteTask>:

void STTS_voidDeleteTask(u8 Copy_u8Priority)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	0f 92       	push	r0
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].TaskHandler= NULL;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	c9 01       	movw	r24, r18
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	82 1b       	sub	r24, r18
    1e38:	93 0b       	sbc	r25, r19
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	ea 56       	subi	r30, 0x6A	; 106
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	11 82       	std	Z+1, r1	; 0x01
    1e42:	10 82       	st	Z, r1
}
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <Read>:
		                      {PINA1 , SW_PRE_PRESSED , SW_RELEASED , SW_INTERNAL_PULLUP},
							  {PINA2 , SW_PRE_PRESSED , SW_RELEASED , SW_INTERNAL_PULLUP}
};

static void Read(SW_t * const SW)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	28 97       	sbiw	r28, 0x08	; 8
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
	switch(SW->time){
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	80 81       	ld	r24, Z
    1e6a:	82 95       	swap	r24
    1e6c:	86 95       	lsr	r24
    1e6e:	86 95       	lsr	r24
    1e70:	83 70       	andi	r24, 0x03	; 3
    1e72:	81 70       	andi	r24, 0x01	; 1
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	38 87       	std	Y+8, r19	; 0x08
    1e7a:	2f 83       	std	Y+7, r18	; 0x07
    1e7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e7e:	98 85       	ldd	r25, Y+8	; 0x08
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	31 f0       	breq	.+12     	; 0x1e90 <Read+0x44>
    1e84:	2f 81       	ldd	r18, Y+7	; 0x07
    1e86:	38 85       	ldd	r19, Y+8	; 0x08
    1e88:	21 30       	cpi	r18, 0x01	; 1
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	d9 f1       	breq	.+118    	; 0x1f04 <Read+0xb8>
    1e8e:	71 c0       	rjmp	.+226    	; 0x1f72 <Read+0x126>

	case SW_PRE_PRESSED:
		switch(SW->connection){
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	81 81       	ldd	r24, Z+1	; 0x01
    1e96:	83 70       	andi	r24, 0x03	; 3
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	3e 83       	std	Y+6, r19	; 0x06
    1e9e:	2d 83       	std	Y+5, r18	; 0x05
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	d1 f0       	breq	.+52     	; 0x1ede <Read+0x92>
    1eaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1eac:	3e 81       	ldd	r19, Y+6	; 0x06
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <Read+0x6a>
    1eb4:	5e c0       	rjmp	.+188    	; 0x1f72 <Read+0x126>
		case SW_INTERNAL_PULLUP:
			SW->state = SW_RELEASED;
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 68       	ori	r24, 0x80	; 128
    1ebe:	80 83       	st	Z, r24
			if(HIGH == DIO_ReadPin(SW->pin)){
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8f 73       	andi	r24, 0x3F	; 63
    1ec8:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_ReadPin>
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <Read+0x86>
    1ed0:	50 c0       	rjmp	.+160    	; 0x1f72 <Read+0x126>
				SW->time = SW_PRE_RELEASED;
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 64       	ori	r24, 0x40	; 64
    1eda:	80 83       	st	Z, r24
    1edc:	4a c0       	rjmp	.+148    	; 0x1f72 <Read+0x126>
			}
			break;
		case SW_EXTERNAL_PULLDOWN:
			SW->state = SW_RELEASED;
    1ede:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 68       	ori	r24, 0x80	; 128
    1ee6:	80 83       	st	Z, r24
			if(LOW == DIO_ReadPin(SW->pin)){
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	80 81       	ld	r24, Z
    1eee:	8f 73       	andi	r24, 0x3F	; 63
    1ef0:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_ReadPin>
    1ef4:	88 23       	and	r24, r24
    1ef6:	e9 f5       	brne	.+122    	; 0x1f72 <Read+0x126>
				SW->time = SW_PRE_RELEASED;
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	80 81       	ld	r24, Z
    1efe:	80 64       	ori	r24, 0x40	; 64
    1f00:	80 83       	st	Z, r24
    1f02:	37 c0       	rjmp	.+110    	; 0x1f72 <Read+0x126>
			}
			break;
		}
		break;
	case SW_PRE_RELEASED:
		switch(SW->connection){
    1f04:	e9 81       	ldd	r30, Y+1	; 0x01
    1f06:	fa 81       	ldd	r31, Y+2	; 0x02
    1f08:	81 81       	ldd	r24, Z+1	; 0x01
    1f0a:	83 70       	andi	r24, 0x03	; 3
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3c 83       	std	Y+4, r19	; 0x04
    1f12:	2b 83       	std	Y+3, r18	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	c1 f0       	breq	.+48     	; 0x1f4e <Read+0x102>
    1f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f20:	3c 81       	ldd	r19, Y+4	; 0x04
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	29 f5       	brne	.+74     	; 0x1f72 <Read+0x126>
		case SW_INTERNAL_PULLUP:
			if(LOW == DIO_ReadPin(SW->pin)){
    1f28:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8f 73       	andi	r24, 0x3F	; 63
    1f30:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_ReadPin>
    1f34:	88 23       	and	r24, r24
    1f36:	e9 f4       	brne	.+58     	; 0x1f72 <Read+0x126>
				SW->state = SW_PRESSED;
    1f38:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 77       	andi	r24, 0x7F	; 127
    1f40:	80 83       	st	Z, r24
				SW->time = SW_PRE_PRESSED;
    1f42:	e9 81       	ldd	r30, Y+1	; 0x01
    1f44:	fa 81       	ldd	r31, Y+2	; 0x02
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 7b       	andi	r24, 0xBF	; 191
    1f4a:	80 83       	st	Z, r24
    1f4c:	12 c0       	rjmp	.+36     	; 0x1f72 <Read+0x126>
			}
			break;
		case SW_EXTERNAL_PULLDOWN:
			if(HIGH == DIO_ReadPin(SW->pin)){
    1f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f50:	fa 81       	ldd	r31, Y+2	; 0x02
    1f52:	80 81       	ld	r24, Z
    1f54:	8f 73       	andi	r24, 0x3F	; 63
    1f56:	0e 94 36 09 	call	0x126c	; 0x126c <DIO_ReadPin>
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	51 f4       	brne	.+20     	; 0x1f72 <Read+0x126>
				SW->state = SW_PRESSED;
    1f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f60:	fa 81       	ldd	r31, Y+2	; 0x02
    1f62:	80 81       	ld	r24, Z
    1f64:	8f 77       	andi	r24, 0x7F	; 127
    1f66:	80 83       	st	Z, r24
				SW->time = SW_PRE_RELEASED;
    1f68:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6c:	80 81       	ld	r24, Z
    1f6e:	80 64       	ori	r24, 0x40	; 64
    1f70:	80 83       	st	Z, r24
		}
		break;
	default:
			break;
	}
}
    1f72:	28 96       	adiw	r28, 0x08	; 8
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <SW_Update>:

void SW_Update(void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	0f 92       	push	r0
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	SW_ID_t id;

	for(id = SW_SETTING; id<SW_MAX_NUMBER; ++id)
    1f8e:	19 82       	std	Y+1, r1	; 0x01
    1f90:	0c c0       	rjmp	.+24     	; 0x1faa <SW_Update+0x26>
	{
		Read(SW_g+id);
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	88 59       	subi	r24, 0x98	; 152
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <Read>

void SW_Update(void)
{
	SW_ID_t id;

	for(id = SW_SETTING; id<SW_MAX_NUMBER; ++id)
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	83 30       	cpi	r24, 0x03	; 3
    1fae:	88 f3       	brcs	.-30     	; 0x1f92 <SW_Update+0xe>
	{
		Read(SW_g+id);
	}
}
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <TIME_Update>:
u8 Minutes = 0;
u8 Seconds = 0;

extern SSD_MODE_t SSD_Mode_g ;

void TIME_Update(void){
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62

	Auto_Update();
    1fc0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <Auto_Update>
	Manual_Update();
    1fc4:	0e 94 1e 10 	call	0x203c	; 0x203c <Manual_Update>
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <Auto_Update>:

static void Auto_Update(void){
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62

	static u8 Period = 50;       /* 50 * 20 = 1000ms */

	Period--;
    1fd6:	80 91 6e 00 	lds	r24, 0x006E
    1fda:	81 50       	subi	r24, 0x01	; 1
    1fdc:	80 93 6e 00 	sts	0x006E, r24
	if(Period  == 0){
    1fe0:	80 91 6e 00 	lds	r24, 0x006E
    1fe4:	88 23       	and	r24, r24
    1fe6:	39 f5       	brne	.+78     	; 0x2036 <Auto_Update+0x68>
		if(Seconds == SEC_MAX_VAL){
    1fe8:	80 91 a9 00 	lds	r24, 0x00A9
    1fec:	8b 33       	cpi	r24, 0x3B	; 59
    1fee:	d9 f4       	brne	.+54     	; 0x2026 <Auto_Update+0x58>
			Seconds = 0;
    1ff0:	10 92 a9 00 	sts	0x00A9, r1
			if(Minutes == MINUTE_MAX_VAL){
    1ff4:	80 91 a8 00 	lds	r24, 0x00A8
    1ff8:	8b 33       	cpi	r24, 0x3B	; 59
    1ffa:	79 f4       	brne	.+30     	; 0x201a <Auto_Update+0x4c>
				Minutes = 0;
    1ffc:	10 92 a8 00 	sts	0x00A8, r1
				if(Hours == HOUR_MAX_VAL){
    2000:	80 91 a7 00 	lds	r24, 0x00A7
    2004:	87 31       	cpi	r24, 0x17	; 23
    2006:	19 f4       	brne	.+6      	; 0x200e <Auto_Update+0x40>
					Hours = 0;
    2008:	10 92 a7 00 	sts	0x00A7, r1
    200c:	11 c0       	rjmp	.+34     	; 0x2030 <Auto_Update+0x62>
				}
				else{
					Hours++;
    200e:	80 91 a7 00 	lds	r24, 0x00A7
    2012:	8f 5f       	subi	r24, 0xFF	; 255
    2014:	80 93 a7 00 	sts	0x00A7, r24
    2018:	0b c0       	rjmp	.+22     	; 0x2030 <Auto_Update+0x62>
				}
			}
			else{
				Minutes++;
    201a:	80 91 a8 00 	lds	r24, 0x00A8
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	80 93 a8 00 	sts	0x00A8, r24
    2024:	05 c0       	rjmp	.+10     	; 0x2030 <Auto_Update+0x62>
			}
		}
		else{
			Seconds++;
    2026:	80 91 a9 00 	lds	r24, 0x00A9
    202a:	8f 5f       	subi	r24, 0xFF	; 255
    202c:	80 93 a9 00 	sts	0x00A9, r24
		}
		Period = 50;
    2030:	82 e3       	ldi	r24, 0x32	; 50
    2032:	80 93 6e 00 	sts	0x006E, r24
	}

}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <Manual_Update>:

static void Manual_Update(void){
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <Manual_Update+0x6>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62

	switch(SSD_Mode_g){
    2046:	80 91 90 00 	lds	r24, 0x0090
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3a 83       	std	Y+2, r19	; 0x02
    2050:	29 83       	std	Y+1, r18	; 0x01
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	91 05       	cpc	r25, r1
    205a:	31 f0       	breq	.+12     	; 0x2068 <Manual_Update+0x2c>
    205c:	29 81       	ldd	r18, Y+1	; 0x01
    205e:	3a 81       	ldd	r19, Y+2	; 0x02
    2060:	22 30       	cpi	r18, 0x02	; 2
    2062:	31 05       	cpc	r19, r1
    2064:	f9 f0       	breq	.+62     	; 0x20a4 <Manual_Update+0x68>
    2066:	3b c0       	rjmp	.+118    	; 0x20de <Manual_Update+0xa2>
	case SSD_NORMAL_MODE:
		/* Time Update Automatic */
		break;
	case SSD_SETTING_HOURS_MODE:
		if(SW_PRESSED == SW_g[SW_UP].state){
    2068:	80 91 6a 00 	lds	r24, 0x006A
    206c:	80 78       	andi	r24, 0x80	; 128
    206e:	88 23       	and	r24, r24
    2070:	51 f4       	brne	.+20     	; 0x2086 <Manual_Update+0x4a>
			if(Hours < HOUR_MAX_VAL){
    2072:	80 91 a7 00 	lds	r24, 0x00A7
    2076:	87 31       	cpi	r24, 0x17	; 23
    2078:	90 f5       	brcc	.+100    	; 0x20de <Manual_Update+0xa2>
				Hours++;
    207a:	80 91 a7 00 	lds	r24, 0x00A7
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	80 93 a7 00 	sts	0x00A7, r24
    2084:	2c c0       	rjmp	.+88     	; 0x20de <Manual_Update+0xa2>
			}
		}
		else if(SW_PRESSED == SW_g[SW_DOWN].state){
    2086:	80 91 6c 00 	lds	r24, 0x006C
    208a:	80 78       	andi	r24, 0x80	; 128
    208c:	88 23       	and	r24, r24
    208e:	39 f5       	brne	.+78     	; 0x20de <Manual_Update+0xa2>
			if(Hours > 0){
    2090:	80 91 a7 00 	lds	r24, 0x00A7
    2094:	88 23       	and	r24, r24
    2096:	19 f1       	breq	.+70     	; 0x20de <Manual_Update+0xa2>
				Hours--;
    2098:	80 91 a7 00 	lds	r24, 0x00A7
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	80 93 a7 00 	sts	0x00A7, r24
    20a2:	1d c0       	rjmp	.+58     	; 0x20de <Manual_Update+0xa2>
			}
		}
		break;
	case SSD_SETTING_MINUTES_MODE:
		if(SW_PRESSED == SW_g[SW_UP].state){
    20a4:	80 91 6a 00 	lds	r24, 0x006A
    20a8:	80 78       	andi	r24, 0x80	; 128
    20aa:	88 23       	and	r24, r24
    20ac:	51 f4       	brne	.+20     	; 0x20c2 <Manual_Update+0x86>
			if(Minutes < MINUTE_MAX_VAL){
    20ae:	80 91 a8 00 	lds	r24, 0x00A8
    20b2:	8b 33       	cpi	r24, 0x3B	; 59
    20b4:	a0 f4       	brcc	.+40     	; 0x20de <Manual_Update+0xa2>
				Minutes++;
    20b6:	80 91 a8 00 	lds	r24, 0x00A8
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	80 93 a8 00 	sts	0x00A8, r24
    20c0:	0e c0       	rjmp	.+28     	; 0x20de <Manual_Update+0xa2>
			}
		}
		else if(SW_PRESSED == SW_g[SW_DOWN].state){
    20c2:	80 91 6c 00 	lds	r24, 0x006C
    20c6:	80 78       	andi	r24, 0x80	; 128
    20c8:	88 23       	and	r24, r24
    20ca:	49 f4       	brne	.+18     	; 0x20de <Manual_Update+0xa2>
			if(Minutes > 0){
    20cc:	80 91 a8 00 	lds	r24, 0x00A8
    20d0:	88 23       	and	r24, r24
    20d2:	29 f0       	breq	.+10     	; 0x20de <Manual_Update+0xa2>
				Minutes--;
    20d4:	80 91 a8 00 	lds	r24, 0x00A8
    20d8:	81 50       	subi	r24, 0x01	; 1
    20da:	80 93 a8 00 	sts	0x00A8, r24
		}
		break;
	default:
		break;
	}
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <Timer0_Init>:
static void (*Timer0_OVF_Fptr) (void)=NULLPTR;
static void (*Timer0_OC_Fptr)  (void)=NULLPTR;
/**********************************Timer 0 ****************************************************/

void Timer0_Init( Timer0Mode_type mode,Timer0Scaler_type scaler,OC0Mode_type oc_mode)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	27 97       	sbiw	r28, 0x07	; 7
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	6a 83       	std	Y+2, r22	; 0x02
    2100:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	3f 83       	std	Y+7, r19	; 0x07
    210a:	2e 83       	std	Y+6, r18	; 0x06
    210c:	8e 81       	ldd	r24, Y+6	; 0x06
    210e:	9f 81       	ldd	r25, Y+7	; 0x07
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	91 05       	cpc	r25, r1
    2114:	21 f1       	breq	.+72     	; 0x215e <Timer0_Init+0x76>
    2116:	2e 81       	ldd	r18, Y+6	; 0x06
    2118:	3f 81       	ldd	r19, Y+7	; 0x07
    211a:	22 30       	cpi	r18, 0x02	; 2
    211c:	31 05       	cpc	r19, r1
    211e:	2c f4       	brge	.+10     	; 0x212a <Timer0_Init+0x42>
    2120:	8e 81       	ldd	r24, Y+6	; 0x06
    2122:	9f 81       	ldd	r25, Y+7	; 0x07
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	61 f0       	breq	.+24     	; 0x2140 <Timer0_Init+0x58>
    2128:	46 c0       	rjmp	.+140    	; 0x21b6 <Timer0_Init+0xce>
    212a:	2e 81       	ldd	r18, Y+6	; 0x06
    212c:	3f 81       	ldd	r19, Y+7	; 0x07
    212e:	22 30       	cpi	r18, 0x02	; 2
    2130:	31 05       	cpc	r19, r1
    2132:	21 f1       	breq	.+72     	; 0x217c <Timer0_Init+0x94>
    2134:	8e 81       	ldd	r24, Y+6	; 0x06
    2136:	9f 81       	ldd	r25, Y+7	; 0x07
    2138:	83 30       	cpi	r24, 0x03	; 3
    213a:	91 05       	cpc	r25, r1
    213c:	71 f1       	breq	.+92     	; 0x219a <Timer0_Init+0xb2>
    213e:	3b c0       	rjmp	.+118    	; 0x21b6 <Timer0_Init+0xce>
	{
		case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM00);
    2140:	a3 e5       	ldi	r26, 0x53	; 83
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e3 e5       	ldi	r30, 0x53	; 83
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8f 7b       	andi	r24, 0xBF	; 191
    214c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    214e:	a3 e5       	ldi	r26, 0x53	; 83
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e3 e5       	ldi	r30, 0x53	; 83
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	87 7f       	andi	r24, 0xF7	; 247
    215a:	8c 93       	st	X, r24
    215c:	2c c0       	rjmp	.+88     	; 0x21b6 <Timer0_Init+0xce>
		break;
		case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    215e:	a3 e5       	ldi	r26, 0x53	; 83
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e3 e5       	ldi	r30, 0x53	; 83
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	80 64       	ori	r24, 0x40	; 64
    216a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    216c:	a3 e5       	ldi	r26, 0x53	; 83
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e3 e5       	ldi	r30, 0x53	; 83
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	87 7f       	andi	r24, 0xF7	; 247
    2178:	8c 93       	st	X, r24
    217a:	1d c0       	rjmp	.+58     	; 0x21b6 <Timer0_Init+0xce>
		break;
		case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,WGM00);
    217c:	a3 e5       	ldi	r26, 0x53	; 83
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e3 e5       	ldi	r30, 0x53	; 83
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	8f 7b       	andi	r24, 0xBF	; 191
    2188:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    218a:	a3 e5       	ldi	r26, 0x53	; 83
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e3 e5       	ldi	r30, 0x53	; 83
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	88 60       	ori	r24, 0x08	; 8
    2196:	8c 93       	st	X, r24
    2198:	0e c0       	rjmp	.+28     	; 0x21b6 <Timer0_Init+0xce>
		break;
		case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,WGM00);
    219a:	a3 e5       	ldi	r26, 0x53	; 83
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e3 e5       	ldi	r30, 0x53	; 83
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	80 64       	ori	r24, 0x40	; 64
    21a6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    21a8:	a3 e5       	ldi	r26, 0x53	; 83
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e3 e5       	ldi	r30, 0x53	; 83
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	88 60       	ori	r24, 0x08	; 8
    21b4:	8c 93       	st	X, r24
		break;
	}

	TCCR0&=0XF8;
    21b6:	a3 e5       	ldi	r26, 0x53	; 83
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e3 e5       	ldi	r30, 0x53	; 83
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	88 7f       	andi	r24, 0xF8	; 248
    21c2:	8c 93       	st	X, r24
	TCCR0|=scaler;
    21c4:	a3 e5       	ldi	r26, 0x53	; 83
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e3 e5       	ldi	r30, 0x53	; 83
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	90 81       	ld	r25, Z
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	89 2b       	or	r24, r25
    21d2:	8c 93       	st	X, r24

	switch (oc_mode)
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	3d 83       	std	Y+5, r19	; 0x05
    21dc:	2c 83       	std	Y+4, r18	; 0x04
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	91 05       	cpc	r25, r1
    21e6:	21 f1       	breq	.+72     	; 0x2230 <Timer0_Init+0x148>
    21e8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ea:	3d 81       	ldd	r19, Y+5	; 0x05
    21ec:	22 30       	cpi	r18, 0x02	; 2
    21ee:	31 05       	cpc	r19, r1
    21f0:	2c f4       	brge	.+10     	; 0x21fc <Timer0_Init+0x114>
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	61 f0       	breq	.+24     	; 0x2212 <Timer0_Init+0x12a>
    21fa:	46 c0       	rjmp	.+140    	; 0x2288 <Timer0_Init+0x1a0>
    21fc:	2c 81       	ldd	r18, Y+4	; 0x04
    21fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2200:	22 30       	cpi	r18, 0x02	; 2
    2202:	31 05       	cpc	r19, r1
    2204:	21 f1       	breq	.+72     	; 0x224e <Timer0_Init+0x166>
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	9d 81       	ldd	r25, Y+5	; 0x05
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	91 05       	cpc	r25, r1
    220e:	71 f1       	breq	.+92     	; 0x226c <Timer0_Init+0x184>
    2210:	3b c0       	rjmp	.+118    	; 0x2288 <Timer0_Init+0x1a0>
	{
		case OCO_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
    2212:	a3 e5       	ldi	r26, 0x53	; 83
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e3 e5       	ldi	r30, 0x53	; 83
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8f 7e       	andi	r24, 0xEF	; 239
    221e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    2220:	a3 e5       	ldi	r26, 0x53	; 83
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e3 e5       	ldi	r30, 0x53	; 83
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	8f 7d       	andi	r24, 0xDF	; 223
    222c:	8c 93       	st	X, r24
    222e:	2c c0       	rjmp	.+88     	; 0x2288 <Timer0_Init+0x1a0>
		break;
		case OCO_TOGGLE:
		SET_BIT(TCCR0,COM00);
    2230:	a3 e5       	ldi	r26, 0x53	; 83
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e3 e5       	ldi	r30, 0x53	; 83
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	80 61       	ori	r24, 0x10	; 16
    223c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    223e:	a3 e5       	ldi	r26, 0x53	; 83
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e3 e5       	ldi	r30, 0x53	; 83
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8f 7d       	andi	r24, 0xDF	; 223
    224a:	8c 93       	st	X, r24
    224c:	1d c0       	rjmp	.+58     	; 0x2288 <Timer0_Init+0x1a0>
		break;
		case OCO_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
    224e:	a3 e5       	ldi	r26, 0x53	; 83
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e3 e5       	ldi	r30, 0x53	; 83
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8f 7e       	andi	r24, 0xEF	; 239
    225a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    225c:	a3 e5       	ldi	r26, 0x53	; 83
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e3 e5       	ldi	r30, 0x53	; 83
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	80 62       	ori	r24, 0x20	; 32
    2268:	8c 93       	st	X, r24
    226a:	0e c0       	rjmp	.+28     	; 0x2288 <Timer0_Init+0x1a0>
		break;
		case OCO_INVERTING:
		SET_BIT(TCCR0,COM00);
    226c:	a3 e5       	ldi	r26, 0x53	; 83
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e3 e5       	ldi	r30, 0x53	; 83
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 61       	ori	r24, 0x10	; 16
    2278:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    227a:	a3 e5       	ldi	r26, 0x53	; 83
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e3 e5       	ldi	r30, 0x53	; 83
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	80 62       	ori	r24, 0x20	; 32
    2286:	8c 93       	st	X, r24
		break;
	}
	

}
    2288:	27 96       	adiw	r28, 0x07	; 7
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <Timer0_OV_InterruptEnable>:
void Timer0_OV_InterruptEnable(void)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    22a2:	a9 e5       	ldi	r26, 0x59	; 89
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e9 e5       	ldi	r30, 0x59	; 89
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	8c 93       	st	X, r24
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    22be:	a9 e5       	ldi	r26, 0x59	; 89
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e9 e5       	ldi	r30, 0x59	; 89
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8e 7f       	andi	r24, 0xFE	; 254
    22ca:	8c 93       	st	X, r24
}
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    22da:	a9 e5       	ldi	r26, 0x59	; 89
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e9 e5       	ldi	r30, 0x59	; 89
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	82 60       	ori	r24, 0x02	; 2
    22e6:	8c 93       	st	X, r24
}
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
    22f6:	a9 e5       	ldi	r26, 0x59	; 89
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e9 e5       	ldi	r30, 0x59	; 89
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	8d 7f       	andi	r24, 0xFD	; 253
    2302:	8c 93       	st	X, r24
}
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <Timer0_OVF_SetCallBack>:

/*******************************************TIMER 0 call Back function***************************************/

void Timer0_OVF_SetCallBack(void(*LocalFptr)(void))
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <Timer0_OVF_SetCallBack+0x6>
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr=LocalFptr;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	90 93 b3 00 	sts	0x00B3, r25
    2320:	80 93 b2 00 	sts	0x00B2, r24
}
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <Timer0_Oc_SetCallBack>:

void Timer0_Oc_SetCallBack(void(*LocalFptr)(void))
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <Timer0_Oc_SetCallBack+0x6>
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OC_Fptr=LocalFptr;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	90 93 b5 00 	sts	0x00B5, r25
    2344:	80 93 b4 00 	sts	0x00B4, r24
}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <__vector_11>:

/*********************************Timer 0 ISR functions*********************************************/

ISR(TIMER0_OVF_vect)
{
    2352:	1f 92       	push	r1
    2354:	0f 92       	push	r0
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	0f 92       	push	r0
    235a:	11 24       	eor	r1, r1
    235c:	2f 93       	push	r18
    235e:	3f 93       	push	r19
    2360:	4f 93       	push	r20
    2362:	5f 93       	push	r21
    2364:	6f 93       	push	r22
    2366:	7f 93       	push	r23
    2368:	8f 93       	push	r24
    236a:	9f 93       	push	r25
    236c:	af 93       	push	r26
    236e:	bf 93       	push	r27
    2370:	ef 93       	push	r30
    2372:	ff 93       	push	r31
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_OVF_Fptr!=NULLPTR)
    237c:	80 91 b2 00 	lds	r24, 0x00B2
    2380:	90 91 b3 00 	lds	r25, 0x00B3
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	29 f0       	breq	.+10     	; 0x2392 <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
    2388:	e0 91 b2 00 	lds	r30, 0x00B2
    238c:	f0 91 b3 00 	lds	r31, 0x00B3
    2390:	09 95       	icall
	}
}
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	ff 91       	pop	r31
    2398:	ef 91       	pop	r30
    239a:	bf 91       	pop	r27
    239c:	af 91       	pop	r26
    239e:	9f 91       	pop	r25
    23a0:	8f 91       	pop	r24
    23a2:	7f 91       	pop	r23
    23a4:	6f 91       	pop	r22
    23a6:	5f 91       	pop	r21
    23a8:	4f 91       	pop	r20
    23aa:	3f 91       	pop	r19
    23ac:	2f 91       	pop	r18
    23ae:	0f 90       	pop	r0
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	0f 90       	pop	r0
    23b4:	1f 90       	pop	r1
    23b6:	18 95       	reti

000023b8 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    23b8:	1f 92       	push	r1
    23ba:	0f 92       	push	r0
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	0f 92       	push	r0
    23c0:	11 24       	eor	r1, r1
    23c2:	2f 93       	push	r18
    23c4:	3f 93       	push	r19
    23c6:	4f 93       	push	r20
    23c8:	5f 93       	push	r21
    23ca:	6f 93       	push	r22
    23cc:	7f 93       	push	r23
    23ce:	8f 93       	push	r24
    23d0:	9f 93       	push	r25
    23d2:	af 93       	push	r26
    23d4:	bf 93       	push	r27
    23d6:	ef 93       	push	r30
    23d8:	ff 93       	push	r31
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_OC_Fptr!=NULLPTR)
    23e2:	80 91 b4 00 	lds	r24, 0x00B4
    23e6:	90 91 b5 00 	lds	r25, 0x00B5
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	29 f0       	breq	.+10     	; 0x23f8 <__vector_10+0x40>
	{
		Timer0_OC_Fptr();
    23ee:	e0 91 b4 00 	lds	r30, 0x00B4
    23f2:	f0 91 b5 00 	lds	r31, 0x00B5
    23f6:	09 95       	icall
	}
}
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	ff 91       	pop	r31
    23fe:	ef 91       	pop	r30
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	7f 91       	pop	r23
    240a:	6f 91       	pop	r22
    240c:	5f 91       	pop	r21
    240e:	4f 91       	pop	r20
    2410:	3f 91       	pop	r19
    2412:	2f 91       	pop	r18
    2414:	0f 90       	pop	r0
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	0f 90       	pop	r0
    241a:	1f 90       	pop	r1
    241c:	18 95       	reti

0000241e <Timer1_Init>:

/*************************************************TIMER 1 **************************************************/


void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler,OC1A_Mode_type oc1a_mode,OC1B_Mode_type oc1b_mode)
{
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	2a 97       	sbiw	r28, 0x0a	; 10
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	6a 83       	std	Y+2, r22	; 0x02
    2436:	4b 83       	std	Y+3, r20	; 0x03
    2438:	2c 83       	std	Y+4, r18	; 0x04
	switch (mode)
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	3a 87       	std	Y+10, r19	; 0x0a
    2442:	29 87       	std	Y+9, r18	; 0x09
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	83 30       	cpi	r24, 0x03	; 3
    244a:	91 05       	cpc	r25, r1
    244c:	09 f4       	brne	.+2      	; 0x2450 <Timer1_Init+0x32>
    244e:	7f c0       	rjmp	.+254    	; 0x254e <Timer1_Init+0x130>
    2450:	29 85       	ldd	r18, Y+9	; 0x09
    2452:	3a 85       	ldd	r19, Y+10	; 0x0a
    2454:	24 30       	cpi	r18, 0x04	; 4
    2456:	31 05       	cpc	r19, r1
    2458:	84 f4       	brge	.+32     	; 0x247a <Timer1_Init+0x5c>
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	91 05       	cpc	r25, r1
    2462:	d9 f1       	breq	.+118    	; 0x24da <Timer1_Init+0xbc>
    2464:	29 85       	ldd	r18, Y+9	; 0x09
    2466:	3a 85       	ldd	r19, Y+10	; 0x0a
    2468:	22 30       	cpi	r18, 0x02	; 2
    246a:	31 05       	cpc	r19, r1
    246c:	0c f0       	brlt	.+2      	; 0x2470 <Timer1_Init+0x52>
    246e:	52 c0       	rjmp	.+164    	; 0x2514 <Timer1_Init+0xf6>
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	a1 f0       	breq	.+40     	; 0x24a0 <Timer1_Init+0x82>
    2478:	dd c0       	rjmp	.+442    	; 0x2634 <Timer1_Init+0x216>
    247a:	29 85       	ldd	r18, Y+9	; 0x09
    247c:	3a 85       	ldd	r19, Y+10	; 0x0a
    247e:	25 30       	cpi	r18, 0x05	; 5
    2480:	31 05       	cpc	r19, r1
    2482:	09 f4       	brne	.+2      	; 0x2486 <Timer1_Init+0x68>
    2484:	9e c0       	rjmp	.+316    	; 0x25c2 <Timer1_Init+0x1a4>
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	85 30       	cpi	r24, 0x05	; 5
    248c:	91 05       	cpc	r25, r1
    248e:	0c f4       	brge	.+2      	; 0x2492 <Timer1_Init+0x74>
    2490:	7b c0       	rjmp	.+246    	; 0x2588 <Timer1_Init+0x16a>
    2492:	29 85       	ldd	r18, Y+9	; 0x09
    2494:	3a 85       	ldd	r19, Y+10	; 0x0a
    2496:	26 30       	cpi	r18, 0x06	; 6
    2498:	31 05       	cpc	r19, r1
    249a:	09 f4       	brne	.+2      	; 0x249e <Timer1_Init+0x80>
    249c:	af c0       	rjmp	.+350    	; 0x25fc <Timer1_Init+0x1de>
    249e:	ca c0       	rjmp	.+404    	; 0x2634 <Timer1_Init+0x216>
	{
		case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A,WGM10);
    24a0:	af e4       	ldi	r26, 0x4F	; 79
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ef e4       	ldi	r30, 0x4F	; 79
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	8e 7f       	andi	r24, 0xFE	; 254
    24ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    24ae:	af e4       	ldi	r26, 0x4F	; 79
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ef e4       	ldi	r30, 0x4F	; 79
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	8d 7f       	andi	r24, 0xFD	; 253
    24ba:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
    24bc:	ae e4       	ldi	r26, 0x4E	; 78
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	ee e4       	ldi	r30, 0x4E	; 78
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	87 7f       	andi	r24, 0xF7	; 247
    24c8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
    24ca:	ae e4       	ldi	r26, 0x4E	; 78
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	ee e4       	ldi	r30, 0x4E	; 78
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	8f 7e       	andi	r24, 0xEF	; 239
    24d6:	8c 93       	st	X, r24
    24d8:	ad c0       	rjmp	.+346    	; 0x2634 <Timer1_Init+0x216>
		break;
		case TIMER1_CTC_ICR_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
    24da:	af e4       	ldi	r26, 0x4F	; 79
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	ef e4       	ldi	r30, 0x4F	; 79
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	8e 7f       	andi	r24, 0xFE	; 254
    24e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    24e8:	af e4       	ldi	r26, 0x4F	; 79
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ef e4       	ldi	r30, 0x4F	; 79
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8d 7f       	andi	r24, 0xFD	; 253
    24f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    24f6:	ae e4       	ldi	r26, 0x4E	; 78
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	ee e4       	ldi	r30, 0x4E	; 78
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	88 60       	ori	r24, 0x08	; 8
    2502:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    2504:	ae e4       	ldi	r26, 0x4E	; 78
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	ee e4       	ldi	r30, 0x4E	; 78
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	80 61       	ori	r24, 0x10	; 16
    2510:	8c 93       	st	X, r24
    2512:	90 c0       	rjmp	.+288    	; 0x2634 <Timer1_Init+0x216>
		break;
		
		case TIMER1_CTC_OCRA_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
    2514:	af e4       	ldi	r26, 0x4F	; 79
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	ef e4       	ldi	r30, 0x4F	; 79
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8e 7f       	andi	r24, 0xFE	; 254
    2520:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    2522:	af e4       	ldi	r26, 0x4F	; 79
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	ef e4       	ldi	r30, 0x4F	; 79
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8d 7f       	andi	r24, 0xFD	; 253
    252e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    2530:	ae e4       	ldi	r26, 0x4E	; 78
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	ee e4       	ldi	r30, 0x4E	; 78
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	88 60       	ori	r24, 0x08	; 8
    253c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
    253e:	ae e4       	ldi	r26, 0x4E	; 78
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	ee e4       	ldi	r30, 0x4E	; 78
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	8f 7e       	andi	r24, 0xEF	; 239
    254a:	8c 93       	st	X, r24
    254c:	73 c0       	rjmp	.+230    	; 0x2634 <Timer1_Init+0x216>
		break;
		
		case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
    254e:	af e4       	ldi	r26, 0x4F	; 79
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ef e4       	ldi	r30, 0x4F	; 79
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8e 7f       	andi	r24, 0xFE	; 254
    255a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    255c:	af e4       	ldi	r26, 0x4F	; 79
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ef e4       	ldi	r30, 0x4F	; 79
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	82 60       	ori	r24, 0x02	; 2
    2568:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    256a:	ae e4       	ldi	r26, 0x4E	; 78
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	ee e4       	ldi	r30, 0x4E	; 78
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	88 60       	ori	r24, 0x08	; 8
    2576:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    2578:	ae e4       	ldi	r26, 0x4E	; 78
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	ee e4       	ldi	r30, 0x4E	; 78
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	80 61       	ori	r24, 0x10	; 16
    2584:	8c 93       	st	X, r24
    2586:	56 c0       	rjmp	.+172    	; 0x2634 <Timer1_Init+0x216>
		break;
		
		case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
    2588:	af e4       	ldi	r26, 0x4F	; 79
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	ef e4       	ldi	r30, 0x4F	; 79
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	81 60       	ori	r24, 0x01	; 1
    2594:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    2596:	af e4       	ldi	r26, 0x4F	; 79
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	ef e4       	ldi	r30, 0x4F	; 79
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	82 60       	ori	r24, 0x02	; 2
    25a2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    25a4:	ae e4       	ldi	r26, 0x4E	; 78
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	ee e4       	ldi	r30, 0x4E	; 78
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	88 60       	ori	r24, 0x08	; 8
    25b0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    25b2:	ae e4       	ldi	r26, 0x4E	; 78
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	ee e4       	ldi	r30, 0x4E	; 78
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 61       	ori	r24, 0x10	; 16
    25be:	8c 93       	st	X, r24
    25c0:	39 c0       	rjmp	.+114    	; 0x2634 <Timer1_Init+0x216>
		break;
		
		case TIMER1_PHASECORRECT_ICR_MODE:
		CLR_BIT(TCCR1A,WGM10);
    25c2:	af e4       	ldi	r26, 0x4F	; 79
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	ef e4       	ldi	r30, 0x4F	; 79
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8e 7f       	andi	r24, 0xFE	; 254
    25ce:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    25d0:	af e4       	ldi	r26, 0x4F	; 79
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	ef e4       	ldi	r30, 0x4F	; 79
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	82 60       	ori	r24, 0x02	; 2
    25dc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
    25de:	ae e4       	ldi	r26, 0x4E	; 78
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	ee e4       	ldi	r30, 0x4E	; 78
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	87 7f       	andi	r24, 0xF7	; 247
    25ea:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    25ec:	ae e4       	ldi	r26, 0x4E	; 78
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ee e4       	ldi	r30, 0x4E	; 78
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	80 61       	ori	r24, 0x10	; 16
    25f8:	8c 93       	st	X, r24
    25fa:	1c c0       	rjmp	.+56     	; 0x2634 <Timer1_Init+0x216>
		break;
		
		case TIMER1_PHASECORRECT_OCRA_MODE:
		SET_BIT(TCCR1A,WGM10);
    25fc:	af e4       	ldi	r26, 0x4F	; 79
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	ef e4       	ldi	r30, 0x4F	; 79
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	81 60       	ori	r24, 0x01	; 1
    2608:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    260a:	af e4       	ldi	r26, 0x4F	; 79
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	ef e4       	ldi	r30, 0x4F	; 79
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	82 60       	ori	r24, 0x02	; 2
    2616:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
    2618:	ae e4       	ldi	r26, 0x4E	; 78
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	ee e4       	ldi	r30, 0x4E	; 78
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	87 7f       	andi	r24, 0xF7	; 247
    2624:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    2626:	ae e4       	ldi	r26, 0x4E	; 78
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	ee e4       	ldi	r30, 0x4E	; 78
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	80 61       	ori	r24, 0x10	; 16
    2632:	8c 93       	st	X, r24
		break;
	}
	switch (oc1a_mode)
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	38 87       	std	Y+8, r19	; 0x08
    263c:	2f 83       	std	Y+7, r18	; 0x07
    263e:	8f 81       	ldd	r24, Y+7	; 0x07
    2640:	98 85       	ldd	r25, Y+8	; 0x08
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	91 05       	cpc	r25, r1
    2646:	21 f1       	breq	.+72     	; 0x2690 <Timer1_Init+0x272>
    2648:	2f 81       	ldd	r18, Y+7	; 0x07
    264a:	38 85       	ldd	r19, Y+8	; 0x08
    264c:	22 30       	cpi	r18, 0x02	; 2
    264e:	31 05       	cpc	r19, r1
    2650:	2c f4       	brge	.+10     	; 0x265c <Timer1_Init+0x23e>
    2652:	8f 81       	ldd	r24, Y+7	; 0x07
    2654:	98 85       	ldd	r25, Y+8	; 0x08
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	61 f0       	breq	.+24     	; 0x2672 <Timer1_Init+0x254>
    265a:	46 c0       	rjmp	.+140    	; 0x26e8 <Timer1_Init+0x2ca>
    265c:	2f 81       	ldd	r18, Y+7	; 0x07
    265e:	38 85       	ldd	r19, Y+8	; 0x08
    2660:	22 30       	cpi	r18, 0x02	; 2
    2662:	31 05       	cpc	r19, r1
    2664:	21 f1       	breq	.+72     	; 0x26ae <Timer1_Init+0x290>
    2666:	8f 81       	ldd	r24, Y+7	; 0x07
    2668:	98 85       	ldd	r25, Y+8	; 0x08
    266a:	83 30       	cpi	r24, 0x03	; 3
    266c:	91 05       	cpc	r25, r1
    266e:	71 f1       	breq	.+92     	; 0x26cc <Timer1_Init+0x2ae>
    2670:	3b c0       	rjmp	.+118    	; 0x26e8 <Timer1_Init+0x2ca>
	{
		case OCRA_DISCONNECTED:
		CLR_BIT(TCCR1A,COM1A0);
    2672:	af e4       	ldi	r26, 0x4F	; 79
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ef e4       	ldi	r30, 0x4F	; 79
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 7b       	andi	r24, 0xBF	; 191
    267e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1A1);
    2680:	af e4       	ldi	r26, 0x4F	; 79
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	ef e4       	ldi	r30, 0x4F	; 79
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	8f 77       	andi	r24, 0x7F	; 127
    268c:	8c 93       	st	X, r24
    268e:	2c c0       	rjmp	.+88     	; 0x26e8 <Timer1_Init+0x2ca>
		break;
		case OCRA_TOGGLE:
		SET_BIT(TCCR1A,COM1A0);
    2690:	af e4       	ldi	r26, 0x4F	; 79
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ef e4       	ldi	r30, 0x4F	; 79
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	80 64       	ori	r24, 0x40	; 64
    269c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1A1);
    269e:	af e4       	ldi	r26, 0x4F	; 79
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ef e4       	ldi	r30, 0x4F	; 79
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 77       	andi	r24, 0x7F	; 127
    26aa:	8c 93       	st	X, r24
    26ac:	1d c0       	rjmp	.+58     	; 0x26e8 <Timer1_Init+0x2ca>
		break;
		case OCRA_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1A0);
    26ae:	af e4       	ldi	r26, 0x4F	; 79
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	ef e4       	ldi	r30, 0x4F	; 79
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8f 7b       	andi	r24, 0xBF	; 191
    26ba:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    26bc:	af e4       	ldi	r26, 0x4F	; 79
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	ef e4       	ldi	r30, 0x4F	; 79
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	80 68       	ori	r24, 0x80	; 128
    26c8:	8c 93       	st	X, r24
    26ca:	0e c0       	rjmp	.+28     	; 0x26e8 <Timer1_Init+0x2ca>
		break;
		case OCRA_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    26cc:	af e4       	ldi	r26, 0x4F	; 79
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	ef e4       	ldi	r30, 0x4F	; 79
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	80 64       	ori	r24, 0x40	; 64
    26d8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    26da:	af e4       	ldi	r26, 0x4F	; 79
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	ef e4       	ldi	r30, 0x4F	; 79
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	80 68       	ori	r24, 0x80	; 128
    26e6:	8c 93       	st	X, r24
		break;
	}
	switch (oc1b_mode)
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	3e 83       	std	Y+6, r19	; 0x06
    26f0:	2d 83       	std	Y+5, r18	; 0x05
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	81 30       	cpi	r24, 0x01	; 1
    26f8:	91 05       	cpc	r25, r1
    26fa:	21 f1       	breq	.+72     	; 0x2744 <Timer1_Init+0x326>
    26fc:	2d 81       	ldd	r18, Y+5	; 0x05
    26fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2700:	22 30       	cpi	r18, 0x02	; 2
    2702:	31 05       	cpc	r19, r1
    2704:	2c f4       	brge	.+10     	; 0x2710 <Timer1_Init+0x2f2>
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	61 f0       	breq	.+24     	; 0x2726 <Timer1_Init+0x308>
    270e:	46 c0       	rjmp	.+140    	; 0x279c <Timer1_Init+0x37e>
    2710:	2d 81       	ldd	r18, Y+5	; 0x05
    2712:	3e 81       	ldd	r19, Y+6	; 0x06
    2714:	22 30       	cpi	r18, 0x02	; 2
    2716:	31 05       	cpc	r19, r1
    2718:	21 f1       	breq	.+72     	; 0x2762 <Timer1_Init+0x344>
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	83 30       	cpi	r24, 0x03	; 3
    2720:	91 05       	cpc	r25, r1
    2722:	71 f1       	breq	.+92     	; 0x2780 <Timer1_Init+0x362>
    2724:	3b c0       	rjmp	.+118    	; 0x279c <Timer1_Init+0x37e>
	{
		case OCRB_DISCONNECTED:
		CLR_BIT(TCCR1A,COM1B0);
    2726:	af e4       	ldi	r26, 0x4F	; 79
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ef e4       	ldi	r30, 0x4F	; 79
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8f 7e       	andi	r24, 0xEF	; 239
    2732:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1B1);
    2734:	af e4       	ldi	r26, 0x4F	; 79
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	ef e4       	ldi	r30, 0x4F	; 79
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	8f 7d       	andi	r24, 0xDF	; 223
    2740:	8c 93       	st	X, r24
    2742:	2c c0       	rjmp	.+88     	; 0x279c <Timer1_Init+0x37e>
		break;
		case OCRB_TOGGLE:
		SET_BIT(TCCR1A,COM1B0);
    2744:	af e4       	ldi	r26, 0x4F	; 79
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ef e4       	ldi	r30, 0x4F	; 79
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	80 61       	ori	r24, 0x10	; 16
    2750:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1B1);
    2752:	af e4       	ldi	r26, 0x4F	; 79
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ef e4       	ldi	r30, 0x4F	; 79
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	8f 7d       	andi	r24, 0xDF	; 223
    275e:	8c 93       	st	X, r24
    2760:	1d c0       	rjmp	.+58     	; 0x279c <Timer1_Init+0x37e>
		break;
		case OCRB_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1B0);
    2762:	af e4       	ldi	r26, 0x4F	; 79
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	ef e4       	ldi	r30, 0x4F	; 79
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	8f 7e       	andi	r24, 0xEF	; 239
    276e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    2770:	af e4       	ldi	r26, 0x4F	; 79
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	ef e4       	ldi	r30, 0x4F	; 79
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	80 62       	ori	r24, 0x20	; 32
    277c:	8c 93       	st	X, r24
    277e:	0e c0       	rjmp	.+28     	; 0x279c <Timer1_Init+0x37e>
		break;
		case OCRB_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    2780:	af e4       	ldi	r26, 0x4F	; 79
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	ef e4       	ldi	r30, 0x4F	; 79
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	80 61       	ori	r24, 0x10	; 16
    278c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    278e:	af e4       	ldi	r26, 0x4F	; 79
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	ef e4       	ldi	r30, 0x4F	; 79
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	80 62       	ori	r24, 0x20	; 32
    279a:	8c 93       	st	X, r24
		break;
	}
	
	
	TCCR1B&=0XF8;
    279c:	ae e4       	ldi	r26, 0x4E	; 78
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	ee e4       	ldi	r30, 0x4E	; 78
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	88 7f       	andi	r24, 0xF8	; 248
    27a8:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    27aa:	ae e4       	ldi	r26, 0x4E	; 78
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	ee e4       	ldi	r30, 0x4E	; 78
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	90 81       	ld	r25, Z
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	89 2b       	or	r24, r25
    27b8:	8c 93       	st	X, r24

}
    27ba:	2a 96       	adiw	r28, 0x0a	; 10
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	0f 92       	push	r0
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	88 23       	and	r24, r24
    27dc:	41 f4       	brne	.+16     	; 0x27ee <Timer1_InputCaptureEdge+0x22>
	SET_BIT(TCCR1B,ICES1);
    27de:	ae e4       	ldi	r26, 0x4E	; 78
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ee e4       	ldi	r30, 0x4E	; 78
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	80 64       	ori	r24, 0x40	; 64
    27ea:	8c 93       	st	X, r24
    27ec:	0a c0       	rjmp	.+20     	; 0x2802 <Timer1_InputCaptureEdge+0x36>
	
	else if(edge==FALLING)
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	39 f4       	brne	.+14     	; 0x2802 <Timer1_InputCaptureEdge+0x36>
	CLR_BIT(TCCR1B,ICES1);
    27f4:	ae e4       	ldi	r26, 0x4E	; 78
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	ee e4       	ldi	r30, 0x4E	; 78
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	8f 7b       	andi	r24, 0xBF	; 191
    2800:	8c 93       	st	X, r24

}
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <Timer1_WriteToTCNT1>:

void Timer1_WriteToTCNT1(u16 Value)
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	00 d0       	rcall	.+0      	; 0x2810 <Timer1_WriteToTCNT1+0x6>
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01
	ASSIGN_REG(TCNT1 , Value);
    2818:	ec e4       	ldi	r30, 0x4C	; 76
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <Timer1_ReadTCNT1>:


u16 Timer1_ReadTCNT1(void)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;	
    2836:	ec e4       	ldi	r30, 0x4C	; 76
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
}
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <Timer1_ICU_InterruptEnable>:

/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    284c:	a9 e5       	ldi	r26, 0x59	; 89
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e9 e5       	ldi	r30, 0x59	; 89
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 62       	ori	r24, 0x20	; 32
    2858:	8c 93       	st	X, r24
}
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    2868:	a9 e5       	ldi	r26, 0x59	; 89
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	e9 e5       	ldi	r30, 0x59	; 89
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	8f 7d       	andi	r24, 0xDF	; 223
    2874:	8c 93       	st	X, r24
}
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    2884:	a9 e5       	ldi	r26, 0x59	; 89
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e9 e5       	ldi	r30, 0x59	; 89
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	84 60       	ori	r24, 0x04	; 4
    2890:	8c 93       	st	X, r24
}
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    28a0:	a9 e5       	ldi	r26, 0x59	; 89
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e9 e5       	ldi	r30, 0x59	; 89
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	8b 7f       	andi	r24, 0xFB	; 251
    28ac:	8c 93       	st	X, r24
}
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    28bc:	a9 e5       	ldi	r26, 0x59	; 89
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e9 e5       	ldi	r30, 0x59	; 89
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	80 61       	ori	r24, 0x10	; 16
    28c8:	8c 93       	st	X, r24
}
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1A);
    28d8:	a9 e5       	ldi	r26, 0x59	; 89
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e9 e5       	ldi	r30, 0x59	; 89
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	8f 7e       	andi	r24, 0xEF	; 239
    28e4:	8c 93       	st	X, r24
}
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    28f4:	a9 e5       	ldi	r26, 0x59	; 89
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e9 e5       	ldi	r30, 0x59	; 89
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	88 60       	ori	r24, 0x08	; 8
    2900:	8c 93       	st	X, r24
}
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1B);
    2910:	a9 e5       	ldi	r26, 0x59	; 89
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e9 e5       	ldi	r30, 0x59	; 89
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	87 7f       	andi	r24, 0xF7	; 247
    291c:	8c 93       	st	X, r24
}
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	00 d0       	rcall	.+0      	; 0x292a <Timer1_OVF_SetCallBack+0x6>
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	9a 81       	ldd	r25, Y+2	; 0x02
    2936:	90 93 ab 00 	sts	0x00AB, r25
    293a:	80 93 aa 00 	sts	0x00AA, r24
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <Timer1_OCA_SetCallBack+0x6>
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	9a 83       	std	Y+2, r25	; 0x02
    2954:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	90 93 ad 00 	sts	0x00AD, r25
    295e:	80 93 ac 00 	sts	0x00AC, r24
}
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <Timer1_OCB_SetCallBack+0x6>
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	90 93 af 00 	sts	0x00AF, r25
    2982:	80 93 ae 00 	sts	0x00AE, r24
}
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	00 d0       	rcall	.+0      	; 0x2996 <Timer1_ICU_SetCallBack+0x6>
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	9a 81       	ldd	r25, Y+2	; 0x02
    29a2:	90 93 b1 00 	sts	0x00B1, r25
    29a6:	80 93 b0 00 	sts	0x00B0, r24
}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    29b4:	1f 92       	push	r1
    29b6:	0f 92       	push	r0
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	0f 92       	push	r0
    29bc:	11 24       	eor	r1, r1
    29be:	2f 93       	push	r18
    29c0:	3f 93       	push	r19
    29c2:	4f 93       	push	r20
    29c4:	5f 93       	push	r21
    29c6:	6f 93       	push	r22
    29c8:	7f 93       	push	r23
    29ca:	8f 93       	push	r24
    29cc:	9f 93       	push	r25
    29ce:	af 93       	push	r26
    29d0:	bf 93       	push	r27
    29d2:	ef 93       	push	r30
    29d4:	ff 93       	push	r31
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULLPTR)
    29de:	80 91 aa 00 	lds	r24, 0x00AA
    29e2:	90 91 ab 00 	lds	r25, 0x00AB
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	29 f0       	breq	.+10     	; 0x29f4 <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    29ea:	e0 91 aa 00 	lds	r30, 0x00AA
    29ee:	f0 91 ab 00 	lds	r31, 0x00AB
    29f2:	09 95       	icall
	}
}
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	ff 91       	pop	r31
    29fa:	ef 91       	pop	r30
    29fc:	bf 91       	pop	r27
    29fe:	af 91       	pop	r26
    2a00:	9f 91       	pop	r25
    2a02:	8f 91       	pop	r24
    2a04:	7f 91       	pop	r23
    2a06:	6f 91       	pop	r22
    2a08:	5f 91       	pop	r21
    2a0a:	4f 91       	pop	r20
    2a0c:	3f 91       	pop	r19
    2a0e:	2f 91       	pop	r18
    2a10:	0f 90       	pop	r0
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	0f 90       	pop	r0
    2a16:	1f 90       	pop	r1
    2a18:	18 95       	reti

00002a1a <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    2a1a:	1f 92       	push	r1
    2a1c:	0f 92       	push	r0
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	0f 92       	push	r0
    2a22:	11 24       	eor	r1, r1
    2a24:	2f 93       	push	r18
    2a26:	3f 93       	push	r19
    2a28:	4f 93       	push	r20
    2a2a:	5f 93       	push	r21
    2a2c:	6f 93       	push	r22
    2a2e:	7f 93       	push	r23
    2a30:	8f 93       	push	r24
    2a32:	9f 93       	push	r25
    2a34:	af 93       	push	r26
    2a36:	bf 93       	push	r27
    2a38:	ef 93       	push	r30
    2a3a:	ff 93       	push	r31
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULLPTR)
    2a44:	80 91 ac 00 	lds	r24, 0x00AC
    2a48:	90 91 ad 00 	lds	r25, 0x00AD
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	29 f0       	breq	.+10     	; 0x2a5a <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    2a50:	e0 91 ac 00 	lds	r30, 0x00AC
    2a54:	f0 91 ad 00 	lds	r31, 0x00AD
    2a58:	09 95       	icall
	}
}
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	ff 91       	pop	r31
    2a60:	ef 91       	pop	r30
    2a62:	bf 91       	pop	r27
    2a64:	af 91       	pop	r26
    2a66:	9f 91       	pop	r25
    2a68:	8f 91       	pop	r24
    2a6a:	7f 91       	pop	r23
    2a6c:	6f 91       	pop	r22
    2a6e:	5f 91       	pop	r21
    2a70:	4f 91       	pop	r20
    2a72:	3f 91       	pop	r19
    2a74:	2f 91       	pop	r18
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    2a80:	1f 92       	push	r1
    2a82:	0f 92       	push	r0
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	0f 92       	push	r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	2f 93       	push	r18
    2a8c:	3f 93       	push	r19
    2a8e:	4f 93       	push	r20
    2a90:	5f 93       	push	r21
    2a92:	6f 93       	push	r22
    2a94:	7f 93       	push	r23
    2a96:	8f 93       	push	r24
    2a98:	9f 93       	push	r25
    2a9a:	af 93       	push	r26
    2a9c:	bf 93       	push	r27
    2a9e:	ef 93       	push	r30
    2aa0:	ff 93       	push	r31
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULLPTR)
    2aaa:	80 91 ae 00 	lds	r24, 0x00AE
    2aae:	90 91 af 00 	lds	r25, 0x00AF
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	29 f0       	breq	.+10     	; 0x2ac0 <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    2ab6:	e0 91 ae 00 	lds	r30, 0x00AE
    2aba:	f0 91 af 00 	lds	r31, 0x00AF
    2abe:	09 95       	icall
	}
}
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	ff 91       	pop	r31
    2ac6:	ef 91       	pop	r30
    2ac8:	bf 91       	pop	r27
    2aca:	af 91       	pop	r26
    2acc:	9f 91       	pop	r25
    2ace:	8f 91       	pop	r24
    2ad0:	7f 91       	pop	r23
    2ad2:	6f 91       	pop	r22
    2ad4:	5f 91       	pop	r21
    2ad6:	4f 91       	pop	r20
    2ad8:	3f 91       	pop	r19
    2ada:	2f 91       	pop	r18
    2adc:	0f 90       	pop	r0
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	0f 90       	pop	r0
    2ae2:	1f 90       	pop	r1
    2ae4:	18 95       	reti

00002ae6 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
    2ae6:	1f 92       	push	r1
    2ae8:	0f 92       	push	r0
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	0f 92       	push	r0
    2aee:	11 24       	eor	r1, r1
    2af0:	2f 93       	push	r18
    2af2:	3f 93       	push	r19
    2af4:	4f 93       	push	r20
    2af6:	5f 93       	push	r21
    2af8:	6f 93       	push	r22
    2afa:	7f 93       	push	r23
    2afc:	8f 93       	push	r24
    2afe:	9f 93       	push	r25
    2b00:	af 93       	push	r26
    2b02:	bf 93       	push	r27
    2b04:	ef 93       	push	r30
    2b06:	ff 93       	push	r31
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULLPTR)
    2b10:	80 91 b0 00 	lds	r24, 0x00B0
    2b14:	90 91 b1 00 	lds	r25, 0x00B1
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	29 f0       	breq	.+10     	; 0x2b26 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    2b1c:	e0 91 b0 00 	lds	r30, 0x00B0
    2b20:	f0 91 b1 00 	lds	r31, 0x00B1
    2b24:	09 95       	icall
	}
}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	ff 91       	pop	r31
    2b2c:	ef 91       	pop	r30
    2b2e:	bf 91       	pop	r27
    2b30:	af 91       	pop	r26
    2b32:	9f 91       	pop	r25
    2b34:	8f 91       	pop	r24
    2b36:	7f 91       	pop	r23
    2b38:	6f 91       	pop	r22
    2b3a:	5f 91       	pop	r21
    2b3c:	4f 91       	pop	r20
    2b3e:	3f 91       	pop	r19
    2b40:	2f 91       	pop	r18
    2b42:	0f 90       	pop	r0
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	0f 90       	pop	r0
    2b48:	1f 90       	pop	r1
    2b4a:	18 95       	reti

00002b4c <PWM_Init>:

static void Func_ICU(void);
static void Func_OVF(void);

void PWM_Init(void)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
	Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE , TIMER1_SCALER_8 , OCRA_NON_INVERTING , OCRB_DISCONNECTED);
    2b54:	83 e0       	ldi	r24, 0x03	; 3
    2b56:	62 e0       	ldi	r22, 0x02	; 2
    2b58:	42 e0       	ldi	r20, 0x02	; 2
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	0e 94 0f 12 	call	0x241e	; 0x241e <Timer1_Init>
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <PWM_Freq_KHZ>:

void PWM_Freq_KHZ(u16 freq)
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <PWM_Freq_KHZ+0x6>
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <PWM_Freq_KHZ+0x8>
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	9c 83       	std	Y+4, r25	; 0x04
    2b74:	8b 83       	std	Y+3, r24	; 0x03
	u16 ttotal;
	
	if(freq > 0)
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	d1 f0       	breq	.+52     	; 0x2bb2 <PWM_Freq_KHZ+0x4c>
	{
		ttotal = 1000 / freq;       // (10^6*(1/freq*10^3)) us
    2b7e:	88 ee       	ldi	r24, 0xE8	; 232
    2b80:	93 e0       	ldi	r25, 0x03	; 3
    2b82:	2b 81       	ldd	r18, Y+3	; 0x03
    2b84:	3c 81       	ldd	r19, Y+4	; 0x04
    2b86:	b9 01       	movw	r22, r18
    2b88:	0e 94 a9 18 	call	0x3152	; 0x3152 <__udivmodhi4>
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
		if (ttotal >= 1)
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	41 f0       	breq	.+16     	; 0x2baa <PWM_Freq_KHZ+0x44>
		{
			ICR1 = ttotal - 1;
    2b9a:	e6 e4       	ldi	r30, 0x46	; 70
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	80 83       	st	Z, r24
    2ba8:	04 c0       	rjmp	.+8      	; 0x2bb2 <PWM_Freq_KHZ+0x4c>
		}
		else{
			ICR1 = 0;
    2baa:	e6 e4       	ldi	r30, 0x46	; 70
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	11 82       	std	Z+1, r1	; 0x01
    2bb0:	10 82       	st	Z, r1
		}	
	}
}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <PWM_Freq_HZ>:

void PWM_Freq_HZ(u16 freq)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <PWM_Freq_HZ+0x6>
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <PWM_Freq_HZ+0x8>
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	9c 83       	std	Y+4, r25	; 0x04
    2bce:	8b 83       	std	Y+3, r24	; 0x03
	u16 ttotal;
	
	if(freq > 0)
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	09 f1       	breq	.+66     	; 0x2c1a <PWM_Freq_HZ+0x5a>
	{
		ttotal = (u32)1000000 / freq;       // (10^6*(1/freq)) us
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	9c 01       	movw	r18, r24
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	80 e4       	ldi	r24, 0x40	; 64
    2be4:	92 e4       	ldi	r25, 0x42	; 66
    2be6:	af e0       	ldi	r26, 0x0F	; 15
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 bd 18 	call	0x317a	; 0x317a <__udivmodsi4>
    2bf2:	da 01       	movw	r26, r20
    2bf4:	c9 01       	movw	r24, r18
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
		if (ttotal >= 1)
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	41 f0       	breq	.+16     	; 0x2c12 <PWM_Freq_HZ+0x52>
		{
			ICR1 = ttotal - 1;
    2c02:	e6 e4       	ldi	r30, 0x46	; 70
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
    2c10:	04 c0       	rjmp	.+8      	; 0x2c1a <PWM_Freq_HZ+0x5a>
		}
		else
		{
			ICR1 = 0;
    2c12:	e6 e4       	ldi	r30, 0x46	; 70
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	11 82       	std	Z+1, r1	; 0x01
    2c18:	10 82       	st	Z, r1
		}	
	}
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <PWM_Duty>:

void PWM_Duty(u16 duty)
{
    2c28:	ef 92       	push	r14
    2c2a:	ff 92       	push	r15
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <PWM_Duty+0xe>
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <PWM_Duty+0x10>
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	9c 83       	std	Y+4, r25	; 0x04
    2c3e:	8b 83       	std	Y+3, r24	; 0x03
	if (duty <= 100)
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	9c 81       	ldd	r25, Y+4	; 0x04
    2c44:	85 36       	cpi	r24, 0x65	; 101
    2c46:	91 05       	cpc	r25, r1
    2c48:	80 f5       	brcc	.+96     	; 0x2caa <PWM_Duty+0x82>
	{
		u16 ton = ((u32)duty * (ICR1+1))/100;
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	7c 01       	movw	r14, r24
    2c50:	00 e0       	ldi	r16, 0x00	; 0
    2c52:	10 e0       	ldi	r17, 0x00	; 0
    2c54:	e6 e4       	ldi	r30, 0x46	; 70
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	91 81       	ldd	r25, Z+1	; 0x01
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	9c 01       	movw	r18, r24
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	c8 01       	movw	r24, r16
    2c66:	b7 01       	movw	r22, r14
    2c68:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__mulsi3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	24 e6       	ldi	r18, 0x64	; 100
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 bd 18 	call	0x317a	; 0x317a <__udivmodsi4>
    2c80:	da 01       	movw	r26, r20
    2c82:	c9 01       	movw	r24, r18
    2c84:	9a 83       	std	Y+2, r25	; 0x02
    2c86:	89 83       	std	Y+1, r24	; 0x01
		if (ton > 1)
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8c:	82 30       	cpi	r24, 0x02	; 2
    2c8e:	91 05       	cpc	r25, r1
    2c90:	40 f0       	brcs	.+16     	; 0x2ca2 <PWM_Duty+0x7a>
		{
			OCR1A = ton - 1;
    2c92:	ea e4       	ldi	r30, 0x4A	; 74
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
    2ca0:	04 c0       	rjmp	.+8      	; 0x2caa <PWM_Duty+0x82>
		}
		else
		{
			OCR1A = 0;
    2ca2:	ea e4       	ldi	r30, 0x4A	; 74
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	11 82       	std	Z+1, r1	; 0x01
    2ca8:	10 82       	st	Z, r1
		}
	}
}
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	08 95       	ret

00002cc0 <Func_ICU>:

static void Func_ICU(void)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
	if (flag == 0)
    2cc8:	80 91 b6 00 	lds	r24, 0x00B6
    2ccc:	88 23       	and	r24, r24
    2cce:	79 f4       	brne	.+30     	; 0x2cee <Func_ICU+0x2e>
	{
		t1 = ICR1;
    2cd0:	e6 e4       	ldi	r30, 0x46	; 70
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	91 81       	ldd	r25, Z+1	; 0x01
    2cd8:	90 93 ba 00 	sts	0x00BA, r25
    2cdc:	80 93 b9 00 	sts	0x00B9, r24
		Timer1_InputCaptureEdge(FALLING);
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	0e 94 e6 13 	call	0x27cc	; 0x27cc <Timer1_InputCaptureEdge>
		flag = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	80 93 b6 00 	sts	0x00B6, r24
    2cec:	24 c0       	rjmp	.+72     	; 0x2d36 <Func_ICU+0x76>
	}
	else if (flag == 1)
    2cee:	80 91 b6 00 	lds	r24, 0x00B6
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	79 f4       	brne	.+30     	; 0x2d14 <Func_ICU+0x54>
	{
		t2 = ICR1;
    2cf6:	e6 e4       	ldi	r30, 0x46	; 70
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	90 93 bc 00 	sts	0x00BC, r25
    2d02:	80 93 bb 00 	sts	0x00BB, r24
		Timer1_InputCaptureEdge(RISING);
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	0e 94 e6 13 	call	0x27cc	; 0x27cc <Timer1_InputCaptureEdge>
		flag = 2;
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	80 93 b6 00 	sts	0x00B6, r24
    2d12:	11 c0       	rjmp	.+34     	; 0x2d36 <Func_ICU+0x76>
	}
	else if (flag == 2)
    2d14:	80 91 b6 00 	lds	r24, 0x00B6
    2d18:	82 30       	cpi	r24, 0x02	; 2
    2d1a:	69 f4       	brne	.+26     	; 0x2d36 <Func_ICU+0x76>
	{
		t3 = ICR1;
    2d1c:	e6 e4       	ldi	r30, 0x46	; 70
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	91 81       	ldd	r25, Z+1	; 0x01
    2d24:	90 93 be 00 	sts	0x00BE, r25
    2d28:	80 93 bd 00 	sts	0x00BD, r24
		Timer1_ICU_InterruptDisable();
    2d2c:	0e 94 30 14 	call	0x2860	; 0x2860 <Timer1_ICU_InterruptDisable>
		flag = 3;
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	80 93 b6 00 	sts	0x00B6, r24
	}
}
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <Func_OVF>:

static void Func_OVF(void)
{
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
	c++;
    2d44:	80 91 b7 00 	lds	r24, 0x00B7
    2d48:	90 91 b8 00 	lds	r25, 0x00B8
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	90 93 b8 00 	sts	0x00B8, r25
    2d52:	80 93 b7 00 	sts	0x00B7, r24
}
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <PWM_Measure>:

void PWM_Measure(u32* Pfreq,u8* Pduty)
{ 
    2d5c:	ef 92       	push	r14
    2d5e:	ff 92       	push	r15
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	28 97       	sbiw	r28, 0x08	; 8
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	78 87       	std	Y+8, r23	; 0x08
    2d7e:	6f 83       	std	Y+7, r22	; 0x07
	u16 ton , toff;
	c=0;
    2d80:	10 92 b8 00 	sts	0x00B8, r1
    2d84:	10 92 b7 00 	sts	0x00B7, r1
	Timer1_ICU_SetCallBack(Func_ICU);
    2d88:	80 e6       	ldi	r24, 0x60	; 96
    2d8a:	96 e1       	ldi	r25, 0x16	; 22
    2d8c:	0e 94 c8 14 	call	0x2990	; 0x2990 <Timer1_ICU_SetCallBack>
	Timer1_OVF_SetCallBack(Func_OVF);
    2d90:	8e e9       	ldi	r24, 0x9E	; 158
    2d92:	96 e1       	ldi	r25, 0x16	; 22
    2d94:	0e 94 92 14 	call	0x2924	; 0x2924 <Timer1_OVF_SetCallBack>
	Timer1_InputCaptureEdge(RISING);
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	0e 94 e6 13 	call	0x27cc	; 0x27cc <Timer1_InputCaptureEdge>
	Timer1_ICU_InterruptEnable();
    2d9e:	0e 94 22 14 	call	0x2844	; 0x2844 <Timer1_ICU_InterruptEnable>
	Timer1_OVF_InterruptEnable();
    2da2:	0e 94 3e 14 	call	0x287c	; 0x287c <Timer1_OVF_InterruptEnable>
	flag = 0;
    2da6:	10 92 b6 00 	sts	0x00B6, r1
	while(flag<3);
    2daa:	80 91 b6 00 	lds	r24, 0x00B6
    2dae:	83 30       	cpi	r24, 0x03	; 3
    2db0:	e0 f3       	brcs	.-8      	; 0x2daa <PWM_Measure+0x4e>
	ton = t2 - t1 + ((u32)c*65535);
    2db2:	20 91 bb 00 	lds	r18, 0x00BB
    2db6:	30 91 bc 00 	lds	r19, 0x00BC
    2dba:	80 91 b9 00 	lds	r24, 0x00B9
    2dbe:	90 91 ba 00 	lds	r25, 0x00BA
    2dc2:	89 01       	movw	r16, r18
    2dc4:	08 1b       	sub	r16, r24
    2dc6:	19 0b       	sbc	r17, r25
    2dc8:	80 91 b7 00 	lds	r24, 0x00B7
    2dcc:	90 91 b8 00 	lds	r25, 0x00B8
    2dd0:	cc 01       	movw	r24, r24
    2dd2:	a0 e0       	ldi	r26, 0x00	; 0
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	2f ef       	ldi	r18, 0xFF	; 255
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__mulsi3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	80 0f       	add	r24, r16
    2dec:	91 1f       	adc	r25, r17
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
	toff = t3 - t2 + + ((u32)c*65535);
    2df2:	20 91 bd 00 	lds	r18, 0x00BD
    2df6:	30 91 be 00 	lds	r19, 0x00BE
    2dfa:	80 91 bb 00 	lds	r24, 0x00BB
    2dfe:	90 91 bc 00 	lds	r25, 0x00BC
    2e02:	89 01       	movw	r16, r18
    2e04:	08 1b       	sub	r16, r24
    2e06:	19 0b       	sbc	r17, r25
    2e08:	80 91 b7 00 	lds	r24, 0x00B7
    2e0c:	90 91 b8 00 	lds	r25, 0x00B8
    2e10:	cc 01       	movw	r24, r24
    2e12:	a0 e0       	ldi	r26, 0x00	; 0
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	2f ef       	ldi	r18, 0xFF	; 255
    2e18:	3f ef       	ldi	r19, 0xFF	; 255
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__mulsi3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	80 0f       	add	r24, r16
    2e2c:	91 1f       	adc	r25, r17
    2e2e:	9a 83       	std	Y+2, r25	; 0x02
    2e30:	89 83       	std	Y+1, r24	; 0x01
	
	*Pfreq = ((u32)1000000 / ((u32)ton + toff));
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	9c 81       	ldd	r25, Y+4	; 0x04
    2e36:	9c 01       	movw	r18, r24
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e40:	cc 01       	movw	r24, r24
    2e42:	a0 e0       	ldi	r26, 0x00	; 0
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	28 0f       	add	r18, r24
    2e48:	39 1f       	adc	r19, r25
    2e4a:	4a 1f       	adc	r20, r26
    2e4c:	5b 1f       	adc	r21, r27
    2e4e:	80 e4       	ldi	r24, 0x40	; 64
    2e50:	92 e4       	ldi	r25, 0x42	; 66
    2e52:	af e0       	ldi	r26, 0x0F	; 15
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	bc 01       	movw	r22, r24
    2e58:	cd 01       	movw	r24, r26
    2e5a:	0e 94 bd 18 	call	0x317a	; 0x317a <__udivmodsi4>
    2e5e:	da 01       	movw	r26, r20
    2e60:	c9 01       	movw	r24, r18
    2e62:	ed 81       	ldd	r30, Y+5	; 0x05
    2e64:	fe 81       	ldd	r31, Y+6	; 0x06
    2e66:	80 83       	st	Z, r24
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	a2 83       	std	Z+2, r26	; 0x02
    2e6c:	b3 83       	std	Z+3, r27	; 0x03
	*Pduty = ((u32)ton*100)/((u32)ton + toff);
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	cc 01       	movw	r24, r24
    2e74:	a0 e0       	ldi	r26, 0x00	; 0
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	24 e6       	ldi	r18, 0x64	; 100
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	50 e0       	ldi	r21, 0x00	; 0
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__mulsi3>
    2e88:	7b 01       	movw	r14, r22
    2e8a:	8c 01       	movw	r16, r24
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e90:	9c 01       	movw	r18, r24
    2e92:	40 e0       	ldi	r20, 0x00	; 0
    2e94:	50 e0       	ldi	r21, 0x00	; 0
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	cc 01       	movw	r24, r24
    2e9c:	a0 e0       	ldi	r26, 0x00	; 0
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	28 0f       	add	r18, r24
    2ea2:	39 1f       	adc	r19, r25
    2ea4:	4a 1f       	adc	r20, r26
    2ea6:	5b 1f       	adc	r21, r27
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	b7 01       	movw	r22, r14
    2eac:	0e 94 bd 18 	call	0x317a	; 0x317a <__udivmodsi4>
    2eb0:	da 01       	movw	r26, r20
    2eb2:	c9 01       	movw	r24, r18
    2eb4:	ef 81       	ldd	r30, Y+7	; 0x07
    2eb6:	f8 85       	ldd	r31, Y+8	; 0x08
    2eb8:	80 83       	st	Z, r24
}
    2eba:	28 96       	adiw	r28, 0x08	; 8
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	1f 91       	pop	r17
    2ecc:	0f 91       	pop	r16
    2ece:	ff 90       	pop	r15
    2ed0:	ef 90       	pop	r14
    2ed2:	08 95       	ret

00002ed4 <Timer1_SetInterruptTime_ms>:


void Timer1_SetInterruptTime_ms (u16 time,void(*LocalFptr)(void))
{
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <Timer1_SetInterruptTime_ms+0xa>
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <Timer1_SetInterruptTime_ms+0xc>
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	9a 83       	std	Y+2, r25	; 0x02
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	7c 83       	std	Y+4, r23	; 0x04
    2eea:	6b 83       	std	Y+3, r22	; 0x03
	if (time >= 1 && time <= 65)
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	e9 f0       	breq	.+58     	; 0x2f2e <Timer1_SetInterruptTime_ms+0x5a>
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	82 34       	cpi	r24, 0x42	; 66
    2efa:	91 05       	cpc	r25, r1
    2efc:	c0 f4       	brcc	.+48     	; 0x2f2e <Timer1_SetInterruptTime_ms+0x5a>
	{
		Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE , TIMER1_SCALER_8 , OCRA_DISCONNECTED , OCRB_DISCONNECTED);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	62 e0       	ldi	r22, 0x02	; 2
    2f02:	40 e0       	ldi	r20, 0x00	; 0
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	0e 94 0f 12 	call	0x241e	; 0x241e <Timer1_Init>
		OCR1A = (time*1000)-1;   // time range 0 - 65ms
    2f0a:	ea e4       	ldi	r30, 0x4A	; 74
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	29 81       	ldd	r18, Y+1	; 0x01
    2f10:	3a 81       	ldd	r19, Y+2	; 0x02
    2f12:	88 ee       	ldi	r24, 0xE8	; 232
    2f14:	93 e0       	ldi	r25, 0x03	; 3
    2f16:	ac 01       	movw	r20, r24
    2f18:	24 9f       	mul	r18, r20
    2f1a:	c0 01       	movw	r24, r0
    2f1c:	25 9f       	mul	r18, r21
    2f1e:	90 0d       	add	r25, r0
    2f20:	34 9f       	mul	r19, r20
    2f22:	90 0d       	add	r25, r0
    2f24:	11 24       	eor	r1, r1
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
    2f2c:	23 c0       	rjmp	.+70     	; 0x2f74 <Timer1_SetInterruptTime_ms+0xa0>
	}
	else
	{
		Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE , TIMER1_SCALER_1024 , OCRA_DISCONNECTED , OCRB_DISCONNECTED);
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	65 e0       	ldi	r22, 0x05	; 5
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	0e 94 0f 12 	call	0x241e	; 0x241e <Timer1_Init>
		OCR1A = (((u32)time*1000)/128)-1;  
    2f3a:	0a e4       	ldi	r16, 0x4A	; 74
    2f3c:	10 e0       	ldi	r17, 0x00	; 0
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	cc 01       	movw	r24, r24
    2f44:	a0 e0       	ldi	r26, 0x00	; 0
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	28 ee       	ldi	r18, 0xE8	; 232
    2f4a:	33 e0       	ldi	r19, 0x03	; 3
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	50 e0       	ldi	r21, 0x00	; 0
    2f50:	bc 01       	movw	r22, r24
    2f52:	cd 01       	movw	r24, r26
    2f54:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__mulsi3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	68 94       	set
    2f5e:	16 f8       	bld	r1, 6
    2f60:	b6 95       	lsr	r27
    2f62:	a7 95       	ror	r26
    2f64:	97 95       	ror	r25
    2f66:	87 95       	ror	r24
    2f68:	16 94       	lsr	r1
    2f6a:	d1 f7       	brne	.-12     	; 0x2f60 <Timer1_SetInterruptTime_ms+0x8c>
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f8 01       	movw	r30, r16
    2f70:	91 83       	std	Z+1, r25	; 0x01
    2f72:	80 83       	st	Z, r24
	}

	Timer1_OCA_SetCallBack(LocalFptr);
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	9c 81       	ldd	r25, Y+4	; 0x04
    2f78:	0e 94 a4 14 	call	0x2948	; 0x2948 <Timer1_OCA_SetCallBack>
	Timer1_OCA_InterruptEnable();
    2f7c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <Timer1_OCA_InterruptEnable>
}
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	08 95       	ret

00002f92 <Timer1_SetInterruptTime_us>:
void Timer1_SetInterruptTime_us (u16 time,void(*LocalFptr)(void))
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <Timer1_SetInterruptTime_us+0x6>
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <Timer1_SetInterruptTime_us+0x8>
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	7c 83       	std	Y+4, r23	; 0x04
    2fa4:	6b 83       	std	Y+3, r22	; 0x03
	Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE , TIMER1_SCALER_8 , OCRA_DISCONNECTED , OCRB_DISCONNECTED);
    2fa6:	82 e0       	ldi	r24, 0x02	; 2
    2fa8:	62 e0       	ldi	r22, 0x02	; 2
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	0e 94 0f 12 	call	0x241e	; 0x241e <Timer1_Init>
	OCR1A = (time)-1;
    2fb2:	ea e4       	ldi	r30, 0x4A	; 74
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	80 83       	st	Z, r24
	Timer1_OCA_SetCallBack(LocalFptr);
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	0e 94 a4 14 	call	0x2948	; 0x2948 <Timer1_OCA_SetCallBack>
	Timer1_OCA_InterruptEnable();
    2fc8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <Timer1_OCA_InterruptEnable>
}
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <main>:
#include "SW.h"
#include "TIME.h"
#include "SSD.h"

int main(void)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	2f 97       	sbiw	r28, 0x0f	; 15
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61

    DIO_Init();
    2fee:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_Init>



    u8 i = 0;
    2ff2:	1f 86       	std	Y+15, r1	; 0x0f

    while (1) 
    {
    	SSD_Update();
    2ff4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <SSD_Update>

    	i++;
    2ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffa:	8f 5f       	subi	r24, 0xFF	; 255
    2ffc:	8f 87       	std	Y+15, r24	; 0x0f

    	if(i%4 == 0)
    2ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	83 70       	andi	r24, 0x03	; 3
    3006:	90 70       	andi	r25, 0x00	; 0
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	29 f4       	brne	.+10     	; 0x3016 <main+0x3c>
    	{
    		i = 0;
    300c:	1f 86       	std	Y+15, r1	; 0x0f
    		SW_Update();
    300e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <SW_Update>
    		TIME_Update();
    3012:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <TIME_Update>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	a0 ea       	ldi	r26, 0xA0	; 160
    301c:	b0 e4       	ldi	r27, 0x40	; 64
    301e:	8b 87       	std	Y+11, r24	; 0x0b
    3020:	9c 87       	std	Y+12, r25	; 0x0c
    3022:	ad 87       	std	Y+13, r26	; 0x0d
    3024:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3026:	6b 85       	ldd	r22, Y+11	; 0x0b
    3028:	7c 85       	ldd	r23, Y+12	; 0x0c
    302a:	8d 85       	ldd	r24, Y+13	; 0x0d
    302c:	9e 85       	ldd	r25, Y+14	; 0x0e
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	4a ef       	ldi	r20, 0xFA	; 250
    3034:	54 e4       	ldi	r21, 0x44	; 68
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	8f 83       	std	Y+7, r24	; 0x07
    3040:	98 87       	std	Y+8, r25	; 0x08
    3042:	a9 87       	std	Y+9, r26	; 0x09
    3044:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3046:	6f 81       	ldd	r22, Y+7	; 0x07
    3048:	78 85       	ldd	r23, Y+8	; 0x08
    304a:	89 85       	ldd	r24, Y+9	; 0x09
    304c:	9a 85       	ldd	r25, Y+10	; 0x0a
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e8       	ldi	r20, 0x80	; 128
    3054:	5f e3       	ldi	r21, 0x3F	; 63
    3056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305a:	88 23       	and	r24, r24
    305c:	2c f4       	brge	.+10     	; 0x3068 <main+0x8e>
		__ticks = 1;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	9e 83       	std	Y+6, r25	; 0x06
    3064:	8d 83       	std	Y+5, r24	; 0x05
    3066:	3f c0       	rjmp	.+126    	; 0x30e6 <main+0x10c>
	else if (__tmp > 65535)
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	3f ef       	ldi	r19, 0xFF	; 255
    3074:	4f e7       	ldi	r20, 0x7F	; 127
    3076:	57 e4       	ldi	r21, 0x47	; 71
    3078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307c:	18 16       	cp	r1, r24
    307e:	4c f5       	brge	.+82     	; 0x30d2 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3080:	6b 85       	ldd	r22, Y+11	; 0x0b
    3082:	7c 85       	ldd	r23, Y+12	; 0x0c
    3084:	8d 85       	ldd	r24, Y+13	; 0x0d
    3086:	9e 85       	ldd	r25, Y+14	; 0x0e
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e2       	ldi	r20, 0x20	; 32
    308e:	51 e4       	ldi	r21, 0x41	; 65
    3090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
    30a8:	0f c0       	rjmp	.+30     	; 0x30c8 <main+0xee>
    30aa:	88 ec       	ldi	r24, 0xC8	; 200
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	9c 83       	std	Y+4, r25	; 0x04
    30b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	9c 81       	ldd	r25, Y+4	; 0x04
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	f1 f7       	brne	.-4      	; 0x30b6 <main+0xdc>
    30ba:	9c 83       	std	Y+4, r25	; 0x04
    30bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	9e 81       	ldd	r25, Y+6	; 0x06
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	69 f7       	brne	.-38     	; 0x30aa <main+0xd0>
    30d0:	91 cf       	rjmp	.-222    	; 0x2ff4 <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d2:	6f 81       	ldd	r22, Y+7	; 0x07
    30d4:	78 85       	ldd	r23, Y+8	; 0x08
    30d6:	89 85       	ldd	r24, Y+9	; 0x09
    30d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	9e 83       	std	Y+6, r25	; 0x06
    30e4:	8d 83       	std	Y+5, r24	; 0x05
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	9a 83       	std	Y+2, r25	; 0x02
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <main+0x118>
    30f6:	9a 83       	std	Y+2, r25	; 0x02
    30f8:	89 83       	std	Y+1, r24	; 0x01
    30fa:	7c cf       	rjmp	.-264    	; 0x2ff4 <main+0x1a>

000030fc <__mulsi3>:
    30fc:	62 9f       	mul	r22, r18
    30fe:	d0 01       	movw	r26, r0
    3100:	73 9f       	mul	r23, r19
    3102:	f0 01       	movw	r30, r0
    3104:	82 9f       	mul	r24, r18
    3106:	e0 0d       	add	r30, r0
    3108:	f1 1d       	adc	r31, r1
    310a:	64 9f       	mul	r22, r20
    310c:	e0 0d       	add	r30, r0
    310e:	f1 1d       	adc	r31, r1
    3110:	92 9f       	mul	r25, r18
    3112:	f0 0d       	add	r31, r0
    3114:	83 9f       	mul	r24, r19
    3116:	f0 0d       	add	r31, r0
    3118:	74 9f       	mul	r23, r20
    311a:	f0 0d       	add	r31, r0
    311c:	65 9f       	mul	r22, r21
    311e:	f0 0d       	add	r31, r0
    3120:	99 27       	eor	r25, r25
    3122:	72 9f       	mul	r23, r18
    3124:	b0 0d       	add	r27, r0
    3126:	e1 1d       	adc	r30, r1
    3128:	f9 1f       	adc	r31, r25
    312a:	63 9f       	mul	r22, r19
    312c:	b0 0d       	add	r27, r0
    312e:	e1 1d       	adc	r30, r1
    3130:	f9 1f       	adc	r31, r25
    3132:	bd 01       	movw	r22, r26
    3134:	cf 01       	movw	r24, r30
    3136:	11 24       	eor	r1, r1
    3138:	08 95       	ret

0000313a <__udivmodqi4>:
    313a:	99 1b       	sub	r25, r25
    313c:	79 e0       	ldi	r23, 0x09	; 9
    313e:	04 c0       	rjmp	.+8      	; 0x3148 <__udivmodqi4_ep>

00003140 <__udivmodqi4_loop>:
    3140:	99 1f       	adc	r25, r25
    3142:	96 17       	cp	r25, r22
    3144:	08 f0       	brcs	.+2      	; 0x3148 <__udivmodqi4_ep>
    3146:	96 1b       	sub	r25, r22

00003148 <__udivmodqi4_ep>:
    3148:	88 1f       	adc	r24, r24
    314a:	7a 95       	dec	r23
    314c:	c9 f7       	brne	.-14     	; 0x3140 <__udivmodqi4_loop>
    314e:	80 95       	com	r24
    3150:	08 95       	ret

00003152 <__udivmodhi4>:
    3152:	aa 1b       	sub	r26, r26
    3154:	bb 1b       	sub	r27, r27
    3156:	51 e1       	ldi	r21, 0x11	; 17
    3158:	07 c0       	rjmp	.+14     	; 0x3168 <__udivmodhi4_ep>

0000315a <__udivmodhi4_loop>:
    315a:	aa 1f       	adc	r26, r26
    315c:	bb 1f       	adc	r27, r27
    315e:	a6 17       	cp	r26, r22
    3160:	b7 07       	cpc	r27, r23
    3162:	10 f0       	brcs	.+4      	; 0x3168 <__udivmodhi4_ep>
    3164:	a6 1b       	sub	r26, r22
    3166:	b7 0b       	sbc	r27, r23

00003168 <__udivmodhi4_ep>:
    3168:	88 1f       	adc	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	5a 95       	dec	r21
    316e:	a9 f7       	brne	.-22     	; 0x315a <__udivmodhi4_loop>
    3170:	80 95       	com	r24
    3172:	90 95       	com	r25
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	08 95       	ret

0000317a <__udivmodsi4>:
    317a:	a1 e2       	ldi	r26, 0x21	; 33
    317c:	1a 2e       	mov	r1, r26
    317e:	aa 1b       	sub	r26, r26
    3180:	bb 1b       	sub	r27, r27
    3182:	fd 01       	movw	r30, r26
    3184:	0d c0       	rjmp	.+26     	; 0x31a0 <__udivmodsi4_ep>

00003186 <__udivmodsi4_loop>:
    3186:	aa 1f       	adc	r26, r26
    3188:	bb 1f       	adc	r27, r27
    318a:	ee 1f       	adc	r30, r30
    318c:	ff 1f       	adc	r31, r31
    318e:	a2 17       	cp	r26, r18
    3190:	b3 07       	cpc	r27, r19
    3192:	e4 07       	cpc	r30, r20
    3194:	f5 07       	cpc	r31, r21
    3196:	20 f0       	brcs	.+8      	; 0x31a0 <__udivmodsi4_ep>
    3198:	a2 1b       	sub	r26, r18
    319a:	b3 0b       	sbc	r27, r19
    319c:	e4 0b       	sbc	r30, r20
    319e:	f5 0b       	sbc	r31, r21

000031a0 <__udivmodsi4_ep>:
    31a0:	66 1f       	adc	r22, r22
    31a2:	77 1f       	adc	r23, r23
    31a4:	88 1f       	adc	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	1a 94       	dec	r1
    31aa:	69 f7       	brne	.-38     	; 0x3186 <__udivmodsi4_loop>
    31ac:	60 95       	com	r22
    31ae:	70 95       	com	r23
    31b0:	80 95       	com	r24
    31b2:	90 95       	com	r25
    31b4:	9b 01       	movw	r18, r22
    31b6:	ac 01       	movw	r20, r24
    31b8:	bd 01       	movw	r22, r26
    31ba:	cf 01       	movw	r24, r30
    31bc:	08 95       	ret

000031be <__prologue_saves__>:
    31be:	2f 92       	push	r2
    31c0:	3f 92       	push	r3
    31c2:	4f 92       	push	r4
    31c4:	5f 92       	push	r5
    31c6:	6f 92       	push	r6
    31c8:	7f 92       	push	r7
    31ca:	8f 92       	push	r8
    31cc:	9f 92       	push	r9
    31ce:	af 92       	push	r10
    31d0:	bf 92       	push	r11
    31d2:	cf 92       	push	r12
    31d4:	df 92       	push	r13
    31d6:	ef 92       	push	r14
    31d8:	ff 92       	push	r15
    31da:	0f 93       	push	r16
    31dc:	1f 93       	push	r17
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	ca 1b       	sub	r28, r26
    31e8:	db 0b       	sbc	r29, r27
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	09 94       	ijmp

000031f6 <__epilogue_restores__>:
    31f6:	2a 88       	ldd	r2, Y+18	; 0x12
    31f8:	39 88       	ldd	r3, Y+17	; 0x11
    31fa:	48 88       	ldd	r4, Y+16	; 0x10
    31fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    31fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3200:	7d 84       	ldd	r7, Y+13	; 0x0d
    3202:	8c 84       	ldd	r8, Y+12	; 0x0c
    3204:	9b 84       	ldd	r9, Y+11	; 0x0b
    3206:	aa 84       	ldd	r10, Y+10	; 0x0a
    3208:	b9 84       	ldd	r11, Y+9	; 0x09
    320a:	c8 84       	ldd	r12, Y+8	; 0x08
    320c:	df 80       	ldd	r13, Y+7	; 0x07
    320e:	ee 80       	ldd	r14, Y+6	; 0x06
    3210:	fd 80       	ldd	r15, Y+5	; 0x05
    3212:	0c 81       	ldd	r16, Y+4	; 0x04
    3214:	1b 81       	ldd	r17, Y+3	; 0x03
    3216:	aa 81       	ldd	r26, Y+2	; 0x02
    3218:	b9 81       	ldd	r27, Y+1	; 0x01
    321a:	ce 0f       	add	r28, r30
    321c:	d1 1d       	adc	r29, r1
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	ed 01       	movw	r28, r26
    322a:	08 95       	ret

0000322c <_exit>:
    322c:	f8 94       	cli

0000322e <__stop_program>:
    322e:	ff cf       	rjmp	.-2      	; 0x322e <__stop_program>
