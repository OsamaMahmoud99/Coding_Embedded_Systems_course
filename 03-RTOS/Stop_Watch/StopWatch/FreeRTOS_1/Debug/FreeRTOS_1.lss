
FreeRTOS_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001d72  00001e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004de  00800088  00800088  00001e2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000045f8  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e2  00000000  00000000  0000688c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026c7  00000000  00000000  0000796e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a98  00000000  00000000  0000a038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014e4  00000000  00000000  0000aad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c62  00000000  00000000  0000bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000fc16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 36       	cpi	r26, 0x66	; 102
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 0c 	call	0x180a	; 0x180a <main>
      8a:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      98:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
      9c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
      a0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
      a4:	89 2b       	or	r24, r25
      a6:	31 f4       	brne	.+12     	; 0xb4 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
      a8:	8d e8       	ldi	r24, 0x8D	; 141
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
      b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      b4:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <xNextFreeByte>
      b8:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <xNextFreeByte+0x1>
      bc:	c9 01       	movw	r24, r18
      be:	8c 0f       	add	r24, r28
      c0:	9d 1f       	adc	r25, r29
      c2:	8b 34       	cpi	r24, 0x4B	; 75
      c4:	44 e0       	ldi	r20, 0x04	; 4
      c6:	94 07       	cpc	r25, r20
      c8:	70 f4       	brcc	.+28     	; 0xe6 <pvPortMalloc+0x54>
      ca:	28 17       	cp	r18, r24
      cc:	39 07       	cpc	r19, r25
      ce:	70 f4       	brcc	.+28     	; 0xec <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
      d0:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <__data_end>
      d4:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <__data_end+0x1>
      d8:	c2 0f       	add	r28, r18
      da:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
      dc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <xNextFreeByte+0x1>
      e0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <xNextFreeByte>
      e4:	05 c0       	rjmp	.+10     	; 0xf0 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
      e6:	c0 e0       	ldi	r28, 0x00	; 0
      e8:	d0 e0       	ldi	r29, 0x00	; 0
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <pvPortMalloc+0x5e>
      ec:	c0 e0       	ldi	r28, 0x00	; 0
      ee:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
      f0:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
      f4:	ce 01       	movw	r24, r28
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
      fc:	08 95       	ret

000000fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
      fe:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     100:	03 96       	adiw	r24, 0x03	; 3
     102:	92 83       	std	Z+2, r25	; 0x02
     104:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     106:	2f ef       	ldi	r18, 0xFF	; 255
     108:	3f ef       	ldi	r19, 0xFF	; 255
     10a:	34 83       	std	Z+4, r19	; 0x04
     10c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     10e:	96 83       	std	Z+6, r25	; 0x06
     110:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     112:	90 87       	std	Z+8, r25	; 0x08
     114:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     116:	10 82       	st	Z, r1
     118:	08 95       	ret

0000011a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     11a:	fc 01       	movw	r30, r24
     11c:	11 86       	std	Z+9, r1	; 0x09
     11e:	10 86       	std	Z+8, r1	; 0x08
     120:	08 95       	ret

00000122 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	9c 01       	movw	r18, r24
     128:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     12a:	dc 01       	movw	r26, r24
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	cd 91       	ld	r28, X+
     130:	dc 91       	ld	r29, X
     132:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     134:	d3 83       	std	Z+3, r29	; 0x03
     136:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     138:	8c 81       	ldd	r24, Y+4	; 0x04
     13a:	9d 81       	ldd	r25, Y+5	; 0x05
     13c:	95 83       	std	Z+5, r25	; 0x05
     13e:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     140:	8c 81       	ldd	r24, Y+4	; 0x04
     142:	9d 81       	ldd	r25, Y+5	; 0x05
     144:	dc 01       	movw	r26, r24
     146:	13 96       	adiw	r26, 0x03	; 3
     148:	7c 93       	st	X, r23
     14a:	6e 93       	st	-X, r22
     14c:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     14e:	7d 83       	std	Y+5, r23	; 0x05
     150:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     152:	31 87       	std	Z+9, r19	; 0x09
     154:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     156:	f9 01       	movw	r30, r18
     158:	80 81       	ld	r24, Z
     15a:	8f 5f       	subi	r24, 0xFF	; 255
     15c:	80 83       	st	Z, r24
}
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     16a:	48 81       	ld	r20, Y
     16c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     16e:	4f 3f       	cpi	r20, 0xFF	; 255
     170:	2f ef       	ldi	r18, 0xFF	; 255
     172:	52 07       	cpc	r21, r18
     174:	21 f4       	brne	.+8      	; 0x17e <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     176:	fc 01       	movw	r30, r24
     178:	a7 81       	ldd	r26, Z+7	; 0x07
     17a:	b0 85       	ldd	r27, Z+8	; 0x08
     17c:	0d c0       	rjmp	.+26     	; 0x198 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     17e:	dc 01       	movw	r26, r24
     180:	13 96       	adiw	r26, 0x03	; 3
     182:	01 c0       	rjmp	.+2      	; 0x186 <vListInsert+0x22>
     184:	df 01       	movw	r26, r30
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	ed 91       	ld	r30, X+
     18a:	fc 91       	ld	r31, X
     18c:	13 97       	sbiw	r26, 0x03	; 3
     18e:	20 81       	ld	r18, Z
     190:	31 81       	ldd	r19, Z+1	; 0x01
     192:	42 17       	cp	r20, r18
     194:	53 07       	cpc	r21, r19
     196:	b0 f7       	brcc	.-20     	; 0x184 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     198:	12 96       	adiw	r26, 0x02	; 2
     19a:	ed 91       	ld	r30, X+
     19c:	fc 91       	ld	r31, X
     19e:	13 97       	sbiw	r26, 0x03	; 3
     1a0:	fb 83       	std	Y+3, r31	; 0x03
     1a2:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     1a4:	d5 83       	std	Z+5, r29	; 0x05
     1a6:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     1a8:	bd 83       	std	Y+5, r27	; 0x05
     1aa:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     1ac:	13 96       	adiw	r26, 0x03	; 3
     1ae:	dc 93       	st	X, r29
     1b0:	ce 93       	st	-X, r28
     1b2:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1b4:	99 87       	std	Y+9, r25	; 0x09
     1b6:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1b8:	fc 01       	movw	r30, r24
     1ba:	20 81       	ld	r18, Z
     1bc:	2f 5f       	subi	r18, 0xFF	; 255
     1be:	20 83       	st	Z, r18
}
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     1cc:	a0 85       	ldd	r26, Z+8	; 0x08
     1ce:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1d0:	c2 81       	ldd	r28, Z+2	; 0x02
     1d2:	d3 81       	ldd	r29, Z+3	; 0x03
     1d4:	84 81       	ldd	r24, Z+4	; 0x04
     1d6:	95 81       	ldd	r25, Z+5	; 0x05
     1d8:	9d 83       	std	Y+5, r25	; 0x05
     1da:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     1dc:	c4 81       	ldd	r28, Z+4	; 0x04
     1de:	d5 81       	ldd	r29, Z+5	; 0x05
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	9b 83       	std	Y+3, r25	; 0x03
     1e6:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     1e8:	11 96       	adiw	r26, 0x01	; 1
     1ea:	8d 91       	ld	r24, X+
     1ec:	9c 91       	ld	r25, X
     1ee:	12 97       	sbiw	r26, 0x02	; 2
     1f0:	e8 17       	cp	r30, r24
     1f2:	f9 07       	cpc	r31, r25
     1f4:	31 f4       	brne	.+12     	; 0x202 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     1f6:	84 81       	ldd	r24, Z+4	; 0x04
     1f8:	95 81       	ldd	r25, Z+5	; 0x05
     1fa:	12 96       	adiw	r26, 0x02	; 2
     1fc:	9c 93       	st	X, r25
     1fe:	8e 93       	st	-X, r24
     200:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     202:	11 86       	std	Z+9, r1	; 0x09
     204:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     206:	8c 91       	ld	r24, X
     208:	81 50       	subi	r24, 0x01	; 1
     20a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     212:	1b bc       	out	0x2b, r1	; 43
     214:	8c e7       	ldi	r24, 0x7C	; 124
     216:	8a bd       	out	0x2a, r24	; 42
     218:	8b e0       	ldi	r24, 0x0B	; 11
     21a:	8e bd       	out	0x2e, r24	; 46
     21c:	89 b7       	in	r24, 0x39	; 57
     21e:	80 61       	ori	r24, 0x10	; 16
     220:	89 bf       	out	0x39, r24	; 57
     222:	08 95       	ret

00000224 <pxPortInitialiseStack>:
     224:	31 e1       	ldi	r19, 0x11	; 17
     226:	fc 01       	movw	r30, r24
     228:	30 83       	st	Z, r19
     22a:	31 97       	sbiw	r30, 0x01	; 1
     22c:	22 e2       	ldi	r18, 0x22	; 34
     22e:	20 83       	st	Z, r18
     230:	31 97       	sbiw	r30, 0x01	; 1
     232:	a3 e3       	ldi	r26, 0x33	; 51
     234:	a0 83       	st	Z, r26
     236:	31 97       	sbiw	r30, 0x01	; 1
     238:	60 83       	st	Z, r22
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	70 83       	st	Z, r23
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	10 82       	st	Z, r1
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	60 e8       	ldi	r22, 0x80	; 128
     246:	60 83       	st	Z, r22
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	10 82       	st	Z, r1
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	60 83       	st	Z, r22
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	63 e0       	ldi	r22, 0x03	; 3
     256:	60 83       	st	Z, r22
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	64 e0       	ldi	r22, 0x04	; 4
     25c:	60 83       	st	Z, r22
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	65 e0       	ldi	r22, 0x05	; 5
     262:	60 83       	st	Z, r22
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	66 e0       	ldi	r22, 0x06	; 6
     268:	60 83       	st	Z, r22
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	67 e0       	ldi	r22, 0x07	; 7
     26e:	60 83       	st	Z, r22
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	68 e0       	ldi	r22, 0x08	; 8
     274:	60 83       	st	Z, r22
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	69 e0       	ldi	r22, 0x09	; 9
     27a:	60 83       	st	Z, r22
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	60 e1       	ldi	r22, 0x10	; 16
     280:	60 83       	st	Z, r22
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	30 83       	st	Z, r19
     286:	31 97       	sbiw	r30, 0x01	; 1
     288:	32 e1       	ldi	r19, 0x12	; 18
     28a:	30 83       	st	Z, r19
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	33 e1       	ldi	r19, 0x13	; 19
     290:	30 83       	st	Z, r19
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	34 e1       	ldi	r19, 0x14	; 20
     296:	30 83       	st	Z, r19
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	35 e1       	ldi	r19, 0x15	; 21
     29c:	30 83       	st	Z, r19
     29e:	31 97       	sbiw	r30, 0x01	; 1
     2a0:	36 e1       	ldi	r19, 0x16	; 22
     2a2:	30 83       	st	Z, r19
     2a4:	31 97       	sbiw	r30, 0x01	; 1
     2a6:	37 e1       	ldi	r19, 0x17	; 23
     2a8:	30 83       	st	Z, r19
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	38 e1       	ldi	r19, 0x18	; 24
     2ae:	30 83       	st	Z, r19
     2b0:	31 97       	sbiw	r30, 0x01	; 1
     2b2:	39 e1       	ldi	r19, 0x19	; 25
     2b4:	30 83       	st	Z, r19
     2b6:	31 97       	sbiw	r30, 0x01	; 1
     2b8:	30 e2       	ldi	r19, 0x20	; 32
     2ba:	30 83       	st	Z, r19
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	31 e2       	ldi	r19, 0x21	; 33
     2c0:	30 83       	st	Z, r19
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	20 83       	st	Z, r18
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	23 e2       	ldi	r18, 0x23	; 35
     2ca:	20 83       	st	Z, r18
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	40 83       	st	Z, r20
     2d0:	31 97       	sbiw	r30, 0x01	; 1
     2d2:	50 83       	st	Z, r21
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	26 e2       	ldi	r18, 0x26	; 38
     2d8:	20 83       	st	Z, r18
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	27 e2       	ldi	r18, 0x27	; 39
     2de:	20 83       	st	Z, r18
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	28 e2       	ldi	r18, 0x28	; 40
     2e4:	20 83       	st	Z, r18
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	29 e2       	ldi	r18, 0x29	; 41
     2ea:	20 83       	st	Z, r18
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	20 e3       	ldi	r18, 0x30	; 48
     2f0:	20 83       	st	Z, r18
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	21 e3       	ldi	r18, 0x31	; 49
     2f6:	20 83       	st	Z, r18
     2f8:	86 97       	sbiw	r24, 0x26	; 38
     2fa:	08 95       	ret

000002fc <xPortStartScheduler>:
     2fc:	0e 94 09 01 	call	0x212	; 0x212 <prvSetupTimerInterrupt>
     300:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <pxCurrentTCB>
     304:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     308:	cd 91       	ld	r28, X+
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	dd 91       	ld	r29, X+
     30e:	de bf       	out	0x3e, r29	; 62
     310:	ff 91       	pop	r31
     312:	ef 91       	pop	r30
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	bf 91       	pop	r27
     31a:	af 91       	pop	r26
     31c:	9f 91       	pop	r25
     31e:	8f 91       	pop	r24
     320:	7f 91       	pop	r23
     322:	6f 91       	pop	r22
     324:	5f 91       	pop	r21
     326:	4f 91       	pop	r20
     328:	3f 91       	pop	r19
     32a:	2f 91       	pop	r18
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	3f 90       	pop	r3
     34a:	2f 90       	pop	r2
     34c:	1f 90       	pop	r1
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	08 95       	ret
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	08 95       	ret

0000035a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	0f 92       	push	r0
     362:	1f 92       	push	r1
     364:	11 24       	eor	r1, r1
     366:	2f 92       	push	r2
     368:	3f 92       	push	r3
     36a:	4f 92       	push	r4
     36c:	5f 92       	push	r5
     36e:	6f 92       	push	r6
     370:	7f 92       	push	r7
     372:	8f 92       	push	r8
     374:	9f 92       	push	r9
     376:	af 92       	push	r10
     378:	bf 92       	push	r11
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ef 93       	push	r30
     3a0:	ff 93       	push	r31
     3a2:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <pxCurrentTCB>
     3a6:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     3aa:	0d b6       	in	r0, 0x3d	; 61
     3ac:	0d 92       	st	X+, r0
     3ae:	0e b6       	in	r0, 0x3e	; 62
     3b0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     3b2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     3b6:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <pxCurrentTCB>
     3ba:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     3be:	cd 91       	ld	r28, X+
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	dd 91       	ld	r29, X+
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	7f 91       	pop	r23
     3d8:	6f 91       	pop	r22
     3da:	5f 91       	pop	r21
     3dc:	4f 91       	pop	r20
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	bf 90       	pop	r11
     3f0:	af 90       	pop	r10
     3f2:	9f 90       	pop	r9
     3f4:	8f 90       	pop	r8
     3f6:	7f 90       	pop	r7
     3f8:	6f 90       	pop	r6
     3fa:	5f 90       	pop	r5
     3fc:	4f 90       	pop	r4
     3fe:	3f 90       	pop	r3
     400:	2f 90       	pop	r2
     402:	1f 90       	pop	r1
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
     408:	0f 90       	pop	r0

	asm volatile ( "ret" );
     40a:	08 95       	ret

0000040c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	0f 92       	push	r0
     414:	1f 92       	push	r1
     416:	11 24       	eor	r1, r1
     418:	2f 92       	push	r2
     41a:	3f 92       	push	r3
     41c:	4f 92       	push	r4
     41e:	5f 92       	push	r5
     420:	6f 92       	push	r6
     422:	7f 92       	push	r7
     424:	8f 92       	push	r8
     426:	9f 92       	push	r9
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	2f 93       	push	r18
     43a:	3f 93       	push	r19
     43c:	4f 93       	push	r20
     43e:	5f 93       	push	r21
     440:	6f 93       	push	r22
     442:	7f 93       	push	r23
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	af 93       	push	r26
     44a:	bf 93       	push	r27
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	ef 93       	push	r30
     452:	ff 93       	push	r31
     454:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <pxCurrentTCB>
     458:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     45c:	0d b6       	in	r0, 0x3d	; 61
     45e:	0d 92       	st	X+, r0
     460:	0e b6       	in	r0, 0x3e	; 62
     462:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     464:	0e 94 cc 06 	call	0xd98	; 0xd98 <xTaskIncrementTick>
     468:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     46a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     46e:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <pxCurrentTCB>
     472:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     476:	cd 91       	ld	r28, X+
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	dd 91       	ld	r29, X+
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	ff 91       	pop	r31
     480:	ef 91       	pop	r30
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	bf 91       	pop	r27
     488:	af 91       	pop	r26
     48a:	9f 91       	pop	r25
     48c:	8f 91       	pop	r24
     48e:	7f 91       	pop	r23
     490:	6f 91       	pop	r22
     492:	5f 91       	pop	r21
     494:	4f 91       	pop	r20
     496:	3f 91       	pop	r19
     498:	2f 91       	pop	r18
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	7f 90       	pop	r7
     4b0:	6f 90       	pop	r6
     4b2:	5f 90       	pop	r5
     4b4:	4f 90       	pop	r4
     4b6:	3f 90       	pop	r3
     4b8:	2f 90       	pop	r2
     4ba:	1f 90       	pop	r1
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	0f 90       	pop	r0

	asm volatile ( "ret" );
     4c2:	08 95       	ret

000004c4 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     4c4:	0e 94 06 02 	call	0x40c	; 0x40c <vPortYieldFromTick>
		asm volatile ( "reti" );
     4c8:	18 95       	reti

000004ca <prvIsQueueEmpty>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	0f 92       	push	r0
     4d0:	fc 01       	movw	r30, r24
     4d2:	82 8d       	ldd	r24, Z+26	; 0x1a
     4d4:	81 11       	cpse	r24, r1
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <prvIsQueueEmpty+0x12>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	01 c0       	rjmp	.+2      	; 0x4de <prvIsQueueEmpty+0x14>
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	08 95       	ret

000004e4 <prvIsQueueFull>:
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	0f 92       	push	r0
     4ea:	fc 01       	movw	r30, r24
     4ec:	22 8d       	ldd	r18, Z+26	; 0x1a
     4ee:	83 8d       	ldd	r24, Z+27	; 0x1b
     4f0:	28 13       	cpse	r18, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <prvIsQueueFull+0x14>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <prvIsQueueFull+0x16>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	08 95       	ret

00000500 <prvCopyDataToQueue>:
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	ec 01       	movw	r28, r24
     508:	14 2f       	mov	r17, r20
     50a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     50c:	41 11       	cpse	r20, r1
     50e:	0c c0       	rjmp	.+24     	; 0x528 <prvCopyDataToQueue+0x28>
     510:	88 81       	ld	r24, Y
     512:	99 81       	ldd	r25, Y+1	; 0x01
     514:	89 2b       	or	r24, r25
     516:	09 f0       	breq	.+2      	; 0x51a <prvCopyDataToQueue+0x1a>
     518:	45 c0       	rjmp	.+138    	; 0x5a4 <prvCopyDataToQueue+0xa4>
     51a:	8a 81       	ldd	r24, Y+2	; 0x02
     51c:	9b 81       	ldd	r25, Y+3	; 0x03
     51e:	0e 94 b6 09 	call	0x136c	; 0x136c <xTaskPriorityDisinherit>
     522:	1b 82       	std	Y+3, r1	; 0x03
     524:	1a 82       	std	Y+2, r1	; 0x02
     526:	45 c0       	rjmp	.+138    	; 0x5b2 <prvCopyDataToQueue+0xb2>
     528:	11 11       	cpse	r17, r1
     52a:	17 c0       	rjmp	.+46     	; 0x55a <prvCopyDataToQueue+0x5a>
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	8c 81       	ldd	r24, Y+4	; 0x04
     530:	9d 81       	ldd	r25, Y+5	; 0x05
     532:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <memcpy>
     536:	2c 8d       	ldd	r18, Y+28	; 0x1c
     538:	8c 81       	ldd	r24, Y+4	; 0x04
     53a:	9d 81       	ldd	r25, Y+5	; 0x05
     53c:	82 0f       	add	r24, r18
     53e:	91 1d       	adc	r25, r1
     540:	9d 83       	std	Y+5, r25	; 0x05
     542:	8c 83       	std	Y+4, r24	; 0x04
     544:	2a 81       	ldd	r18, Y+2	; 0x02
     546:	3b 81       	ldd	r19, Y+3	; 0x03
     548:	82 17       	cp	r24, r18
     54a:	93 07       	cpc	r25, r19
     54c:	68 f1       	brcs	.+90     	; 0x5a8 <prvCopyDataToQueue+0xa8>
     54e:	88 81       	ld	r24, Y
     550:	99 81       	ldd	r25, Y+1	; 0x01
     552:	9d 83       	std	Y+5, r25	; 0x05
     554:	8c 83       	std	Y+4, r24	; 0x04
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	2c c0       	rjmp	.+88     	; 0x5b2 <prvCopyDataToQueue+0xb2>
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	8e 81       	ldd	r24, Y+6	; 0x06
     55e:	9f 81       	ldd	r25, Y+7	; 0x07
     560:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <memcpy>
     564:	8c 8d       	ldd	r24, Y+28	; 0x1c
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	91 95       	neg	r25
     56a:	81 95       	neg	r24
     56c:	91 09       	sbc	r25, r1
     56e:	2e 81       	ldd	r18, Y+6	; 0x06
     570:	3f 81       	ldd	r19, Y+7	; 0x07
     572:	28 0f       	add	r18, r24
     574:	39 1f       	adc	r19, r25
     576:	3f 83       	std	Y+7, r19	; 0x07
     578:	2e 83       	std	Y+6, r18	; 0x06
     57a:	48 81       	ld	r20, Y
     57c:	59 81       	ldd	r21, Y+1	; 0x01
     57e:	24 17       	cp	r18, r20
     580:	35 07       	cpc	r19, r21
     582:	30 f4       	brcc	.+12     	; 0x590 <prvCopyDataToQueue+0x90>
     584:	2a 81       	ldd	r18, Y+2	; 0x02
     586:	3b 81       	ldd	r19, Y+3	; 0x03
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	9f 83       	std	Y+7, r25	; 0x07
     58e:	8e 83       	std	Y+6, r24	; 0x06
     590:	12 30       	cpi	r17, 0x02	; 2
     592:	61 f4       	brne	.+24     	; 0x5ac <prvCopyDataToQueue+0xac>
     594:	8a 8d       	ldd	r24, Y+26	; 0x1a
     596:	88 23       	and	r24, r24
     598:	59 f0       	breq	.+22     	; 0x5b0 <prvCopyDataToQueue+0xb0>
     59a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	8a 8f       	std	Y+26, r24	; 0x1a
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <prvCopyDataToQueue+0xb2>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <prvCopyDataToQueue+0xb2>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <prvCopyDataToQueue+0xb2>
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <prvCopyDataToQueue+0xb2>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5b4:	9f 5f       	subi	r25, 0xFF	; 255
     5b6:	9a 8f       	std	Y+26, r25	; 0x1a
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	08 95       	ret

000005c0 <prvCopyDataFromQueue>:
     5c0:	fc 01       	movw	r30, r24
     5c2:	44 8d       	ldd	r20, Z+28	; 0x1c
     5c4:	44 23       	and	r20, r20
     5c6:	a9 f0       	breq	.+42     	; 0x5f2 <prvCopyDataFromQueue+0x32>
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	26 81       	ldd	r18, Z+6	; 0x06
     5cc:	37 81       	ldd	r19, Z+7	; 0x07
     5ce:	24 0f       	add	r18, r20
     5d0:	35 1f       	adc	r19, r21
     5d2:	37 83       	std	Z+7, r19	; 0x07
     5d4:	26 83       	std	Z+6, r18	; 0x06
     5d6:	82 81       	ldd	r24, Z+2	; 0x02
     5d8:	93 81       	ldd	r25, Z+3	; 0x03
     5da:	28 17       	cp	r18, r24
     5dc:	39 07       	cpc	r19, r25
     5de:	20 f0       	brcs	.+8      	; 0x5e8 <prvCopyDataFromQueue+0x28>
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	97 83       	std	Z+7, r25	; 0x07
     5e6:	86 83       	std	Z+6, r24	; 0x06
     5e8:	cb 01       	movw	r24, r22
     5ea:	66 81       	ldd	r22, Z+6	; 0x06
     5ec:	77 81       	ldd	r23, Z+7	; 0x07
     5ee:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <memcpy>
     5f2:	08 95       	ret

000005f4 <prvUnlockQueue>:
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ec 01       	movw	r28, r24
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	0f 92       	push	r0
     600:	0d c0       	rjmp	.+26     	; 0x61c <prvUnlockQueue+0x28>
     602:	89 89       	ldd	r24, Y+17	; 0x11
     604:	88 23       	and	r24, r24
     606:	69 f0       	breq	.+26     	; 0x622 <prvUnlockQueue+0x2e>
     608:	ce 01       	movw	r24, r28
     60a:	41 96       	adiw	r24, 0x11	; 17
     60c:	0e 94 cb 08 	call	0x1196	; 0x1196 <xTaskRemoveFromEventList>
     610:	81 11       	cpse	r24, r1
     612:	0e 94 50 09 	call	0x12a0	; 0x12a0 <vTaskMissedYield>
     616:	8e 8d       	ldd	r24, Y+30	; 0x1e
     618:	81 50       	subi	r24, 0x01	; 1
     61a:	8e 8f       	std	Y+30, r24	; 0x1e
     61c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     61e:	18 16       	cp	r1, r24
     620:	84 f3       	brlt	.-32     	; 0x602 <prvUnlockQueue+0xe>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	8e 8f       	std	Y+30, r24	; 0x1e
     626:	0f 90       	pop	r0
     628:	0f be       	out	0x3f, r0	; 63
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	0f 92       	push	r0
     630:	0d c0       	rjmp	.+26     	; 0x64c <prvUnlockQueue+0x58>
     632:	88 85       	ldd	r24, Y+8	; 0x08
     634:	88 23       	and	r24, r24
     636:	69 f0       	breq	.+26     	; 0x652 <prvUnlockQueue+0x5e>
     638:	ce 01       	movw	r24, r28
     63a:	08 96       	adiw	r24, 0x08	; 8
     63c:	0e 94 cb 08 	call	0x1196	; 0x1196 <xTaskRemoveFromEventList>
     640:	81 11       	cpse	r24, r1
     642:	0e 94 50 09 	call	0x12a0	; 0x12a0 <vTaskMissedYield>
     646:	8d 8d       	ldd	r24, Y+29	; 0x1d
     648:	81 50       	subi	r24, 0x01	; 1
     64a:	8d 8f       	std	Y+29, r24	; 0x1d
     64c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     64e:	18 16       	cp	r1, r24
     650:	84 f3       	brlt	.-32     	; 0x632 <prvUnlockQueue+0x3e>
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	8d 8f       	std	Y+29, r24	; 0x1d
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <xQueueGenericReset>:
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	0f 92       	push	r0
     66c:	e8 81       	ld	r30, Y
     66e:	f9 81       	ldd	r31, Y+1	; 0x01
     670:	8b 8d       	ldd	r24, Y+27	; 0x1b
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	2c 8d       	ldd	r18, Y+28	; 0x1c
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	82 9f       	mul	r24, r18
     67a:	a0 01       	movw	r20, r0
     67c:	83 9f       	mul	r24, r19
     67e:	50 0d       	add	r21, r0
     680:	92 9f       	mul	r25, r18
     682:	50 0d       	add	r21, r0
     684:	11 24       	eor	r1, r1
     686:	4e 0f       	add	r20, r30
     688:	5f 1f       	adc	r21, r31
     68a:	5b 83       	std	Y+3, r21	; 0x03
     68c:	4a 83       	std	Y+2, r20	; 0x02
     68e:	1a 8e       	std	Y+26, r1	; 0x1a
     690:	fd 83       	std	Y+5, r31	; 0x05
     692:	ec 83       	std	Y+4, r30	; 0x04
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	28 9f       	mul	r18, r24
     698:	a0 01       	movw	r20, r0
     69a:	29 9f       	mul	r18, r25
     69c:	50 0d       	add	r21, r0
     69e:	38 9f       	mul	r19, r24
     6a0:	50 0d       	add	r21, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	cf 01       	movw	r24, r30
     6a6:	84 0f       	add	r24, r20
     6a8:	95 1f       	adc	r25, r21
     6aa:	9f 83       	std	Y+7, r25	; 0x07
     6ac:	8e 83       	std	Y+6, r24	; 0x06
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	8d 8f       	std	Y+29, r24	; 0x1d
     6b2:	8e 8f       	std	Y+30, r24	; 0x1e
     6b4:	61 11       	cpse	r22, r1
     6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <xQueueGenericReset+0x70>
     6b8:	88 85       	ldd	r24, Y+8	; 0x08
     6ba:	88 23       	and	r24, r24
     6bc:	89 f0       	breq	.+34     	; 0x6e0 <xQueueGenericReset+0x80>
     6be:	ce 01       	movw	r24, r28
     6c0:	08 96       	adiw	r24, 0x08	; 8
     6c2:	0e 94 cb 08 	call	0x1196	; 0x1196 <xTaskRemoveFromEventList>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	59 f4       	brne	.+22     	; 0x6e0 <xQueueGenericReset+0x80>
     6ca:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
     6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <xQueueGenericReset+0x80>
     6d0:	ce 01       	movw	r24, r28
     6d2:	08 96       	adiw	r24, 0x08	; 8
     6d4:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialise>
     6d8:	ce 01       	movw	r24, r28
     6da:	41 96       	adiw	r24, 0x11	; 17
     6dc:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialise>
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <xQueueGenericCreate>:
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	88 23       	and	r24, r24
     6f6:	01 f1       	breq	.+64     	; 0x738 <xQueueGenericCreate+0x4c>
     6f8:	06 2f       	mov	r16, r22
     6fa:	18 2f       	mov	r17, r24
     6fc:	8f e1       	ldi	r24, 0x1F	; 31
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     704:	ec 01       	movw	r28, r24
     706:	89 2b       	or	r24, r25
     708:	c9 f0       	breq	.+50     	; 0x73c <xQueueGenericCreate+0x50>
     70a:	10 9f       	mul	r17, r16
     70c:	c0 01       	movw	r24, r0
     70e:	11 24       	eor	r1, r1
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     716:	99 83       	std	Y+1, r25	; 0x01
     718:	88 83       	st	Y, r24
     71a:	89 2b       	or	r24, r25
     71c:	39 f0       	breq	.+14     	; 0x72c <xQueueGenericCreate+0x40>
     71e:	1b 8f       	std	Y+27, r17	; 0x1b
     720:	0c 8f       	std	Y+28, r16	; 0x1c
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	ce 01       	movw	r24, r28
     726:	0e 94 30 03 	call	0x660	; 0x660 <xQueueGenericReset>
     72a:	08 c0       	rjmp	.+16     	; 0x73c <xQueueGenericCreate+0x50>
     72c:	ce 01       	movw	r24, r28
     72e:	0e 94 7e 00 	call	0xfc	; 0xfc <vPortFree>
     732:	c0 e0       	ldi	r28, 0x00	; 0
     734:	d0 e0       	ldi	r29, 0x00	; 0
     736:	02 c0       	rjmp	.+4      	; 0x73c <xQueueGenericCreate+0x50>
     738:	c0 e0       	ldi	r28, 0x00	; 0
     73a:	d0 e0       	ldi	r29, 0x00	; 0
     73c:	ce 01       	movw	r24, r28
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	08 95       	ret

00000748 <xQueueGenericSend>:
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	00 d0       	rcall	.+0      	; 0x75a <xQueueGenericSend+0x12>
     75a:	00 d0       	rcall	.+0      	; 0x75c <xQueueGenericSend+0x14>
     75c:	1f 92       	push	r1
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	8c 01       	movw	r16, r24
     764:	7b 01       	movw	r14, r22
     766:	5d 83       	std	Y+5, r21	; 0x05
     768:	4c 83       	std	Y+4, r20	; 0x04
     76a:	c2 2e       	mov	r12, r18
     76c:	d1 2c       	mov	r13, r1
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	0f 92       	push	r0
     774:	f8 01       	movw	r30, r16
     776:	92 8d       	ldd	r25, Z+26	; 0x1a
     778:	83 8d       	ldd	r24, Z+27	; 0x1b
     77a:	98 17       	cp	r25, r24
     77c:	18 f0       	brcs	.+6      	; 0x784 <xQueueGenericSend+0x3c>
     77e:	f2 e0       	ldi	r31, 0x02	; 2
     780:	cf 12       	cpse	r12, r31
     782:	19 c0       	rjmp	.+50     	; 0x7b6 <xQueueGenericSend+0x6e>
     784:	4c 2d       	mov	r20, r12
     786:	b7 01       	movw	r22, r14
     788:	c8 01       	movw	r24, r16
     78a:	0e 94 80 02 	call	0x500	; 0x500 <prvCopyDataToQueue>
     78e:	f8 01       	movw	r30, r16
     790:	91 89       	ldd	r25, Z+17	; 0x11
     792:	99 23       	and	r25, r25
     794:	49 f0       	breq	.+18     	; 0x7a8 <xQueueGenericSend+0x60>
     796:	c8 01       	movw	r24, r16
     798:	41 96       	adiw	r24, 0x11	; 17
     79a:	0e 94 cb 08 	call	0x1196	; 0x1196 <xTaskRemoveFromEventList>
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	31 f4       	brne	.+12     	; 0x7ae <xQueueGenericSend+0x66>
     7a2:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
     7a6:	03 c0       	rjmp	.+6      	; 0x7ae <xQueueGenericSend+0x66>
     7a8:	81 11       	cpse	r24, r1
     7aa:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	4d c0       	rjmp	.+154    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ba:	89 2b       	or	r24, r25
     7bc:	21 f4       	brne	.+8      	; 0x7c6 <xQueueGenericSend+0x7e>
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	45 c0       	rjmp	.+138    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     7c6:	d1 10       	cpse	r13, r1
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <xQueueGenericSend+0x8e>
     7ca:	ce 01       	movw	r24, r28
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSetTimeOutState>
     7d2:	dd 24       	eor	r13, r13
     7d4:	d3 94       	inc	r13
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vTaskSuspendAll>
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	0f 92       	push	r0
     7e4:	f8 01       	movw	r30, r16
     7e6:	85 8d       	ldd	r24, Z+29	; 0x1d
     7e8:	8f 3f       	cpi	r24, 0xFF	; 255
     7ea:	09 f4       	brne	.+2      	; 0x7ee <xQueueGenericSend+0xa6>
     7ec:	15 8e       	std	Z+29, r1	; 0x1d
     7ee:	f8 01       	movw	r30, r16
     7f0:	86 8d       	ldd	r24, Z+30	; 0x1e
     7f2:	8f 3f       	cpi	r24, 0xFF	; 255
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <xQueueGenericSend+0xb0>
     7f6:	16 8e       	std	Z+30, r1	; 0x1e
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	be 01       	movw	r22, r28
     7fe:	6c 5f       	subi	r22, 0xFC	; 252
     800:	7f 4f       	sbci	r23, 0xFF	; 255
     802:	ce 01       	movw	r24, r28
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	0e 94 1e 09 	call	0x123c	; 0x123c <xTaskCheckForTimeOut>
     80a:	81 11       	cpse	r24, r1
     80c:	1b c0       	rjmp	.+54     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     80e:	c8 01       	movw	r24, r16
     810:	0e 94 72 02 	call	0x4e4	; 0x4e4 <prvIsQueueFull>
     814:	88 23       	and	r24, r24
     816:	81 f0       	breq	.+32     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     818:	6c 81       	ldd	r22, Y+4	; 0x04
     81a:	7d 81       	ldd	r23, Y+5	; 0x05
     81c:	c8 01       	movw	r24, r16
     81e:	08 96       	adiw	r24, 0x08	; 8
     820:	0e 94 ae 08 	call	0x115c	; 0x115c <vTaskPlaceOnEventList>
     824:	c8 01       	movw	r24, r16
     826:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <prvUnlockQueue>
     82a:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
     82e:	81 11       	cpse	r24, r1
     830:	9e cf       	rjmp	.-196    	; 0x76e <xQueueGenericSend+0x26>
     832:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
     836:	9b cf       	rjmp	.-202    	; 0x76e <xQueueGenericSend+0x26>
     838:	c8 01       	movw	r24, r16
     83a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <prvUnlockQueue>
     83e:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
     842:	95 cf       	rjmp	.-214    	; 0x76e <xQueueGenericSend+0x26>
     844:	c8 01       	movw	r24, r16
     846:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <prvUnlockQueue>
     84a:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	08 95       	ret

0000086c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <xQueueGenericReceive+0x16>
     882:	00 d0       	rcall	.+0      	; 0x884 <xQueueGenericReceive+0x18>
     884:	1f 92       	push	r1
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	8c 01       	movw	r16, r24
     88c:	6b 01       	movw	r12, r22
     88e:	5d 83       	std	Y+5, r21	; 0x05
     890:	4c 83       	std	Y+4, r20	; 0x04
     892:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE;
     894:	f1 2c       	mov	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     89c:	f8 01       	movw	r30, r16
     89e:	82 8d       	ldd	r24, Z+26	; 0x1a
     8a0:	88 23       	and	r24, r24
     8a2:	99 f1       	breq	.+102    	; 0x90a <xQueueGenericReceive+0x9e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     8a4:	a6 80       	ldd	r10, Z+6	; 0x06
     8a6:	b7 80       	ldd	r11, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     8a8:	b6 01       	movw	r22, r12
     8aa:	c8 01       	movw	r24, r16
     8ac:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
     8b0:	e1 10       	cpse	r14, r1
     8b2:	1a c0       	rjmp	.+52     	; 0x8e8 <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
     8b4:	f8 01       	movw	r30, r16
     8b6:	82 8d       	ldd	r24, Z+26	; 0x1a
     8b8:	81 50       	subi	r24, 0x01	; 1
     8ba:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	89 2b       	or	r24, r25
     8c2:	29 f4       	brne	.+10     	; 0x8ce <xQueueGenericReceive+0x62>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     8c4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <pvTaskIncrementMutexHeldCount>
     8c8:	f8 01       	movw	r30, r16
     8ca:	93 83       	std	Z+3, r25	; 0x03
     8cc:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     8ce:	f8 01       	movw	r30, r16
     8d0:	80 85       	ldd	r24, Z+8	; 0x08
     8d2:	88 23       	and	r24, r24
     8d4:	b1 f0       	breq	.+44     	; 0x902 <xQueueGenericReceive+0x96>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     8d6:	c8 01       	movw	r24, r16
     8d8:	08 96       	adiw	r24, 0x08	; 8
     8da:	0e 94 cb 08 	call	0x1196	; 0x1196 <xTaskRemoveFromEventList>
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	81 f4       	brne	.+32     	; 0x902 <xQueueGenericReceive+0x96>
						{
							queueYIELD_IF_USING_PREEMPTION();
     8e2:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
     8e6:	0d c0       	rjmp	.+26     	; 0x902 <xQueueGenericReceive+0x96>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     8e8:	f8 01       	movw	r30, r16
     8ea:	b7 82       	std	Z+7, r11	; 0x07
     8ec:	a6 82       	std	Z+6, r10	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     8ee:	81 89       	ldd	r24, Z+17	; 0x11
     8f0:	88 23       	and	r24, r24
     8f2:	39 f0       	breq	.+14     	; 0x902 <xQueueGenericReceive+0x96>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     8f4:	c8 01       	movw	r24, r16
     8f6:	41 96       	adiw	r24, 0x11	; 17
     8f8:	0e 94 cb 08 	call	0x1196	; 0x1196 <xTaskRemoveFromEventList>
     8fc:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
     8fe:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	5b c0       	rjmp	.+182    	; 0x9c0 <xQueueGenericReceive+0x154>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     90a:	8c 81       	ldd	r24, Y+4	; 0x04
     90c:	9d 81       	ldd	r25, Y+5	; 0x05
     90e:	89 2b       	or	r24, r25
     910:	21 f4       	brne	.+8      	; 0x91a <xQueueGenericReceive+0xae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     912:	0f 90       	pop	r0
     914:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	53 c0       	rjmp	.+166    	; 0x9c0 <xQueueGenericReceive+0x154>
				}
				else if( xEntryTimeSet == pdFALSE )
     91a:	f1 10       	cpse	r15, r1
     91c:	06 c0       	rjmp	.+12     	; 0x92a <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     926:	ff 24       	eor	r15, r15
     928:	f3 94       	inc	r15
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     92e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	0f 92       	push	r0
     938:	f8 01       	movw	r30, r16
     93a:	85 8d       	ldd	r24, Z+29	; 0x1d
     93c:	8f 3f       	cpi	r24, 0xFF	; 255
     93e:	09 f4       	brne	.+2      	; 0x942 <xQueueGenericReceive+0xd6>
     940:	15 8e       	std	Z+29, r1	; 0x1d
     942:	f8 01       	movw	r30, r16
     944:	86 8d       	ldd	r24, Z+30	; 0x1e
     946:	8f 3f       	cpi	r24, 0xFF	; 255
     948:	09 f4       	brne	.+2      	; 0x94c <xQueueGenericReceive+0xe0>
     94a:	16 8e       	std	Z+30, r1	; 0x1e
     94c:	0f 90       	pop	r0
     94e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     950:	be 01       	movw	r22, r28
     952:	6c 5f       	subi	r22, 0xFC	; 252
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 1e 09 	call	0x123c	; 0x123c <xTaskCheckForTimeOut>
     95e:	81 11       	cpse	r24, r1
     960:	29 c0       	rjmp	.+82     	; 0x9b4 <xQueueGenericReceive+0x148>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     962:	c8 01       	movw	r24, r16
     964:	0e 94 65 02 	call	0x4ca	; 0x4ca <prvIsQueueEmpty>
     968:	88 23       	and	r24, r24
     96a:	f1 f0       	breq	.+60     	; 0x9a8 <xQueueGenericReceive+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     96c:	f8 01       	movw	r30, r16
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	89 2b       	or	r24, r25
     974:	49 f4       	brne	.+18     	; 0x988 <xQueueGenericReceive+0x11c>
					{
						taskENTER_CRITICAL();
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     97c:	82 81       	ldd	r24, Z+2	; 0x02
     97e:	93 81       	ldd	r25, Z+3	; 0x03
     980:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     988:	6c 81       	ldd	r22, Y+4	; 0x04
     98a:	7d 81       	ldd	r23, Y+5	; 0x05
     98c:	c8 01       	movw	r24, r16
     98e:	41 96       	adiw	r24, 0x11	; 17
     990:	0e 94 ae 08 	call	0x115c	; 0x115c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     994:	c8 01       	movw	r24, r16
     996:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     99a:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
     99e:	81 11       	cpse	r24, r1
     9a0:	7a cf       	rjmp	.-268    	; 0x896 <xQueueGenericReceive+0x2a>
				{
					portYIELD_WITHIN_API();
     9a2:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
     9a6:	77 cf       	rjmp	.-274    	; 0x896 <xQueueGenericReceive+0x2a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     9a8:	c8 01       	movw	r24, r16
     9aa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     9ae:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
     9b2:	71 cf       	rjmp	.-286    	; 0x896 <xQueueGenericReceive+0x2a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     9b4:	c8 01       	movw	r24, r16
     9b6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     9ba:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     9be:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	bf 90       	pop	r11
     9dc:	af 90       	pop	r10
     9de:	08 95       	ret

000009e0 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     9e0:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <pxDelayedTaskList>
     9e4:	f0 91 f8 04 	lds	r31, 0x04F8	; 0x8004f8 <pxDelayedTaskList+0x1>
     9e8:	80 81       	ld	r24, Z
     9ea:	81 11       	cpse	r24, r1
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <prvResetNextTaskUnblockTime+0x1c>
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	9f ef       	ldi	r25, 0xFF	; 255
     9f2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     9f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     9fa:	08 95       	ret
     9fc:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <pxDelayedTaskList>
     a00:	f0 91 f8 04 	lds	r31, 0x04F8	; 0x8004f8 <pxDelayedTaskList+0x1>
     a04:	05 80       	ldd	r0, Z+5	; 0x05
     a06:	f6 81       	ldd	r31, Z+6	; 0x06
     a08:	e0 2d       	mov	r30, r0
     a0a:	06 80       	ldd	r0, Z+6	; 0x06
     a0c:	f7 81       	ldd	r31, Z+7	; 0x07
     a0e:	e0 2d       	mov	r30, r0
     a10:	82 81       	ldd	r24, Z+2	; 0x02
     a12:	93 81       	ldd	r25, Z+3	; 0x03
     a14:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a18:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     a1c:	08 95       	ret

00000a1e <prvAllocateTCBAndStack>:
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	7c 01       	movw	r14, r24
     a2c:	eb 01       	movw	r28, r22
     a2e:	8f e2       	ldi	r24, 0x2F	; 47
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     a36:	8c 01       	movw	r16, r24
     a38:	89 2b       	or	r24, r25
     a3a:	89 f0       	breq	.+34     	; 0xa5e <prvAllocateTCBAndStack+0x40>
     a3c:	20 97       	sbiw	r28, 0x00	; 0
     a3e:	21 f4       	brne	.+8      	; 0xa48 <prvAllocateTCBAndStack+0x2a>
     a40:	c7 01       	movw	r24, r14
     a42:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <prvAllocateTCBAndStack+0x2c>
     a48:	ce 01       	movw	r24, r28
     a4a:	f8 01       	movw	r30, r16
     a4c:	90 8f       	std	Z+24, r25	; 0x18
     a4e:	87 8b       	std	Z+23, r24	; 0x17
     a50:	89 2b       	or	r24, r25
     a52:	29 f4       	brne	.+10     	; 0xa5e <prvAllocateTCBAndStack+0x40>
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 7e 00 	call	0xfc	; 0xfc <vPortFree>
     a5a:	00 e0       	ldi	r16, 0x00	; 0
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	c8 01       	movw	r24, r16
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	08 95       	ret

00000a6e <prvDeleteTCB>:
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
     a74:	8f 89       	ldd	r24, Y+23	; 0x17
     a76:	98 8d       	ldd	r25, Y+24	; 0x18
     a78:	0e 94 7e 00 	call	0xfc	; 0xfc <vPortFree>
     a7c:	ce 01       	movw	r24, r28
     a7e:	0e 94 7e 00 	call	0xfc	; 0xfc <vPortFree>
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <prvInitialiseTCBVariables>:
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	ec 01       	movw	r28, r24
     a90:	14 2f       	mov	r17, r20
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	0f c0       	rjmp	.+30     	; 0xab4 <prvInitialiseTCBVariables+0x2c>
     a96:	82 2f       	mov	r24, r18
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	fb 01       	movw	r30, r22
     a9c:	e8 0f       	add	r30, r24
     a9e:	f9 1f       	adc	r31, r25
     aa0:	30 81       	ld	r19, Z
     aa2:	de 01       	movw	r26, r28
     aa4:	a8 0f       	add	r26, r24
     aa6:	b9 1f       	adc	r27, r25
     aa8:	59 96       	adiw	r26, 0x19	; 25
     aaa:	3c 93       	st	X, r19
     aac:	80 81       	ld	r24, Z
     aae:	88 23       	and	r24, r24
     ab0:	19 f0       	breq	.+6      	; 0xab8 <prvInitialiseTCBVariables+0x30>
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	24 31       	cpi	r18, 0x14	; 20
     ab6:	78 f3       	brcs	.-34     	; 0xa96 <prvInitialiseTCBVariables+0xe>
     ab8:	1c a6       	std	Y+44, r1	; 0x2c
     aba:	18 30       	cpi	r17, 0x08	; 8
     abc:	08 f0       	brcs	.+2      	; 0xac0 <prvInitialiseTCBVariables+0x38>
     abe:	17 e0       	ldi	r17, 0x07	; 7
     ac0:	1e 8b       	std	Y+22, r17	; 0x16
     ac2:	1d a7       	std	Y+45, r17	; 0x2d
     ac4:	1e a6       	std	Y+46, r1	; 0x2e
     ac6:	ce 01       	movw	r24, r28
     ac8:	02 96       	adiw	r24, 0x02	; 2
     aca:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialiseItem>
     ace:	ce 01       	movw	r24, r28
     ad0:	0c 96       	adiw	r24, 0x0c	; 12
     ad2:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialiseItem>
     ad6:	d9 87       	std	Y+9, r29	; 0x09
     ad8:	c8 87       	std	Y+8, r28	; 0x08
     ada:	88 e0       	ldi	r24, 0x08	; 8
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	81 1b       	sub	r24, r17
     ae0:	91 09       	sbc	r25, r1
     ae2:	9d 87       	std	Y+13, r25	; 0x0d
     ae4:	8c 87       	std	Y+12, r24	; 0x0c
     ae6:	db 8b       	std	Y+19, r29	; 0x13
     ae8:	ca 8b       	std	Y+18, r28	; 0x12
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	08 95       	ret

00000af2 <prvInitialiseTaskLists>:
     af2:	cf 93       	push	r28
     af4:	c0 e0       	ldi	r28, 0x00	; 0
     af6:	10 c0       	rjmp	.+32     	; 0xb18 <prvInitialiseTaskLists+0x26>
     af8:	8c 2f       	mov	r24, r28
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	9c 01       	movw	r18, r24
     afe:	22 0f       	add	r18, r18
     b00:	33 1f       	adc	r19, r19
     b02:	22 0f       	add	r18, r18
     b04:	33 1f       	adc	r19, r19
     b06:	22 0f       	add	r18, r18
     b08:	33 1f       	adc	r19, r19
     b0a:	82 0f       	add	r24, r18
     b0c:	93 1f       	adc	r25, r19
     b0e:	85 5f       	subi	r24, 0xF5	; 245
     b10:	9a 4f       	sbci	r25, 0xFA	; 250
     b12:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialise>
     b16:	cf 5f       	subi	r28, 0xFF	; 255
     b18:	c8 30       	cpi	r28, 0x08	; 8
     b1a:	70 f3       	brcs	.-36     	; 0xaf8 <prvInitialiseTaskLists+0x6>
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	95 e0       	ldi	r25, 0x05	; 5
     b20:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialise>
     b24:	89 ef       	ldi	r24, 0xF9	; 249
     b26:	94 e0       	ldi	r25, 0x04	; 4
     b28:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialise>
     b2c:	8c ee       	ldi	r24, 0xEC	; 236
     b2e:	94 e0       	ldi	r25, 0x04	; 4
     b30:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialise>
     b34:	83 ee       	ldi	r24, 0xE3	; 227
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialise>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	95 e0       	ldi	r25, 0x05	; 5
     b40:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <pxDelayedTaskList+0x1>
     b44:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <pxDelayedTaskList>
     b48:	89 ef       	ldi	r24, 0xF9	; 249
     b4a:	94 e0       	ldi	r25, 0x04	; 4
     b4c:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <pxOverflowDelayedTaskList+0x1>
     b50:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <pxOverflowDelayedTaskList>
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <prvAddCurrentTaskToDelayedList>:
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ec 01       	movw	r28, r24
     b5e:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
     b62:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     b66:	93 83       	std	Z+3, r25	; 0x03
     b68:	82 83       	std	Z+2, r24	; 0x02
     b6a:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <xTickCount>
     b6e:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <xTickCount+0x1>
     b72:	c8 17       	cp	r28, r24
     b74:	d9 07       	cpc	r29, r25
     b76:	68 f4       	brcc	.+26     	; 0xb92 <prvAddCurrentTaskToDelayedList+0x3a>
     b78:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <pxCurrentTCB>
     b7c:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     b80:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <pxOverflowDelayedTaskList>
     b84:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <pxOverflowDelayedTaskList+0x1>
     b88:	6e 5f       	subi	r22, 0xFE	; 254
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	0e 94 b2 00 	call	0x164	; 0x164 <vListInsert>
     b90:	17 c0       	rjmp	.+46     	; 0xbc0 <prvAddCurrentTaskToDelayedList+0x68>
     b92:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <pxCurrentTCB>
     b96:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     b9a:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <pxDelayedTaskList>
     b9e:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <pxDelayedTaskList+0x1>
     ba2:	6e 5f       	subi	r22, 0xFE	; 254
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	0e 94 b2 00 	call	0x164	; 0x164 <vListInsert>
     baa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     bb2:	c8 17       	cp	r28, r24
     bb4:	d9 07       	cpc	r29, r25
     bb6:	20 f4       	brcc	.+8      	; 0xbc0 <prvAddCurrentTaskToDelayedList+0x68>
     bb8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     bbc:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <xTaskGenericCreate>:
     bc6:	2f 92       	push	r2
     bc8:	3f 92       	push	r3
     bca:	4f 92       	push	r4
     bcc:	5f 92       	push	r5
     bce:	7f 92       	push	r7
     bd0:	8f 92       	push	r8
     bd2:	9f 92       	push	r9
     bd4:	af 92       	push	r10
     bd6:	bf 92       	push	r11
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	00 d0       	rcall	.+0      	; 0xbea <xTaskGenericCreate+0x24>
     bea:	00 d0       	rcall	.+0      	; 0xbec <xTaskGenericCreate+0x26>
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	4b 01       	movw	r8, r22
     bf6:	5c 83       	std	Y+4, r21	; 0x04
     bf8:	4b 83       	std	Y+3, r20	; 0x03
     bfa:	19 01       	movw	r2, r18
     bfc:	70 2e       	mov	r7, r16
     bfe:	b6 01       	movw	r22, r12
     c00:	25 01       	movw	r4, r10
     c02:	ca 01       	movw	r24, r20
     c04:	0e 94 0f 05 	call	0xa1e	; 0xa1e <prvAllocateTCBAndStack>
     c08:	5c 01       	movw	r10, r24
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	09 f4       	brne	.+2      	; 0xc10 <xTaskGenericCreate+0x4a>
     c0e:	6a c0       	rjmp	.+212    	; 0xce4 <xTaskGenericCreate+0x11e>
     c10:	fc 01       	movw	r30, r24
     c12:	c7 88       	ldd	r12, Z+23	; 0x17
     c14:	d0 8c       	ldd	r13, Z+24	; 0x18
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	c8 0e       	add	r12, r24
     c1e:	d9 1e       	adc	r13, r25
     c20:	0b 81       	ldd	r16, Y+3	; 0x03
     c22:	1c 81       	ldd	r17, Y+4	; 0x04
     c24:	92 01       	movw	r18, r4
     c26:	47 2d       	mov	r20, r7
     c28:	b4 01       	movw	r22, r8
     c2a:	c5 01       	movw	r24, r10
     c2c:	0e 94 44 05 	call	0xa88	; 0xa88 <prvInitialiseTCBVariables>
     c30:	a1 01       	movw	r20, r2
     c32:	69 81       	ldd	r22, Y+1	; 0x01
     c34:	7a 81       	ldd	r23, Y+2	; 0x02
     c36:	c6 01       	movw	r24, r12
     c38:	0e 94 12 01 	call	0x224	; 0x224 <pxPortInitialiseStack>
     c3c:	f5 01       	movw	r30, r10
     c3e:	91 83       	std	Z+1, r25	; 0x01
     c40:	80 83       	st	Z, r24
     c42:	e1 14       	cp	r14, r1
     c44:	f1 04       	cpc	r15, r1
     c46:	19 f0       	breq	.+6      	; 0xc4e <xTaskGenericCreate+0x88>
     c48:	f7 01       	movw	r30, r14
     c4a:	b1 82       	std	Z+1, r11	; 0x01
     c4c:	a0 82       	st	Z, r10
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	0f 92       	push	r0
     c54:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <uxCurrentNumberOfTasks>
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <uxCurrentNumberOfTasks>
     c5e:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <pxCurrentTCB>
     c62:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     c66:	89 2b       	or	r24, r25
     c68:	59 f4       	brne	.+22     	; 0xc80 <xTaskGenericCreate+0xba>
     c6a:	b0 92 54 05 	sts	0x0554, r11	; 0x800554 <pxCurrentTCB+0x1>
     c6e:	a0 92 53 05 	sts	0x0553, r10	; 0x800553 <pxCurrentTCB>
     c72:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <uxCurrentNumberOfTasks>
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 f4       	brne	.+36     	; 0xc9e <xTaskGenericCreate+0xd8>
     c7a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <prvInitialiseTaskLists>
     c7e:	0f c0       	rjmp	.+30     	; 0xc9e <xTaskGenericCreate+0xd8>
     c80:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <xSchedulerRunning>
     c84:	81 11       	cpse	r24, r1
     c86:	0b c0       	rjmp	.+22     	; 0xc9e <xTaskGenericCreate+0xd8>
     c88:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
     c8c:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     c90:	86 89       	ldd	r24, Z+22	; 0x16
     c92:	78 16       	cp	r7, r24
     c94:	20 f0       	brcs	.+8      	; 0xc9e <xTaskGenericCreate+0xd8>
     c96:	b0 92 54 05 	sts	0x0554, r11	; 0x800554 <pxCurrentTCB+0x1>
     c9a:	a0 92 53 05 	sts	0x0553, r10	; 0x800553 <pxCurrentTCB>
     c9e:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <uxTaskNumber>
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <uxTaskNumber>
     ca8:	f5 01       	movw	r30, r10
     caa:	86 89       	ldd	r24, Z+22	; 0x16
     cac:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <uxTopReadyPriority>
     cb0:	98 17       	cp	r25, r24
     cb2:	10 f4       	brcc	.+4      	; 0xcb8 <xTaskGenericCreate+0xf2>
     cb4:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <uxTopReadyPriority>
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	b5 01       	movw	r22, r10
     cbc:	6e 5f       	subi	r22, 0xFE	; 254
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	9c 01       	movw	r18, r24
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	22 0f       	add	r18, r18
     cc8:	33 1f       	adc	r19, r19
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	82 0f       	add	r24, r18
     cd0:	93 1f       	adc	r25, r19
     cd2:	85 5f       	subi	r24, 0xF5	; 245
     cd4:	9a 4f       	sbci	r25, 0xFA	; 250
     cd6:	0e 94 91 00 	call	0x122	; 0x122 <vListInsertEnd>
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	f1 e0       	ldi	r31, 0x01	; 1
     ce0:	f9 83       	std	Y+1, r31	; 0x01
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <xTaskGenericCreate+0x122>
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	e1 30       	cpi	r30, 0x01	; 1
     cec:	69 f4       	brne	.+26     	; 0xd08 <xTaskGenericCreate+0x142>
     cee:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <xSchedulerRunning>
     cf2:	88 23       	and	r24, r24
     cf4:	49 f0       	breq	.+18     	; 0xd08 <xTaskGenericCreate+0x142>
     cf6:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
     cfa:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     cfe:	86 89       	ldd	r24, Z+22	; 0x16
     d00:	87 15       	cp	r24, r7
     d02:	10 f4       	brcc	.+4      	; 0xd08 <xTaskGenericCreate+0x142>
     d04:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	9f 90       	pop	r9
     d28:	8f 90       	pop	r8
     d2a:	7f 90       	pop	r7
     d2c:	5f 90       	pop	r5
     d2e:	4f 90       	pop	r4
     d30:	3f 90       	pop	r3
     d32:	2f 90       	pop	r2
     d34:	08 95       	ret

00000d36 <vTaskStartScheduler>:
     d36:	af 92       	push	r10
     d38:	bf 92       	push	r11
     d3a:	cf 92       	push	r12
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	a1 2c       	mov	r10, r1
     d46:	b1 2c       	mov	r11, r1
     d48:	c1 2c       	mov	r12, r1
     d4a:	d1 2c       	mov	r13, r1
     d4c:	e1 2c       	mov	r14, r1
     d4e:	f1 2c       	mov	r15, r1
     d50:	00 e0       	ldi	r16, 0x00	; 0
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	45 e5       	ldi	r20, 0x55	; 85
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	62 e6       	ldi	r22, 0x62	; 98
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	89 e4       	ldi	r24, 0x49	; 73
     d60:	98 e0       	ldi	r25, 0x08	; 8
     d62:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <xTaskGenericCreate>
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	49 f4       	brne	.+18     	; 0xd7c <vTaskStartScheduler+0x46>
     d6a:	f8 94       	cli
     d6c:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <xSchedulerRunning>
     d70:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <xTickCount+0x1>
     d74:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <xTickCount>
     d78:	0e 94 7e 01 	call	0x2fc	; 0x2fc <xPortStartScheduler>
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	bf 90       	pop	r11
     d88:	af 90       	pop	r10
     d8a:	08 95       	ret

00000d8c <vTaskSuspendAll>:
     d8c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <uxSchedulerSuspended>
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <uxSchedulerSuspended>
     d96:	08 95       	ret

00000d98 <xTaskIncrementTick>:
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <uxSchedulerSuspended>
     daa:	81 11       	cpse	r24, r1
     dac:	99 c0       	rjmp	.+306    	; 0xee0 <xTaskIncrementTick+0x148>
     dae:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <xTickCount>
     db2:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <xTickCount+0x1>
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <xTickCount+0x1>
     dbc:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <xTickCount>
     dc0:	e0 90 df 04 	lds	r14, 0x04DF	; 0x8004df <xTickCount>
     dc4:	f0 90 e0 04 	lds	r15, 0x04E0	; 0x8004e0 <xTickCount+0x1>
     dc8:	e1 14       	cp	r14, r1
     dca:	f1 04       	cpc	r15, r1
     dcc:	b9 f4       	brne	.+46     	; 0xdfc <xTaskIncrementTick+0x64>
     dce:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <pxDelayedTaskList>
     dd2:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <pxDelayedTaskList+0x1>
     dd6:	20 91 f5 04 	lds	r18, 0x04F5	; 0x8004f5 <pxOverflowDelayedTaskList>
     dda:	30 91 f6 04 	lds	r19, 0x04F6	; 0x8004f6 <pxOverflowDelayedTaskList+0x1>
     dde:	30 93 f8 04 	sts	0x04F8, r19	; 0x8004f8 <pxDelayedTaskList+0x1>
     de2:	20 93 f7 04 	sts	0x04F7, r18	; 0x8004f7 <pxDelayedTaskList>
     de6:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <pxOverflowDelayedTaskList+0x1>
     dea:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <pxOverflowDelayedTaskList>
     dee:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <xNumOfOverflows>
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <xNumOfOverflows>
     df8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <prvResetNextTaskUnblockTime>
     dfc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e00:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e04:	e8 16       	cp	r14, r24
     e06:	f9 06       	cpc	r15, r25
     e08:	28 f4       	brcc	.+10     	; 0xe14 <xTaskIncrementTick+0x7c>
     e0a:	d1 2c       	mov	r13, r1
     e0c:	53 c0       	rjmp	.+166    	; 0xeb4 <xTaskIncrementTick+0x11c>
     e0e:	dd 24       	eor	r13, r13
     e10:	d3 94       	inc	r13
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <xTaskIncrementTick+0x7e>
     e14:	d1 2c       	mov	r13, r1
     e16:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <pxDelayedTaskList>
     e1a:	f0 91 f8 04 	lds	r31, 0x04F8	; 0x8004f8 <pxDelayedTaskList+0x1>
     e1e:	80 81       	ld	r24, Z
     e20:	81 11       	cpse	r24, r1
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <xTaskIncrementTick+0x9a>
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	9f ef       	ldi	r25, 0xFF	; 255
     e28:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e2c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     e30:	41 c0       	rjmp	.+130    	; 0xeb4 <xTaskIncrementTick+0x11c>
     e32:	e0 91 f7 04 	lds	r30, 0x04F7	; 0x8004f7 <pxDelayedTaskList>
     e36:	f0 91 f8 04 	lds	r31, 0x04F8	; 0x8004f8 <pxDelayedTaskList+0x1>
     e3a:	05 80       	ldd	r0, Z+5	; 0x05
     e3c:	f6 81       	ldd	r31, Z+6	; 0x06
     e3e:	e0 2d       	mov	r30, r0
     e40:	c6 81       	ldd	r28, Z+6	; 0x06
     e42:	d7 81       	ldd	r29, Z+7	; 0x07
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	e8 16       	cp	r14, r24
     e4a:	f9 06       	cpc	r15, r25
     e4c:	28 f4       	brcc	.+10     	; 0xe58 <xTaskIncrementTick+0xc0>
     e4e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     e56:	2e c0       	rjmp	.+92     	; 0xeb4 <xTaskIncrementTick+0x11c>
     e58:	8e 01       	movw	r16, r28
     e5a:	0e 5f       	subi	r16, 0xFE	; 254
     e5c:	1f 4f       	sbci	r17, 0xFF	; 255
     e5e:	c8 01       	movw	r24, r16
     e60:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
     e64:	8c 89       	ldd	r24, Y+20	; 0x14
     e66:	9d 89       	ldd	r25, Y+21	; 0x15
     e68:	89 2b       	or	r24, r25
     e6a:	21 f0       	breq	.+8      	; 0xe74 <xTaskIncrementTick+0xdc>
     e6c:	ce 01       	movw	r24, r28
     e6e:	0c 96       	adiw	r24, 0x0c	; 12
     e70:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
     e74:	8e 89       	ldd	r24, Y+22	; 0x16
     e76:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <uxTopReadyPriority>
     e7a:	98 17       	cp	r25, r24
     e7c:	10 f4       	brcc	.+4      	; 0xe82 <xTaskIncrementTick+0xea>
     e7e:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <uxTopReadyPriority>
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9c 01       	movw	r18, r24
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	22 0f       	add	r18, r18
     e8c:	33 1f       	adc	r19, r19
     e8e:	22 0f       	add	r18, r18
     e90:	33 1f       	adc	r19, r19
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	b8 01       	movw	r22, r16
     e98:	85 5f       	subi	r24, 0xF5	; 245
     e9a:	9a 4f       	sbci	r25, 0xFA	; 250
     e9c:	0e 94 91 00 	call	0x122	; 0x122 <vListInsertEnd>
     ea0:	9e 89       	ldd	r25, Y+22	; 0x16
     ea2:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
     ea6:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     eaa:	86 89       	ldd	r24, Z+22	; 0x16
     eac:	98 17       	cp	r25, r24
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <xTaskIncrementTick+0x11a>
     eb0:	ae cf       	rjmp	.-164    	; 0xe0e <xTaskIncrementTick+0x76>
     eb2:	b1 cf       	rjmp	.-158    	; 0xe16 <xTaskIncrementTick+0x7e>
     eb4:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
     eb8:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     ebc:	86 89       	ldd	r24, Z+22	; 0x16
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	fc 01       	movw	r30, r24
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	8e 0f       	add	r24, r30
     ed0:	9f 1f       	adc	r25, r31
     ed2:	fc 01       	movw	r30, r24
     ed4:	e5 5f       	subi	r30, 0xF5	; 245
     ed6:	fa 4f       	sbci	r31, 0xFA	; 250
     ed8:	80 81       	ld	r24, Z
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	40 f4       	brcc	.+16     	; 0xeee <xTaskIncrementTick+0x156>
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <xTaskIncrementTick+0x15a>
     ee0:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxPendedTicks>
     ee4:	8f 5f       	subi	r24, 0xFF	; 255
     ee6:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <uxPendedTicks>
     eea:	d1 2c       	mov	r13, r1
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <xTaskIncrementTick+0x15a>
     eee:	dd 24       	eor	r13, r13
     ef0:	d3 94       	inc	r13
     ef2:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <xYieldPending>
     ef6:	88 23       	and	r24, r24
     ef8:	11 f0       	breq	.+4      	; 0xefe <xTaskIncrementTick+0x166>
     efa:	dd 24       	eor	r13, r13
     efc:	d3 94       	inc	r13
     efe:	8d 2d       	mov	r24, r13
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	08 95       	ret

00000f10 <xTaskResumeAll>:
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	0f 92       	push	r0
     f1e:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <uxSchedulerSuspended>
     f22:	81 50       	subi	r24, 0x01	; 1
     f24:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <uxSchedulerSuspended>
     f28:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <uxSchedulerSuspended>
     f2c:	81 11       	cpse	r24, r1
     f2e:	57 c0       	rjmp	.+174    	; 0xfde <xTaskResumeAll+0xce>
     f30:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <uxCurrentNumberOfTasks>
     f34:	81 11       	cpse	r24, r1
     f36:	32 c0       	rjmp	.+100    	; 0xf9c <xTaskResumeAll+0x8c>
     f38:	55 c0       	rjmp	.+170    	; 0xfe4 <xTaskResumeAll+0xd4>
     f3a:	e0 91 f1 04 	lds	r30, 0x04F1	; 0x8004f1 <xPendingReadyList+0x5>
     f3e:	f0 91 f2 04 	lds	r31, 0x04F2	; 0x8004f2 <xPendingReadyList+0x6>
     f42:	c6 81       	ldd	r28, Z+6	; 0x06
     f44:	d7 81       	ldd	r29, Z+7	; 0x07
     f46:	ce 01       	movw	r24, r28
     f48:	0c 96       	adiw	r24, 0x0c	; 12
     f4a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
     f4e:	8e 01       	movw	r16, r28
     f50:	0e 5f       	subi	r16, 0xFE	; 254
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	c8 01       	movw	r24, r16
     f56:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
     f5a:	8e 89       	ldd	r24, Y+22	; 0x16
     f5c:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <uxTopReadyPriority>
     f60:	98 17       	cp	r25, r24
     f62:	10 f4       	brcc	.+4      	; 0xf68 <xTaskResumeAll+0x58>
     f64:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <uxTopReadyPriority>
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 01       	movw	r18, r24
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	22 0f       	add	r18, r18
     f76:	33 1f       	adc	r19, r19
     f78:	82 0f       	add	r24, r18
     f7a:	93 1f       	adc	r25, r19
     f7c:	b8 01       	movw	r22, r16
     f7e:	85 5f       	subi	r24, 0xF5	; 245
     f80:	9a 4f       	sbci	r25, 0xFA	; 250
     f82:	0e 94 91 00 	call	0x122	; 0x122 <vListInsertEnd>
     f86:	9e 89       	ldd	r25, Y+22	; 0x16
     f88:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
     f8c:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
     f90:	86 89       	ldd	r24, Z+22	; 0x16
     f92:	98 17       	cp	r25, r24
     f94:	18 f0       	brcs	.+6      	; 0xf9c <xTaskResumeAll+0x8c>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <xYieldPending>
     f9c:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <xPendingReadyList>
     fa0:	81 11       	cpse	r24, r1
     fa2:	cb cf       	rjmp	.-106    	; 0xf3a <xTaskResumeAll+0x2a>
     fa4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxPendedTicks>
     fa8:	81 11       	cpse	r24, r1
     faa:	0d c0       	rjmp	.+26     	; 0xfc6 <xTaskResumeAll+0xb6>
     fac:	10 c0       	rjmp	.+32     	; 0xfce <xTaskResumeAll+0xbe>
     fae:	0e 94 cc 06 	call	0xd98	; 0xd98 <xTaskIncrementTick>
     fb2:	88 23       	and	r24, r24
     fb4:	19 f0       	breq	.+6      	; 0xfbc <xTaskResumeAll+0xac>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <xYieldPending>
     fbc:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxPendedTicks>
     fc0:	81 50       	subi	r24, 0x01	; 1
     fc2:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <uxPendedTicks>
     fc6:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxPendedTicks>
     fca:	81 11       	cpse	r24, r1
     fcc:	f0 cf       	rjmp	.-32     	; 0xfae <xTaskResumeAll+0x9e>
     fce:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <xYieldPending>
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	31 f4       	brne	.+12     	; 0xfe2 <xTaskResumeAll+0xd2>
     fd6:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <xTaskResumeAll+0xd4>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <xTaskResumeAll+0xd4>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <vTaskDelay>:
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	ec 01       	movw	r28, r24
     ff8:	89 2b       	or	r24, r25
     ffa:	a9 f0       	breq	.+42     	; 0x1026 <vTaskDelay+0x34>
     ffc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vTaskSuspendAll>
    1000:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <xTickCount>
    1004:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <xTickCount+0x1>
    1008:	c8 0f       	add	r28, r24
    100a:	d9 1f       	adc	r29, r25
    100c:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <pxCurrentTCB>
    1010:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    1014:	02 96       	adiw	r24, 0x02	; 2
    1016:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
    101a:	ce 01       	movw	r24, r28
    101c:	0e 94 ac 05 	call	0xb58	; 0xb58 <prvAddCurrentTaskToDelayedList>
    1020:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <vTaskDelay+0x36>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	81 11       	cpse	r24, r1
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <vTaskDelay+0x3e>
    102c:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <prvCheckTasksWaitingTermination>:
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	24 c0       	rjmp	.+72     	; 0x1084 <prvCheckTasksWaitingTermination+0x4e>
    103c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <vTaskSuspendAll>
    1040:	c0 91 e3 04 	lds	r28, 0x04E3	; 0x8004e3 <xTasksWaitingTermination>
    1044:	0e 94 88 07 	call	0xf10	; 0xf10 <xTaskResumeAll>
    1048:	cc 23       	and	r28, r28
    104a:	e1 f0       	breq	.+56     	; 0x1084 <prvCheckTasksWaitingTermination+0x4e>
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	0f 92       	push	r0
    1052:	e0 91 e8 04 	lds	r30, 0x04E8	; 0x8004e8 <xTasksWaitingTermination+0x5>
    1056:	f0 91 e9 04 	lds	r31, 0x04E9	; 0x8004e9 <xTasksWaitingTermination+0x6>
    105a:	c6 81       	ldd	r28, Z+6	; 0x06
    105c:	d7 81       	ldd	r29, Z+7	; 0x07
    105e:	ce 01       	movw	r24, r28
    1060:	02 96       	adiw	r24, 0x02	; 2
    1062:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
    1066:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <uxCurrentNumberOfTasks>
    106a:	81 50       	subi	r24, 0x01	; 1
    106c:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <uxCurrentNumberOfTasks>
    1070:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <uxTasksDeleted>
    1074:	81 50       	subi	r24, 0x01	; 1
    1076:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <uxTasksDeleted>
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	ce 01       	movw	r24, r28
    1080:	0e 94 37 05 	call	0xa6e	; 0xa6e <prvDeleteTCB>
    1084:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <uxTasksDeleted>
    1088:	81 11       	cpse	r24, r1
    108a:	d8 cf       	rjmp	.-80     	; 0x103c <prvCheckTasksWaitingTermination+0x6>
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <prvIdleTask>:
    1092:	0e 94 1b 08 	call	0x1036	; 0x1036 <prvCheckTasksWaitingTermination>
    1096:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <pxReadyTasksLists>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	d0 f3       	brcs	.-12     	; 0x1092 <prvIdleTask>
    109e:	0e 94 ad 01 	call	0x35a	; 0x35a <vPortYield>
    10a2:	f7 cf       	rjmp	.-18     	; 0x1092 <prvIdleTask>

000010a4 <vTaskSwitchContext>:
    10a4:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <uxSchedulerSuspended>
    10a8:	88 23       	and	r24, r24
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <vTaskSwitchContext+0x10>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <xYieldPending>
    10b2:	08 95       	ret
    10b4:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <xYieldPending>
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <vTaskSwitchContext+0x20>
    10ba:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <uxTopReadyPriority>
    10be:	81 50       	subi	r24, 0x01	; 1
    10c0:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <uxTopReadyPriority>
    10c4:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <uxTopReadyPriority>
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	fc 01       	movw	r30, r24
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	8e 0f       	add	r24, r30
    10da:	9f 1f       	adc	r25, r31
    10dc:	fc 01       	movw	r30, r24
    10de:	e5 5f       	subi	r30, 0xF5	; 245
    10e0:	fa 4f       	sbci	r31, 0xFA	; 250
    10e2:	80 81       	ld	r24, Z
    10e4:	88 23       	and	r24, r24
    10e6:	49 f3       	breq	.-46     	; 0x10ba <vTaskSwitchContext+0x16>
    10e8:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <uxTopReadyPriority>
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9c 01       	movw	r18, r24
    10f0:	22 0f       	add	r18, r18
    10f2:	33 1f       	adc	r19, r19
    10f4:	22 0f       	add	r18, r18
    10f6:	33 1f       	adc	r19, r19
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	28 0f       	add	r18, r24
    10fe:	39 1f       	adc	r19, r25
    1100:	d9 01       	movw	r26, r18
    1102:	a5 5f       	subi	r26, 0xF5	; 245
    1104:	ba 4f       	sbci	r27, 0xFA	; 250
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	12 97       	sbiw	r26, 0x02	; 2
    110e:	02 80       	ldd	r0, Z+2	; 0x02
    1110:	f3 81       	ldd	r31, Z+3	; 0x03
    1112:	e0 2d       	mov	r30, r0
    1114:	12 96       	adiw	r26, 0x02	; 2
    1116:	fc 93       	st	X, r31
    1118:	ee 93       	st	-X, r30
    111a:	11 97       	sbiw	r26, 0x01	; 1
    111c:	22 5f       	subi	r18, 0xF2	; 242
    111e:	3a 4f       	sbci	r19, 0xFA	; 250
    1120:	e2 17       	cp	r30, r18
    1122:	f3 07       	cpc	r31, r19
    1124:	29 f4       	brne	.+10     	; 0x1130 <vTaskSwitchContext+0x8c>
    1126:	22 81       	ldd	r18, Z+2	; 0x02
    1128:	33 81       	ldd	r19, Z+3	; 0x03
    112a:	fd 01       	movw	r30, r26
    112c:	32 83       	std	Z+2, r19	; 0x02
    112e:	21 83       	std	Z+1, r18	; 0x01
    1130:	fc 01       	movw	r30, r24
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	8e 0f       	add	r24, r30
    1140:	9f 1f       	adc	r25, r31
    1142:	fc 01       	movw	r30, r24
    1144:	e5 5f       	subi	r30, 0xF5	; 245
    1146:	fa 4f       	sbci	r31, 0xFA	; 250
    1148:	01 80       	ldd	r0, Z+1	; 0x01
    114a:	f2 81       	ldd	r31, Z+2	; 0x02
    114c:	e0 2d       	mov	r30, r0
    114e:	86 81       	ldd	r24, Z+6	; 0x06
    1150:	97 81       	ldd	r25, Z+7	; 0x07
    1152:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <pxCurrentTCB+0x1>
    1156:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <pxCurrentTCB>
    115a:	08 95       	ret

0000115c <vTaskPlaceOnEventList>:
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	eb 01       	movw	r28, r22
    1162:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <pxCurrentTCB>
    1166:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    116a:	64 5f       	subi	r22, 0xF4	; 244
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	0e 94 b2 00 	call	0x164	; 0x164 <vListInsert>
    1172:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <pxCurrentTCB>
    1176:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    117a:	02 96       	adiw	r24, 0x02	; 2
    117c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
    1180:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <xTickCount>
    1184:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <xTickCount+0x1>
    1188:	8c 0f       	add	r24, r28
    118a:	9d 1f       	adc	r25, r29
    118c:	0e 94 ac 05 	call	0xb58	; 0xb58 <prvAddCurrentTaskToDelayedList>
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret

00001196 <xTaskRemoveFromEventList>:
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	dc 01       	movw	r26, r24
    11a0:	15 96       	adiw	r26, 0x05	; 5
    11a2:	ed 91       	ld	r30, X+
    11a4:	fc 91       	ld	r31, X
    11a6:	16 97       	sbiw	r26, 0x06	; 6
    11a8:	c6 81       	ldd	r28, Z+6	; 0x06
    11aa:	d7 81       	ldd	r29, Z+7	; 0x07
    11ac:	8e 01       	movw	r16, r28
    11ae:	04 5f       	subi	r16, 0xF4	; 244
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	c8 01       	movw	r24, r16
    11b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
    11b8:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <uxSchedulerSuspended>
    11bc:	81 11       	cpse	r24, r1
    11be:	1c c0       	rjmp	.+56     	; 0x11f8 <xTaskRemoveFromEventList+0x62>
    11c0:	0a 50       	subi	r16, 0x0A	; 10
    11c2:	11 09       	sbc	r17, r1
    11c4:	c8 01       	movw	r24, r16
    11c6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
    11ca:	8e 89       	ldd	r24, Y+22	; 0x16
    11cc:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <uxTopReadyPriority>
    11d0:	98 17       	cp	r25, r24
    11d2:	10 f4       	brcc	.+4      	; 0x11d8 <xTaskRemoveFromEventList+0x42>
    11d4:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <uxTopReadyPriority>
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9c 01       	movw	r18, r24
    11dc:	22 0f       	add	r18, r18
    11de:	33 1f       	adc	r19, r19
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	22 0f       	add	r18, r18
    11e6:	33 1f       	adc	r19, r19
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	b8 01       	movw	r22, r16
    11ee:	85 5f       	subi	r24, 0xF5	; 245
    11f0:	9a 4f       	sbci	r25, 0xFA	; 250
    11f2:	0e 94 91 00 	call	0x122	; 0x122 <vListInsertEnd>
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <xTaskRemoveFromEventList+0x6c>
    11f8:	b8 01       	movw	r22, r16
    11fa:	8c ee       	ldi	r24, 0xEC	; 236
    11fc:	94 e0       	ldi	r25, 0x04	; 4
    11fe:	0e 94 91 00 	call	0x122	; 0x122 <vListInsertEnd>
    1202:	9e 89       	ldd	r25, Y+22	; 0x16
    1204:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
    1208:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    120c:	86 89       	ldd	r24, Z+22	; 0x16
    120e:	89 17       	cp	r24, r25
    1210:	20 f4       	brcc	.+8      	; 0x121a <xTaskRemoveFromEventList+0x84>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <xYieldPending>
    1218:	01 c0       	rjmp	.+2      	; 0x121c <xTaskRemoveFromEventList+0x86>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	08 95       	ret

00001226 <vTaskSetTimeOutState>:
    1226:	20 91 da 04 	lds	r18, 0x04DA	; 0x8004da <xNumOfOverflows>
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
    122e:	20 91 df 04 	lds	r18, 0x04DF	; 0x8004df <xTickCount>
    1232:	30 91 e0 04 	lds	r19, 0x04E0	; 0x8004e0 <xTickCount+0x1>
    1236:	32 83       	std	Z+2, r19	; 0x02
    1238:	21 83       	std	Z+1, r18	; 0x01
    123a:	08 95       	ret

0000123c <xTaskCheckForTimeOut>:
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	fc 01       	movw	r30, r24
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	0f 92       	push	r0
    1248:	40 91 df 04 	lds	r20, 0x04DF	; 0x8004df <xTickCount>
    124c:	50 91 e0 04 	lds	r21, 0x04E0	; 0x8004e0 <xTickCount+0x1>
    1250:	90 81       	ld	r25, Z
    1252:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <xNumOfOverflows>
    1256:	98 17       	cp	r25, r24
    1258:	29 f0       	breq	.+10     	; 0x1264 <xTaskCheckForTimeOut+0x28>
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	92 81       	ldd	r25, Z+2	; 0x02
    125e:	48 17       	cp	r20, r24
    1260:	59 07       	cpc	r21, r25
    1262:	b0 f4       	brcc	.+44     	; 0x1290 <xTaskCheckForTimeOut+0x54>
    1264:	21 81       	ldd	r18, Z+1	; 0x01
    1266:	32 81       	ldd	r19, Z+2	; 0x02
    1268:	ca 01       	movw	r24, r20
    126a:	82 1b       	sub	r24, r18
    126c:	93 0b       	sbc	r25, r19
    126e:	eb 01       	movw	r28, r22
    1270:	a8 81       	ld	r26, Y
    1272:	b9 81       	ldd	r27, Y+1	; 0x01
    1274:	8a 17       	cp	r24, r26
    1276:	9b 07       	cpc	r25, r27
    1278:	68 f4       	brcc	.+26     	; 0x1294 <xTaskCheckForTimeOut+0x58>
    127a:	cf 01       	movw	r24, r30
    127c:	24 1b       	sub	r18, r20
    127e:	35 0b       	sbc	r19, r21
    1280:	2a 0f       	add	r18, r26
    1282:	3b 1f       	adc	r19, r27
    1284:	39 83       	std	Y+1, r19	; 0x01
    1286:	28 83       	st	Y, r18
    1288:	0e 94 13 09 	call	0x1226	; 0x1226 <vTaskSetTimeOutState>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <xTaskCheckForTimeOut+0x5a>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <xTaskCheckForTimeOut+0x5a>
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <vTaskMissedYield>:
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <xYieldPending>
    12a6:	08 95       	ret

000012a8 <vTaskPriorityInherit>:
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	fc 01       	movw	r30, r24
    12b2:	89 2b       	or	r24, r25
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <vTaskPriorityInherit+0x10>
    12b6:	55 c0       	rjmp	.+170    	; 0x1362 <vTaskPriorityInherit+0xba>
    12b8:	26 89       	ldd	r18, Z+22	; 0x16
    12ba:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <pxCurrentTCB>
    12be:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    12c2:	56 96       	adiw	r26, 0x16	; 22
    12c4:	8c 91       	ld	r24, X
    12c6:	28 17       	cp	r18, r24
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <vTaskPriorityInherit+0x24>
    12ca:	4b c0       	rjmp	.+150    	; 0x1362 <vTaskPriorityInherit+0xba>
    12cc:	84 85       	ldd	r24, Z+12	; 0x0c
    12ce:	95 85       	ldd	r25, Z+13	; 0x0d
    12d0:	99 23       	and	r25, r25
    12d2:	64 f0       	brlt	.+24     	; 0x12ec <vTaskPriorityInherit+0x44>
    12d4:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <pxCurrentTCB>
    12d8:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    12dc:	56 96       	adiw	r26, 0x16	; 22
    12de:	3c 91       	ld	r19, X
    12e0:	88 e0       	ldi	r24, 0x08	; 8
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	83 1b       	sub	r24, r19
    12e6:	91 09       	sbc	r25, r1
    12e8:	95 87       	std	Z+13, r25	; 0x0d
    12ea:	84 87       	std	Z+12, r24	; 0x0c
    12ec:	82 85       	ldd	r24, Z+10	; 0x0a
    12ee:	93 85       	ldd	r25, Z+11	; 0x0b
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	a9 01       	movw	r20, r18
    12f4:	44 0f       	add	r20, r20
    12f6:	55 1f       	adc	r21, r21
    12f8:	44 0f       	add	r20, r20
    12fa:	55 1f       	adc	r21, r21
    12fc:	44 0f       	add	r20, r20
    12fe:	55 1f       	adc	r21, r21
    1300:	24 0f       	add	r18, r20
    1302:	35 1f       	adc	r19, r21
    1304:	25 5f       	subi	r18, 0xF5	; 245
    1306:	3a 4f       	sbci	r19, 0xFA	; 250
    1308:	82 17       	cp	r24, r18
    130a:	93 07       	cpc	r25, r19
    130c:	19 f5       	brne	.+70     	; 0x1354 <vTaskPriorityInherit+0xac>
    130e:	8f 01       	movw	r16, r30
    1310:	ef 01       	movw	r28, r30
    1312:	22 96       	adiw	r28, 0x02	; 2
    1314:	ce 01       	movw	r24, r28
    1316:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
    131a:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
    131e:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    1322:	86 89       	ldd	r24, Z+22	; 0x16
    1324:	f8 01       	movw	r30, r16
    1326:	86 8b       	std	Z+22, r24	; 0x16
    1328:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <uxTopReadyPriority>
    132c:	98 17       	cp	r25, r24
    132e:	10 f4       	brcc	.+4      	; 0x1334 <vTaskPriorityInherit+0x8c>
    1330:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <uxTopReadyPriority>
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 01       	movw	r18, r24
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	be 01       	movw	r22, r28
    134a:	85 5f       	subi	r24, 0xF5	; 245
    134c:	9a 4f       	sbci	r25, 0xFA	; 250
    134e:	0e 94 91 00 	call	0x122	; 0x122 <vListInsertEnd>
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <vTaskPriorityInherit+0xba>
    1354:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <pxCurrentTCB>
    1358:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    135c:	56 96       	adiw	r26, 0x16	; 22
    135e:	8c 91       	ld	r24, X
    1360:	86 8b       	std	Z+22, r24	; 0x16
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret

0000136c <xTaskPriorityDisinherit>:
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	fc 01       	movw	r30, r24
    1376:	89 2b       	or	r24, r25
    1378:	79 f1       	breq	.+94     	; 0x13d8 <xTaskPriorityDisinherit+0x6c>
    137a:	86 a5       	ldd	r24, Z+46	; 0x2e
    137c:	81 50       	subi	r24, 0x01	; 1
    137e:	86 a7       	std	Z+46, r24	; 0x2e
    1380:	26 89       	ldd	r18, Z+22	; 0x16
    1382:	95 a5       	ldd	r25, Z+45	; 0x2d
    1384:	29 17       	cp	r18, r25
    1386:	51 f1       	breq	.+84     	; 0x13dc <xTaskPriorityDisinherit+0x70>
    1388:	81 11       	cpse	r24, r1
    138a:	2a c0       	rjmp	.+84     	; 0x13e0 <xTaskPriorityDisinherit+0x74>
    138c:	ef 01       	movw	r28, r30
    138e:	8f 01       	movw	r16, r30
    1390:	0e 5f       	subi	r16, 0xFE	; 254
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	c8 01       	movw	r24, r16
    1396:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uxListRemove>
    139a:	8d a5       	ldd	r24, Y+45	; 0x2d
    139c:	8e 8b       	std	Y+22, r24	; 0x16
    139e:	28 e0       	ldi	r18, 0x08	; 8
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	28 1b       	sub	r18, r24
    13a4:	31 09       	sbc	r19, r1
    13a6:	3d 87       	std	Y+13, r19	; 0x0d
    13a8:	2c 87       	std	Y+12, r18	; 0x0c
    13aa:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <uxTopReadyPriority>
    13ae:	98 17       	cp	r25, r24
    13b0:	10 f4       	brcc	.+4      	; 0x13b6 <xTaskPriorityDisinherit+0x4a>
    13b2:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <uxTopReadyPriority>
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9c 01       	movw	r18, r24
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	82 0f       	add	r24, r18
    13c8:	93 1f       	adc	r25, r19
    13ca:	b8 01       	movw	r22, r16
    13cc:	85 5f       	subi	r24, 0xF5	; 245
    13ce:	9a 4f       	sbci	r25, 0xFA	; 250
    13d0:	0e 94 91 00 	call	0x122	; 0x122 <vListInsertEnd>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <xTaskPriorityDisinherit+0x76>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <xTaskPriorityDisinherit+0x76>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <xTaskPriorityDisinherit+0x76>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	08 95       	ret

000013ec <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    13ec:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <pxCurrentTCB>
    13f0:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    13f4:	89 2b       	or	r24, r25
    13f6:	39 f0       	breq	.+14     	; 0x1406 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    13f8:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <pxCurrentTCB>
    13fc:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
    1400:	86 a5       	ldd	r24, Z+46	; 0x2e
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	86 a7       	std	Z+46, r24	; 0x2e
		}

		return pxCurrentTCB;
    1406:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <pxCurrentTCB>
    140a:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <pxCurrentTCB+0x1>
	}
    140e:	08 95       	ret

00001410 <T_CheckSwitch>:

void T_CheckSwitch(void *param)
{
	while(1)
	{
		if (!DIO_ReadPin(RESET_SW))
    1410:	88 e0       	ldi	r24, 0x08	; 8
    1412:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <DIO_ReadPin>
    1416:	81 11       	cpse	r24, r1
    1418:	10 c0       	rjmp	.+32     	; 0x143a <T_CheckSwitch+0x2a>
		{
			//xEventGroupSetBits(egEvents , E_RESET);
			xSemaphoreGive(Reset_sem);
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <Reset_sem>
    1428:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <Reset_sem+0x1>
    142c:	0e 94 a4 03 	call	0x748	; 0x748 <xQueueGenericSend>
			while(!DIO_ReadPin(RESET_SW));
    1430:	88 e0       	ldi	r24, 0x08	; 8
    1432:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <DIO_ReadPin>
    1436:	88 23       	and	r24, r24
    1438:	d9 f3       	breq	.-10     	; 0x1430 <T_CheckSwitch+0x20>
		}
		
		if (!DIO_ReadPin(PAUSE_SW))
    143a:	8a e0       	ldi	r24, 0x0A	; 10
    143c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <DIO_ReadPin>
    1440:	81 11       	cpse	r24, r1
    1442:	10 c0       	rjmp	.+32     	; 0x1464 <T_CheckSwitch+0x54>
		{
			//xEventGroupSetBits(egEvents , E_PAUSE);
			xSemaphoreGive(Pause_sem);
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <Pause_sem>
    1452:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <Pause_sem+0x1>
    1456:	0e 94 a4 03 	call	0x748	; 0x748 <xQueueGenericSend>
			while(!DIO_ReadPin(PAUSE_SW));
    145a:	8a e0       	ldi	r24, 0x0A	; 10
    145c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <DIO_ReadPin>
    1460:	88 23       	and	r24, r24
    1462:	d9 f3       	breq	.-10     	; 0x145a <T_CheckSwitch+0x4a>
		}
		
		if (!DIO_ReadPin(RESUME_SW))
    1464:	89 e0       	ldi	r24, 0x09	; 9
    1466:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <DIO_ReadPin>
    146a:	81 11       	cpse	r24, r1
    146c:	10 c0       	rjmp	.+32     	; 0x148e <T_CheckSwitch+0x7e>
		{
			//xEventGroupSetBits(egEvents , E_RESUME);
			xSemaphoreGive(Resume_sem);
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <Resume_sem>
    147c:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <Resume_sem+0x1>
    1480:	0e 94 a4 03 	call	0x748	; 0x748 <xQueueGenericSend>
			while(!DIO_ReadPin(RESUME_SW));
    1484:	89 e0       	ldi	r24, 0x09	; 9
    1486:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <DIO_ReadPin>
    148a:	88 23       	and	r24, r24
    148c:	d9 f3       	breq	.-10     	; 0x1484 <T_CheckSwitch+0x74>
		}
		
		vTaskDelay(50);
    148e:	82 e3       	ldi	r24, 0x32	; 50
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 f9 07 	call	0xff2	; 0xff2 <vTaskDelay>
	}
    1496:	bc cf       	rjmp	.-136    	; 0x1410 <T_CheckSwitch>

00001498 <T_UpdateTime>:
{
	static u8 flag = 0;
	while(1)
	{
	
    	if (xSemaphoreTake(Reset_sem , 10))
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	4a e0       	ldi	r20, 0x0A	; 10
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <Reset_sem>
    14a6:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <Reset_sem+0x1>
    14aa:	0e 94 36 04 	call	0x86c	; 0x86c <xQueueGenericReceive>
    14ae:	88 23       	and	r24, r24
    14b0:	61 f0       	breq	.+24     	; 0x14ca <T_UpdateTime+0x32>
    	{
			second = 0;
    14b2:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <second+0x1>
    14b6:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <second>
			minute = 0;
    14ba:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <minute+0x1>
    14be:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <minute>
			hour = 0;
    14c2:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <hour+0x1>
    14c6:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <hour>
    	}
		if (xSemaphoreTake(Pause_sem , 10))
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	4a e0       	ldi	r20, 0x0A	; 10
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <Pause_sem>
    14d8:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <Pause_sem+0x1>
    14dc:	0e 94 36 04 	call	0x86c	; 0x86c <xQueueGenericReceive>
    14e0:	88 23       	and	r24, r24
    14e2:	19 f0       	breq	.+6      	; 0x14ea <T_UpdateTime+0x52>
		{
			flag = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <flag.2126>
		} 
		if (xSemaphoreTake(Resume_sem , 10))
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	4a e0       	ldi	r20, 0x0A	; 10
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <Resume_sem>
    14f8:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <Resume_sem+0x1>
    14fc:	0e 94 36 04 	call	0x86c	; 0x86c <xQueueGenericReceive>
    1500:	81 11       	cpse	r24, r1
		{
			flag = 0;
    1502:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <flag.2126>
		}
		if (flag == 0)
    1506:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <flag.2126>
    150a:	81 11       	cpse	r24, r1
    150c:	2f c0       	rjmp	.+94     	; 0x156c <T_UpdateTime+0xd4>
		{
				second++;
    150e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <second>
    1512:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <second+0x1>
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <second+0x1>
    151c:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <second>
				if (second == 60)
    1520:	cc 97       	sbiw	r24, 0x3c	; 60
    1522:	69 f4       	brne	.+26     	; 0x153e <T_UpdateTime+0xa6>
				{
					second = 0;
    1524:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <second+0x1>
    1528:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <second>
					minute++;
    152c:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <minute>
    1530:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <minute+0x1>
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <minute+0x1>
    153a:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <minute>
				}
				if (minute == 60)
    153e:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <minute>
    1542:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <minute+0x1>
    1546:	cc 97       	sbiw	r24, 0x3c	; 60
    1548:	89 f4       	brne	.+34     	; 0x156c <T_UpdateTime+0xd4>
				{
					second = 0;
    154a:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <second+0x1>
    154e:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <second>
					minute = 0;
    1552:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <minute+0x1>
    1556:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <minute>
					hour++;
    155a:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <hour>
    155e:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <hour+0x1>
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <hour+0x1>
    1568:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <hour>
				}
		}
		vTaskDelay(1000);
    156c:	88 ee       	ldi	r24, 0xE8	; 232
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	0e 94 f9 07 	call	0xff2	; 0xff2 <vTaskDelay>
	}
    1574:	91 cf       	rjmp	.-222    	; 0x1498 <T_UpdateTime>

00001576 <T_UpdateSSD>:
}
void T_UpdateSSD(void *param)
{
	while(1)
	{
		DIO_WritePin(PINA_0 , LOW);
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_2 , LOW);
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_3 , LOW);
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_4 , LOW);
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	84 e0       	ldi	r24, 0x04	; 4
    1592:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_5 , LOW);
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	85 e0       	ldi	r24, 0x05	; 5
    159a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_1 , HIGH);
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_lower_nibble_value(PC , second%10);
    15a6:	40 91 5a 05 	lds	r20, 0x055A	; 0x80055a <second>
    15aa:	50 91 5b 05 	lds	r21, 0x055B	; 0x80055b <second+0x1>
    15ae:	9a 01       	movw	r18, r20
    15b0:	ad ec       	ldi	r26, 0xCD	; 205
    15b2:	bc ec       	ldi	r27, 0xCC	; 204
    15b4:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__umulhisi3>
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	96 95       	lsr	r25
    15be:	87 95       	ror	r24
    15c0:	96 95       	lsr	r25
    15c2:	87 95       	ror	r24
    15c4:	9c 01       	movw	r18, r24
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	82 0f       	add	r24, r18
    15d8:	93 1f       	adc	r25, r19
    15da:	ba 01       	movw	r22, r20
    15dc:	68 1b       	sub	r22, r24
    15de:	79 0b       	sbc	r23, r25
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <DIO_lower_nibble_value>
		vTaskDelay(5);
    15e8:	85 e0       	ldi	r24, 0x05	; 5
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 f9 07 	call	0xff2	; 0xff2 <vTaskDelay>
		
		DIO_WritePin(PINA_1 , LOW);
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_2 , LOW);
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_3 , LOW);
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_4 , LOW);
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	84 e0       	ldi	r24, 0x04	; 4
    160c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_5 , LOW);
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	85 e0       	ldi	r24, 0x05	; 5
    1614:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_0 , HIGH);
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_lower_nibble_value(PC , second/10);
    1620:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <second>
    1624:	30 91 5b 05 	lds	r19, 0x055B	; 0x80055b <second+0x1>
    1628:	ad ec       	ldi	r26, 0xCD	; 205
    162a:	bc ec       	ldi	r27, 0xCC	; 204
    162c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__umulhisi3>
    1630:	bc 01       	movw	r22, r24
    1632:	76 95       	lsr	r23
    1634:	67 95       	ror	r22
    1636:	76 95       	lsr	r23
    1638:	67 95       	ror	r22
    163a:	76 95       	lsr	r23
    163c:	67 95       	ror	r22
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <DIO_lower_nibble_value>
		vTaskDelay(5);
    1646:	85 e0       	ldi	r24, 0x05	; 5
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 f9 07 	call	0xff2	; 0xff2 <vTaskDelay>
		
		DIO_WritePin(PINA_0 , LOW);
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_1 , LOW);
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_2 , LOW);
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_4 , LOW);
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	84 e0       	ldi	r24, 0x04	; 4
    166a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_5 , LOW);
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	85 e0       	ldi	r24, 0x05	; 5
    1672:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_3 , HIGH);
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_lower_nibble_value(PC , minute%10);
    167e:	40 91 58 05 	lds	r20, 0x0558	; 0x800558 <minute>
    1682:	50 91 59 05 	lds	r21, 0x0559	; 0x800559 <minute+0x1>
    1686:	9a 01       	movw	r18, r20
    1688:	ad ec       	ldi	r26, 0xCD	; 205
    168a:	bc ec       	ldi	r27, 0xCC	; 204
    168c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__umulhisi3>
    1690:	96 95       	lsr	r25
    1692:	87 95       	ror	r24
    1694:	96 95       	lsr	r25
    1696:	87 95       	ror	r24
    1698:	96 95       	lsr	r25
    169a:	87 95       	ror	r24
    169c:	9c 01       	movw	r18, r24
    169e:	22 0f       	add	r18, r18
    16a0:	33 1f       	adc	r19, r19
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	82 0f       	add	r24, r18
    16b0:	93 1f       	adc	r25, r19
    16b2:	ba 01       	movw	r22, r20
    16b4:	68 1b       	sub	r22, r24
    16b6:	79 0b       	sbc	r23, r25
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <DIO_lower_nibble_value>
		vTaskDelay(5);
    16c0:	85 e0       	ldi	r24, 0x05	; 5
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 f9 07 	call	0xff2	; 0xff2 <vTaskDelay>
		DIO_WritePin(PINA_0 , LOW);
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_1 , LOW);
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_3 , LOW);
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_4 , LOW);
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_5 , LOW);
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	85 e0       	ldi	r24, 0x05	; 5
    16ec:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_2 , HIGH);
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_lower_nibble_value(PC , minute/10);
    16f8:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <minute>
    16fc:	30 91 59 05 	lds	r19, 0x0559	; 0x800559 <minute+0x1>
    1700:	ad ec       	ldi	r26, 0xCD	; 205
    1702:	bc ec       	ldi	r27, 0xCC	; 204
    1704:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__umulhisi3>
    1708:	bc 01       	movw	r22, r24
    170a:	76 95       	lsr	r23
    170c:	67 95       	ror	r22
    170e:	76 95       	lsr	r23
    1710:	67 95       	ror	r22
    1712:	76 95       	lsr	r23
    1714:	67 95       	ror	r22
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <DIO_lower_nibble_value>
		vTaskDelay(5);
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 f9 07 	call	0xff2	; 0xff2 <vTaskDelay>
		
		DIO_WritePin(PINA_0 , LOW);
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_1 , LOW);
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_2 , LOW);
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_3 , LOW);
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_4 , LOW);
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_5 , HIGH);
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	85 e0       	ldi	r24, 0x05	; 5
    1752:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_lower_nibble_value(PC , hour%10);
    1756:	40 91 56 05 	lds	r20, 0x0556	; 0x800556 <hour>
    175a:	50 91 57 05 	lds	r21, 0x0557	; 0x800557 <hour+0x1>
    175e:	9a 01       	movw	r18, r20
    1760:	ad ec       	ldi	r26, 0xCD	; 205
    1762:	bc ec       	ldi	r27, 0xCC	; 204
    1764:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__umulhisi3>
    1768:	96 95       	lsr	r25
    176a:	87 95       	ror	r24
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	96 95       	lsr	r25
    1772:	87 95       	ror	r24
    1774:	9c 01       	movw	r18, r24
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	82 0f       	add	r24, r18
    1788:	93 1f       	adc	r25, r19
    178a:	ba 01       	movw	r22, r20
    178c:	68 1b       	sub	r22, r24
    178e:	79 0b       	sbc	r23, r25
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <DIO_lower_nibble_value>
		vTaskDelay(5);
    1798:	85 e0       	ldi	r24, 0x05	; 5
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 f9 07 	call	0xff2	; 0xff2 <vTaskDelay>
		DIO_WritePin(PINA_0 , LOW);
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_1 , LOW);
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_2 , LOW);
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_3 , LOW);
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_5 , LOW);
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	85 e0       	ldi	r24, 0x05	; 5
    17c4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_WritePin(PINA_4 , HIGH);
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_WritePin>
		DIO_lower_nibble_value(PC , hour/10);
    17d0:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <hour>
    17d4:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <hour+0x1>
    17d8:	ad ec       	ldi	r26, 0xCD	; 205
    17da:	bc ec       	ldi	r27, 0xCC	; 204
    17dc:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__umulhisi3>
    17e0:	bc 01       	movw	r22, r24
    17e2:	76 95       	lsr	r23
    17e4:	67 95       	ror	r22
    17e6:	76 95       	lsr	r23
    17e8:	67 95       	ror	r22
    17ea:	76 95       	lsr	r23
    17ec:	67 95       	ror	r22
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <DIO_lower_nibble_value>
		vTaskDelay(5);
    17f6:	85 e0       	ldi	r24, 0x05	; 5
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 f9 07 	call	0xff2	; 0xff2 <vTaskDelay>
    17fe:	bb ce       	rjmp	.-650    	; 0x1576 <T_UpdateSSD>

00001800 <System_Init>:
	}
}

void System_Init()
{
	DIO_Init();
    1800:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <DIO_Init>
	UART_Init();
    1804:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <UART_Init>
    1808:	08 95       	ret

0000180a <main>:
u16 minute = 0;
u16 hour = 0;

int main(void)
{
	System_Init();
    180a:	0e 94 00 0c 	call	0x1800	; 0x1800 <System_Init>
	
	/* create tasks */
	xTaskCreate(&T_CheckSwitch    , NULL , 150 , NULL , 1 , NULL);
    180e:	a1 2c       	mov	r10, r1
    1810:	b1 2c       	mov	r11, r1
    1812:	c1 2c       	mov	r12, r1
    1814:	d1 2c       	mov	r13, r1
    1816:	e1 2c       	mov	r14, r1
    1818:	f1 2c       	mov	r15, r1
    181a:	01 e0       	ldi	r16, 0x01	; 1
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	46 e9       	ldi	r20, 0x96	; 150
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	88 e0       	ldi	r24, 0x08	; 8
    182a:	9a e0       	ldi	r25, 0x0A	; 10
    182c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <xTaskGenericCreate>
	xTaskCreate(&T_UpdateTime    , NULL , 150 , NULL , 2 , NULL);
    1830:	02 e0       	ldi	r16, 0x02	; 2
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	46 e9       	ldi	r20, 0x96	; 150
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	8c e4       	ldi	r24, 0x4C	; 76
    1840:	9a e0       	ldi	r25, 0x0A	; 10
    1842:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <xTaskGenericCreate>
	xTaskCreate(&T_UpdateSSD  , NULL , 150 , NULL , 3 , NULL);
    1846:	03 e0       	ldi	r16, 0x03	; 3
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	46 e9       	ldi	r20, 0x96	; 150
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	8b eb       	ldi	r24, 0xBB	; 187
    1856:	9a e0       	ldi	r25, 0x0A	; 10
    1858:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <xTaskGenericCreate>
	
	/* create event group */
	//egEvents = xEventGroupCreate();
	
	Reset_sem = xSemaphoreCreateBinary();
    185c:	43 e0       	ldi	r20, 0x03	; 3
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	0e 94 76 03 	call	0x6ec	; 0x6ec <xQueueGenericCreate>
    1866:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <Reset_sem+0x1>
    186a:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <Reset_sem>
	Pause_sem = xSemaphoreCreateBinary();
    186e:	43 e0       	ldi	r20, 0x03	; 3
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	0e 94 76 03 	call	0x6ec	; 0x6ec <xQueueGenericCreate>
    1878:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <Pause_sem+0x1>
    187c:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <Pause_sem>
	Resume_sem = xSemaphoreCreateBinary();
    1880:	43 e0       	ldi	r20, 0x03	; 3
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	0e 94 76 03 	call	0x6ec	; 0x6ec <xQueueGenericCreate>
    188a:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <Resume_sem+0x1>
    188e:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <Resume_sem>
	
	/* start os */
	vTaskStartScheduler();
    1892:	0e 94 9b 06 	call	0xd36	; 0xd36 <vTaskStartScheduler>
    1896:	ff cf       	rjmp	.-2      	; 0x1896 <main+0x8c>

00001898 <DIO_InitPin>:
		PORTC_REG|=value;
		
		break;
		case PD:
		PORTD_REG&=0x0f;
		PORTD_REG|=value;
    1898:	98 2f       	mov	r25, r24
    189a:	96 95       	lsr	r25
    189c:	96 95       	lsr	r25
    189e:	96 95       	lsr	r25
    18a0:	87 70       	andi	r24, 0x07	; 7
    18a2:	61 30       	cpi	r22, 0x01	; 1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <DIO_InitPin+0x10>
    18a6:	55 c0       	rjmp	.+170    	; 0x1952 <DIO_InitPin+0xba>
    18a8:	20 f0       	brcs	.+8      	; 0x18b2 <DIO_InitPin+0x1a>
    18aa:	62 30       	cpi	r22, 0x02	; 2
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <DIO_InitPin+0x18>
    18ae:	a1 c0       	rjmp	.+322    	; 0x19f2 <DIO_InitPin+0x15a>
    18b0:	08 95       	ret
    18b2:	91 30       	cpi	r25, 0x01	; 1
    18b4:	c1 f0       	breq	.+48     	; 0x18e6 <DIO_InitPin+0x4e>
    18b6:	28 f0       	brcs	.+10     	; 0x18c2 <DIO_InitPin+0x2a>
    18b8:	92 30       	cpi	r25, 0x02	; 2
    18ba:	39 f1       	breq	.+78     	; 0x190a <DIO_InitPin+0x72>
    18bc:	93 30       	cpi	r25, 0x03	; 3
    18be:	b9 f1       	breq	.+110    	; 0x192e <DIO_InitPin+0x96>
    18c0:	08 95       	ret
    18c2:	4a b3       	in	r20, 0x1a	; 26
    18c4:	21 e0       	ldi	r18, 0x01	; 1
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	b9 01       	movw	r22, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_InitPin+0x38>
    18cc:	66 0f       	add	r22, r22
    18ce:	77 1f       	adc	r23, r23
    18d0:	8a 95       	dec	r24
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_InitPin+0x34>
    18d4:	cb 01       	movw	r24, r22
    18d6:	94 2f       	mov	r25, r20
    18d8:	98 2b       	or	r25, r24
    18da:	9a bb       	out	0x1a, r25	; 26
    18dc:	9b b3       	in	r25, 0x1b	; 27
    18de:	80 95       	com	r24
    18e0:	89 23       	and	r24, r25
    18e2:	8b bb       	out	0x1b, r24	; 27
    18e4:	08 95       	ret
    18e6:	47 b3       	in	r20, 0x17	; 23
    18e8:	21 e0       	ldi	r18, 0x01	; 1
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	b9 01       	movw	r22, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_InitPin+0x5c>
    18f0:	66 0f       	add	r22, r22
    18f2:	77 1f       	adc	r23, r23
    18f4:	8a 95       	dec	r24
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_InitPin+0x58>
    18f8:	cb 01       	movw	r24, r22
    18fa:	94 2f       	mov	r25, r20
    18fc:	98 2b       	or	r25, r24
    18fe:	97 bb       	out	0x17, r25	; 23
    1900:	98 b3       	in	r25, 0x18	; 24
    1902:	80 95       	com	r24
    1904:	89 23       	and	r24, r25
    1906:	88 bb       	out	0x18, r24	; 24
    1908:	08 95       	ret
    190a:	44 b3       	in	r20, 0x14	; 20
    190c:	21 e0       	ldi	r18, 0x01	; 1
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	b9 01       	movw	r22, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_InitPin+0x80>
    1914:	66 0f       	add	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	8a 95       	dec	r24
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_InitPin+0x7c>
    191c:	cb 01       	movw	r24, r22
    191e:	94 2f       	mov	r25, r20
    1920:	98 2b       	or	r25, r24
    1922:	94 bb       	out	0x14, r25	; 20
    1924:	95 b3       	in	r25, 0x15	; 21
    1926:	80 95       	com	r24
    1928:	89 23       	and	r24, r25
    192a:	85 bb       	out	0x15, r24	; 21
    192c:	08 95       	ret
    192e:	41 b3       	in	r20, 0x11	; 17
    1930:	21 e0       	ldi	r18, 0x01	; 1
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	b9 01       	movw	r22, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_InitPin+0xa4>
    1938:	66 0f       	add	r22, r22
    193a:	77 1f       	adc	r23, r23
    193c:	8a 95       	dec	r24
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_InitPin+0xa0>
    1940:	cb 01       	movw	r24, r22
    1942:	94 2f       	mov	r25, r20
    1944:	98 2b       	or	r25, r24
    1946:	91 bb       	out	0x11, r25	; 17
    1948:	92 b3       	in	r25, 0x12	; 18
    194a:	80 95       	com	r24
    194c:	89 23       	and	r24, r25
    194e:	82 bb       	out	0x12, r24	; 18
    1950:	08 95       	ret
    1952:	91 30       	cpi	r25, 0x01	; 1
    1954:	c1 f0       	breq	.+48     	; 0x1986 <DIO_InitPin+0xee>
    1956:	28 f0       	brcs	.+10     	; 0x1962 <DIO_InitPin+0xca>
    1958:	92 30       	cpi	r25, 0x02	; 2
    195a:	39 f1       	breq	.+78     	; 0x19aa <DIO_InitPin+0x112>
    195c:	93 30       	cpi	r25, 0x03	; 3
    195e:	b9 f1       	breq	.+110    	; 0x19ce <DIO_InitPin+0x136>
    1960:	08 95       	ret
    1962:	4a b3       	in	r20, 0x1a	; 26
    1964:	21 e0       	ldi	r18, 0x01	; 1
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	b9 01       	movw	r22, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_InitPin+0xd8>
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	8a 95       	dec	r24
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_InitPin+0xd4>
    1974:	cb 01       	movw	r24, r22
    1976:	80 95       	com	r24
    1978:	94 2f       	mov	r25, r20
    197a:	98 23       	and	r25, r24
    197c:	9a bb       	out	0x1a, r25	; 26
    197e:	9b b3       	in	r25, 0x1b	; 27
    1980:	89 23       	and	r24, r25
    1982:	8b bb       	out	0x1b, r24	; 27
    1984:	08 95       	ret
    1986:	47 b3       	in	r20, 0x17	; 23
    1988:	21 e0       	ldi	r18, 0x01	; 1
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	b9 01       	movw	r22, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_InitPin+0xfc>
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	8a 95       	dec	r24
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_InitPin+0xf8>
    1998:	cb 01       	movw	r24, r22
    199a:	80 95       	com	r24
    199c:	94 2f       	mov	r25, r20
    199e:	98 23       	and	r25, r24
    19a0:	97 bb       	out	0x17, r25	; 23
    19a2:	98 b3       	in	r25, 0x18	; 24
    19a4:	89 23       	and	r24, r25
    19a6:	88 bb       	out	0x18, r24	; 24
    19a8:	08 95       	ret
    19aa:	44 b3       	in	r20, 0x14	; 20
    19ac:	21 e0       	ldi	r18, 0x01	; 1
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	b9 01       	movw	r22, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <DIO_InitPin+0x120>
    19b4:	66 0f       	add	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	8a 95       	dec	r24
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <DIO_InitPin+0x11c>
    19bc:	cb 01       	movw	r24, r22
    19be:	80 95       	com	r24
    19c0:	94 2f       	mov	r25, r20
    19c2:	98 23       	and	r25, r24
    19c4:	94 bb       	out	0x14, r25	; 20
    19c6:	95 b3       	in	r25, 0x15	; 21
    19c8:	89 23       	and	r24, r25
    19ca:	85 bb       	out	0x15, r24	; 21
    19cc:	08 95       	ret
    19ce:	41 b3       	in	r20, 0x11	; 17
    19d0:	21 e0       	ldi	r18, 0x01	; 1
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	b9 01       	movw	r22, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_InitPin+0x144>
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_InitPin+0x140>
    19e0:	cb 01       	movw	r24, r22
    19e2:	80 95       	com	r24
    19e4:	94 2f       	mov	r25, r20
    19e6:	98 23       	and	r25, r24
    19e8:	91 bb       	out	0x11, r25	; 17
    19ea:	92 b3       	in	r25, 0x12	; 18
    19ec:	89 23       	and	r24, r25
    19ee:	82 bb       	out	0x12, r24	; 18
    19f0:	08 95       	ret
    19f2:	91 30       	cpi	r25, 0x01	; 1
    19f4:	c1 f0       	breq	.+48     	; 0x1a26 <DIO_InitPin+0x18e>
    19f6:	28 f0       	brcs	.+10     	; 0x1a02 <DIO_InitPin+0x16a>
    19f8:	92 30       	cpi	r25, 0x02	; 2
    19fa:	39 f1       	breq	.+78     	; 0x1a4a <DIO_InitPin+0x1b2>
    19fc:	93 30       	cpi	r25, 0x03	; 3
    19fe:	b9 f1       	breq	.+110    	; 0x1a6e <DIO_InitPin+0x1d6>
    1a00:	08 95       	ret
    1a02:	4a b3       	in	r20, 0x1a	; 26
    1a04:	21 e0       	ldi	r18, 0x01	; 1
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	b9 01       	movw	r22, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_InitPin+0x178>
    1a0c:	66 0f       	add	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	8a 95       	dec	r24
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_InitPin+0x174>
    1a14:	cb 01       	movw	r24, r22
    1a16:	96 2f       	mov	r25, r22
    1a18:	90 95       	com	r25
    1a1a:	94 23       	and	r25, r20
    1a1c:	9a bb       	out	0x1a, r25	; 26
    1a1e:	9b b3       	in	r25, 0x1b	; 27
    1a20:	89 2b       	or	r24, r25
    1a22:	8b bb       	out	0x1b, r24	; 27
    1a24:	08 95       	ret
    1a26:	47 b3       	in	r20, 0x17	; 23
    1a28:	21 e0       	ldi	r18, 0x01	; 1
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	b9 01       	movw	r22, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_InitPin+0x19c>
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	8a 95       	dec	r24
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_InitPin+0x198>
    1a38:	cb 01       	movw	r24, r22
    1a3a:	96 2f       	mov	r25, r22
    1a3c:	90 95       	com	r25
    1a3e:	94 23       	and	r25, r20
    1a40:	97 bb       	out	0x17, r25	; 23
    1a42:	98 b3       	in	r25, 0x18	; 24
    1a44:	89 2b       	or	r24, r25
    1a46:	88 bb       	out	0x18, r24	; 24
    1a48:	08 95       	ret
    1a4a:	44 b3       	in	r20, 0x14	; 20
    1a4c:	21 e0       	ldi	r18, 0x01	; 1
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	b9 01       	movw	r22, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_InitPin+0x1c0>
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	8a 95       	dec	r24
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <DIO_InitPin+0x1bc>
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	96 2f       	mov	r25, r22
    1a60:	90 95       	com	r25
    1a62:	94 23       	and	r25, r20
    1a64:	94 bb       	out	0x14, r25	; 20
    1a66:	95 b3       	in	r25, 0x15	; 21
    1a68:	89 2b       	or	r24, r25
    1a6a:	85 bb       	out	0x15, r24	; 21
    1a6c:	08 95       	ret
    1a6e:	41 b3       	in	r20, 0x11	; 17
    1a70:	21 e0       	ldi	r18, 0x01	; 1
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	b9 01       	movw	r22, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <DIO_InitPin+0x1e4>
    1a78:	66 0f       	add	r22, r22
    1a7a:	77 1f       	adc	r23, r23
    1a7c:	8a 95       	dec	r24
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <DIO_InitPin+0x1e0>
    1a80:	cb 01       	movw	r24, r22
    1a82:	96 2f       	mov	r25, r22
    1a84:	90 95       	com	r25
    1a86:	94 23       	and	r25, r20
    1a88:	91 bb       	out	0x11, r25	; 17
    1a8a:	92 b3       	in	r25, 0x12	; 18
    1a8c:	89 2b       	or	r24, r25
    1a8e:	82 bb       	out	0x12, r24	; 18
    1a90:	08 95       	ret

00001a92 <DIO_Init>:
    1a92:	cf 93       	push	r28
    1a94:	c0 e0       	ldi	r28, 0x00	; 0
    1a96:	09 c0       	rjmp	.+18     	; 0x1aaa <DIO_Init+0x18>
    1a98:	ec 2f       	mov	r30, r28
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	e9 59       	subi	r30, 0x99	; 153
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	8c 2f       	mov	r24, r28
    1aa4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <DIO_InitPin>
    1aa8:	cf 5f       	subi	r28, 0xFF	; 255
    1aaa:	c0 32       	cpi	r28, 0x20	; 32
    1aac:	a8 f3       	brcs	.-22     	; 0x1a98 <DIO_Init+0x6>
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <DIO_WritePin>:
    1ab2:	98 2f       	mov	r25, r24
    1ab4:	96 95       	lsr	r25
    1ab6:	96 95       	lsr	r25
    1ab8:	96 95       	lsr	r25
    1aba:	87 70       	andi	r24, 0x07	; 7
    1abc:	61 11       	cpse	r22, r1
    1abe:	40 c0       	rjmp	.+128    	; 0x1b40 <DIO_WritePin+0x8e>
    1ac0:	91 30       	cpi	r25, 0x01	; 1
    1ac2:	a1 f0       	breq	.+40     	; 0x1aec <DIO_WritePin+0x3a>
    1ac4:	28 f0       	brcs	.+10     	; 0x1ad0 <DIO_WritePin+0x1e>
    1ac6:	92 30       	cpi	r25, 0x02	; 2
    1ac8:	f9 f0       	breq	.+62     	; 0x1b08 <DIO_WritePin+0x56>
    1aca:	93 30       	cpi	r25, 0x03	; 3
    1acc:	59 f1       	breq	.+86     	; 0x1b24 <DIO_WritePin+0x72>
    1ace:	08 95       	ret
    1ad0:	4b b3       	in	r20, 0x1b	; 27
    1ad2:	21 e0       	ldi	r18, 0x01	; 1
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	b9 01       	movw	r22, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_WritePin+0x2c>
    1ada:	66 0f       	add	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	8a 95       	dec	r24
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_WritePin+0x28>
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	80 95       	com	r24
    1ae6:	84 23       	and	r24, r20
    1ae8:	8b bb       	out	0x1b, r24	; 27
    1aea:	08 95       	ret
    1aec:	48 b3       	in	r20, 0x18	; 24
    1aee:	21 e0       	ldi	r18, 0x01	; 1
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	b9 01       	movw	r22, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_WritePin+0x48>
    1af6:	66 0f       	add	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	8a 95       	dec	r24
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_WritePin+0x44>
    1afe:	cb 01       	movw	r24, r22
    1b00:	80 95       	com	r24
    1b02:	84 23       	and	r24, r20
    1b04:	88 bb       	out	0x18, r24	; 24
    1b06:	08 95       	ret
    1b08:	45 b3       	in	r20, 0x15	; 21
    1b0a:	21 e0       	ldi	r18, 0x01	; 1
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	b9 01       	movw	r22, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_WritePin+0x64>
    1b12:	66 0f       	add	r22, r22
    1b14:	77 1f       	adc	r23, r23
    1b16:	8a 95       	dec	r24
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <DIO_WritePin+0x60>
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	80 95       	com	r24
    1b1e:	84 23       	and	r24, r20
    1b20:	85 bb       	out	0x15, r24	; 21
    1b22:	08 95       	ret
    1b24:	42 b3       	in	r20, 0x12	; 18
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <DIO_WritePin+0x80>
    1b2e:	66 0f       	add	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	8a 95       	dec	r24
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <DIO_WritePin+0x7c>
    1b36:	cb 01       	movw	r24, r22
    1b38:	80 95       	com	r24
    1b3a:	84 23       	and	r24, r20
    1b3c:	82 bb       	out	0x12, r24	; 18
    1b3e:	08 95       	ret
    1b40:	61 30       	cpi	r22, 0x01	; 1
    1b42:	d9 f5       	brne	.+118    	; 0x1bba <DIO_WritePin+0x108>
    1b44:	91 30       	cpi	r25, 0x01	; 1
    1b46:	99 f0       	breq	.+38     	; 0x1b6e <DIO_WritePin+0xbc>
    1b48:	28 f0       	brcs	.+10     	; 0x1b54 <DIO_WritePin+0xa2>
    1b4a:	92 30       	cpi	r25, 0x02	; 2
    1b4c:	e9 f0       	breq	.+58     	; 0x1b88 <DIO_WritePin+0xd6>
    1b4e:	93 30       	cpi	r25, 0x03	; 3
    1b50:	41 f1       	breq	.+80     	; 0x1ba2 <DIO_WritePin+0xf0>
    1b52:	08 95       	ret
    1b54:	4b b3       	in	r20, 0x1b	; 27
    1b56:	21 e0       	ldi	r18, 0x01	; 1
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	b9 01       	movw	r22, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_WritePin+0xb0>
    1b5e:	66 0f       	add	r22, r22
    1b60:	77 1f       	adc	r23, r23
    1b62:	8a 95       	dec	r24
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_WritePin+0xac>
    1b66:	cb 01       	movw	r24, r22
    1b68:	84 2b       	or	r24, r20
    1b6a:	8b bb       	out	0x1b, r24	; 27
    1b6c:	08 95       	ret
    1b6e:	48 b3       	in	r20, 0x18	; 24
    1b70:	21 e0       	ldi	r18, 0x01	; 1
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	b9 01       	movw	r22, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <DIO_WritePin+0xca>
    1b78:	66 0f       	add	r22, r22
    1b7a:	77 1f       	adc	r23, r23
    1b7c:	8a 95       	dec	r24
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <DIO_WritePin+0xc6>
    1b80:	cb 01       	movw	r24, r22
    1b82:	84 2b       	or	r24, r20
    1b84:	88 bb       	out	0x18, r24	; 24
    1b86:	08 95       	ret
    1b88:	45 b3       	in	r20, 0x15	; 21
    1b8a:	21 e0       	ldi	r18, 0x01	; 1
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	b9 01       	movw	r22, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_WritePin+0xe4>
    1b92:	66 0f       	add	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	8a 95       	dec	r24
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_WritePin+0xe0>
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	84 2b       	or	r24, r20
    1b9e:	85 bb       	out	0x15, r24	; 21
    1ba0:	08 95       	ret
    1ba2:	42 b3       	in	r20, 0x12	; 18
    1ba4:	21 e0       	ldi	r18, 0x01	; 1
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	b9 01       	movw	r22, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <DIO_WritePin+0xfe>
    1bac:	66 0f       	add	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	8a 95       	dec	r24
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <DIO_WritePin+0xfa>
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	84 2b       	or	r24, r20
    1bb8:	82 bb       	out	0x12, r24	; 18
    1bba:	08 95       	ret

00001bbc <DIO_ReadPin>:
    1bbc:	98 2f       	mov	r25, r24
    1bbe:	96 95       	lsr	r25
    1bc0:	96 95       	lsr	r25
    1bc2:	96 95       	lsr	r25
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	47 70       	andi	r20, 0x07	; 7
    1bc8:	91 30       	cpi	r25, 0x01	; 1
    1bca:	81 f0       	breq	.+32     	; 0x1bec <DIO_ReadPin+0x30>
    1bcc:	28 f0       	brcs	.+10     	; 0x1bd8 <DIO_ReadPin+0x1c>
    1bce:	92 30       	cpi	r25, 0x02	; 2
    1bd0:	b9 f0       	breq	.+46     	; 0x1c00 <DIO_ReadPin+0x44>
    1bd2:	93 30       	cpi	r25, 0x03	; 3
    1bd4:	f9 f0       	breq	.+62     	; 0x1c14 <DIO_ReadPin+0x58>
    1bd6:	28 c0       	rjmp	.+80     	; 0x1c28 <DIO_ReadPin+0x6c>
    1bd8:	99 b3       	in	r25, 0x19	; 25
    1bda:	89 2f       	mov	r24, r25
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_ReadPin+0x28>
    1be0:	95 95       	asr	r25
    1be2:	87 95       	ror	r24
    1be4:	4a 95       	dec	r20
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_ReadPin+0x24>
    1be8:	81 70       	andi	r24, 0x01	; 1
    1bea:	08 95       	ret
    1bec:	26 b3       	in	r18, 0x16	; 22
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	c9 01       	movw	r24, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_ReadPin+0x3c>
    1bf4:	95 95       	asr	r25
    1bf6:	87 95       	ror	r24
    1bf8:	4a 95       	dec	r20
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_ReadPin+0x38>
    1bfc:	81 70       	andi	r24, 0x01	; 1
    1bfe:	08 95       	ret
    1c00:	23 b3       	in	r18, 0x13	; 19
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	c9 01       	movw	r24, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_ReadPin+0x50>
    1c08:	95 95       	asr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	4a 95       	dec	r20
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_ReadPin+0x4c>
    1c10:	81 70       	andi	r24, 0x01	; 1
    1c12:	08 95       	ret
    1c14:	20 b3       	in	r18, 0x10	; 16
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	c9 01       	movw	r24, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <DIO_ReadPin+0x64>
    1c1c:	95 95       	asr	r25
    1c1e:	87 95       	ror	r24
    1c20:	4a 95       	dec	r20
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <DIO_ReadPin+0x60>
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	08 95       	ret
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	08 95       	ret

00001c2c <DIO_lower_nibble_value>:
	
}

void DIO_lower_nibble_value(DIO_Port_type portNumber,u8 value)
{
	value&=0x0f;
    1c2c:	6f 70       	andi	r22, 0x0F	; 15
	switch(portNumber)
    1c2e:	81 30       	cpi	r24, 0x01	; 1
    1c30:	69 f0       	breq	.+26     	; 0x1c4c <DIO_lower_nibble_value+0x20>
    1c32:	28 f0       	brcs	.+10     	; 0x1c3e <DIO_lower_nibble_value+0x12>
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	89 f0       	breq	.+34     	; 0x1c5a <DIO_lower_nibble_value+0x2e>
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	b1 f0       	breq	.+44     	; 0x1c68 <DIO_lower_nibble_value+0x3c>
    1c3c:	08 95       	ret
	{
		case PA:
		PORTA_REG&=0xf0;
    1c3e:	8b b3       	in	r24, 0x1b	; 27
    1c40:	80 7f       	andi	r24, 0xF0	; 240
    1c42:	8b bb       	out	0x1b, r24	; 27
		PORTA_REG|=value;
    1c44:	8b b3       	in	r24, 0x1b	; 27
    1c46:	68 2b       	or	r22, r24
    1c48:	6b bb       	out	0x1b, r22	; 27
		
		break;
    1c4a:	08 95       	ret
		case PB:
		PORTB_REG&=0xf0;
    1c4c:	88 b3       	in	r24, 0x18	; 24
    1c4e:	80 7f       	andi	r24, 0xF0	; 240
    1c50:	88 bb       	out	0x18, r24	; 24
		PORTB_REG|=value;
    1c52:	88 b3       	in	r24, 0x18	; 24
    1c54:	68 2b       	or	r22, r24
    1c56:	68 bb       	out	0x18, r22	; 24
		
		break;
    1c58:	08 95       	ret
		case PC:
		PORTC_REG&=0xf0;
    1c5a:	85 b3       	in	r24, 0x15	; 21
    1c5c:	80 7f       	andi	r24, 0xF0	; 240
    1c5e:	85 bb       	out	0x15, r24	; 21
		PORTC_REG|=value;
    1c60:	85 b3       	in	r24, 0x15	; 21
    1c62:	68 2b       	or	r22, r24
    1c64:	65 bb       	out	0x15, r22	; 21
		
		break;
    1c66:	08 95       	ret
		case PD:
		PORTD_REG&=0xf0;
    1c68:	82 b3       	in	r24, 0x12	; 18
    1c6a:	80 7f       	andi	r24, 0xF0	; 240
    1c6c:	82 bb       	out	0x12, r24	; 18
		PORTD_REG|=value;
    1c6e:	82 b3       	in	r24, 0x12	; 18
    1c70:	68 2b       	or	r22, r24
    1c72:	62 bb       	out	0x12, r22	; 18
    1c74:	08 95       	ret

00001c76 <UART_Init>:
	UART_RX_Fptr = LocalFptr;
}

 void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
    1c76:	8b b1       	in	r24, 0x0b	; 11
    1c78:	8d 7f       	andi	r24, 0xFD	; 253
    1c7a:	8b b9       	out	0x0b, r24	; 11
    1c7c:	8a b1       	in	r24, 0x0a	; 10
    1c7e:	8b 7f       	andi	r24, 0xFB	; 251
    1c80:	8a b9       	out	0x0a, r24	; 10
    1c82:	86 e8       	ldi	r24, 0x86	; 134
    1c84:	80 bd       	out	0x20, r24	; 32
    1c86:	10 bc       	out	0x20, r1	; 32
    1c88:	83 e3       	ldi	r24, 0x33	; 51
    1c8a:	89 b9       	out	0x09, r24	; 9
    1c8c:	8a b1       	in	r24, 0x0a	; 10
    1c8e:	80 61       	ori	r24, 0x10	; 16
    1c90:	8a b9       	out	0x0a, r24	; 10
    1c92:	8a b1       	in	r24, 0x0a	; 10
    1c94:	88 60       	ori	r24, 0x08	; 8
    1c96:	8a b9       	out	0x0a, r24	; 10
    1c98:	08 95       	ret

00001c9a <__vector_13>:
}
/***********************************************ISR ************************************************************/
 ISR(USART_RXC_vect)
{
    1c9a:	1f 92       	push	r1
    1c9c:	0f 92       	push	r0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	2f 93       	push	r18
    1ca6:	3f 93       	push	r19
    1ca8:	4f 93       	push	r20
    1caa:	5f 93       	push	r21
    1cac:	6f 93       	push	r22
    1cae:	7f 93       	push	r23
    1cb0:	8f 93       	push	r24
    1cb2:	9f 93       	push	r25
    1cb4:	af 93       	push	r26
    1cb6:	bf 93       	push	r27
    1cb8:	ef 93       	push	r30
    1cba:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULLPTR)
    1cbc:	e0 91 64 05 	lds	r30, 0x0564	; 0x800564 <UART_RX_Fptr>
    1cc0:	f0 91 65 05 	lds	r31, 0x0565	; 0x800565 <UART_RX_Fptr+0x1>
    1cc4:	30 97       	sbiw	r30, 0x00	; 0
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <__vector_13+0x30>
	{
		UART_RX_Fptr();
    1cc8:	09 95       	icall
	}
}
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	0f 90       	pop	r0
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	0f 90       	pop	r0
    1ce8:	1f 90       	pop	r1
    1cea:	18 95       	reti

00001cec <__vector_15>:

 ISR(USART_TXC_vect)
{
    1cec:	1f 92       	push	r1
    1cee:	0f 92       	push	r0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	2f 93       	push	r18
    1cf8:	3f 93       	push	r19
    1cfa:	4f 93       	push	r20
    1cfc:	5f 93       	push	r21
    1cfe:	6f 93       	push	r22
    1d00:	7f 93       	push	r23
    1d02:	8f 93       	push	r24
    1d04:	9f 93       	push	r25
    1d06:	af 93       	push	r26
    1d08:	bf 93       	push	r27
    1d0a:	ef 93       	push	r30
    1d0c:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULLPTR)
    1d0e:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <UART_TX_Fptr>
    1d12:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <UART_TX_Fptr+0x1>
    1d16:	30 97       	sbiw	r30, 0x00	; 0
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <__vector_15+0x30>
	{
		UART_TX_Fptr();
    1d1a:	09 95       	icall
	}
}
    1d1c:	ff 91       	pop	r31
    1d1e:	ef 91       	pop	r30
    1d20:	bf 91       	pop	r27
    1d22:	af 91       	pop	r26
    1d24:	9f 91       	pop	r25
    1d26:	8f 91       	pop	r24
    1d28:	7f 91       	pop	r23
    1d2a:	6f 91       	pop	r22
    1d2c:	5f 91       	pop	r21
    1d2e:	4f 91       	pop	r20
    1d30:	3f 91       	pop	r19
    1d32:	2f 91       	pop	r18
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	0f 90       	pop	r0
    1d3a:	1f 90       	pop	r1
    1d3c:	18 95       	reti

00001d3e <__umulhisi3>:
    1d3e:	a2 9f       	mul	r26, r18
    1d40:	b0 01       	movw	r22, r0
    1d42:	b3 9f       	mul	r27, r19
    1d44:	c0 01       	movw	r24, r0
    1d46:	a3 9f       	mul	r26, r19
    1d48:	70 0d       	add	r23, r0
    1d4a:	81 1d       	adc	r24, r1
    1d4c:	11 24       	eor	r1, r1
    1d4e:	91 1d       	adc	r25, r1
    1d50:	b2 9f       	mul	r27, r18
    1d52:	70 0d       	add	r23, r0
    1d54:	81 1d       	adc	r24, r1
    1d56:	11 24       	eor	r1, r1
    1d58:	91 1d       	adc	r25, r1
    1d5a:	08 95       	ret

00001d5c <memcpy>:
    1d5c:	fb 01       	movw	r30, r22
    1d5e:	dc 01       	movw	r26, r24
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <memcpy+0xa>
    1d62:	01 90       	ld	r0, Z+
    1d64:	0d 92       	st	X+, r0
    1d66:	41 50       	subi	r20, 0x01	; 1
    1d68:	50 40       	sbci	r21, 0x00	; 0
    1d6a:	d8 f7       	brcc	.-10     	; 0x1d62 <memcpy+0x6>
    1d6c:	08 95       	ret

00001d6e <_exit>:
    1d6e:	f8 94       	cli

00001d70 <__stop_program>:
    1d70:	ff cf       	rjmp	.-2      	; 0x1d70 <__stop_program>
